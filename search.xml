<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32学习笔记五</title>
      <link href="/Aubuty/Aubuty.github.io.git/2023/01/09/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
      <url>/Aubuty/Aubuty.github.io.git/2023/01/09/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-DMA"><a href="#STM32-DMA" class="headerlink" title="STM32 DMA"></a>STM32 DMA</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="DMA的概念"><a href="#DMA的概念" class="headerlink" title="DMA的概念"></a>DMA的概念</h3><p>​直接存储器访问 (DMA) ：用于在外设与存储器之间以及存储器与存储器之间进行高速数据传输。DMA传输过程的初始化和启动由CPU完成，传输过程由DMA控制器来执行，无需CPU参与，从而节省CPU资源，提高利用率。</p><h3 id="DMA数据传输的四个要素："><a href="#DMA数据传输的四个要素：" class="headerlink" title="DMA数据传输的四个要素："></a><strong>DMA数据传输的四个要素：</strong></h3><ol><li>传输源 ：DMA数据传输的来源</li><li>传输目标：DMA数据传输的目的</li><li>传输数量：DMA传输数据的数量</li><li>触发信号：启动一次DMA数据传输的动作</li></ol><p>​DMA在很多情况下都能够帮助提高系统的性能，尤其是在处理大量数据传输时。它可以用来传输数据到&#x2F;从外设，例如ADC、DAC、SPI和UART等，也可以用来进行内存间的数据传输。</p><h3 id="DMA传输方式"><a href="#DMA传输方式" class="headerlink" title="DMA传输方式"></a>DMA传输方式</h3><ul><li>外设到内存</li><li>内存到外设</li><li>内存到内存</li><li>外设到外设</li></ul><h3 id="DMA的循环模式和正常模式"><a href="#DMA的循环模式和正常模式" class="headerlink" title="DMA的循环模式和正常模式"></a>DMA的循环模式和正常模式</h3><p>​BDMA主要有两种模式，一个是Normal正常模式，传输一次后就停止传输；另一种是Circular循环模式，会一直循环的传输下去，即使有DMA中断，传输也是一直在进行的。</p><p>这两种模式各有用途。</p><h4 id="Normal正常模式"><a href="#Normal正常模式" class="headerlink" title="Normal正常模式"></a>Normal正常模式</h4><p>​适合用于单次传输，比如存储器到存储器的数据复制粘贴，又比如串口的数据单次发送，下次还需要发送的时候，使能下即可。</p><h4 id="Circular循环模式"><a href="#Circular循环模式" class="headerlink" title="Circular循环模式"></a>Circular循环模式</h4><p>​适合用于需要连续传输的场合，比如定时器触发BDMA实现任意IO的PWM输出。</p><h3 id="指针递增模式"><a href="#指针递增模式" class="headerlink" title="指针递增模式"></a>指针递增模式</h3><p>源地址指针递增 目标地址指针同步递增 </p><p>适用于：内存到内存 外设到内存</p><p>源地址递增 目标指针不动</p><p>适用于 内存到外设 如 串口</p><h2 id="HAL库函数介绍"><a href="#HAL库函数介绍" class="headerlink" title="HAL库函数介绍"></a>HAL库函数介绍</h2><h3 id="HAL-DMA-Start-开始DMA传输"><a href="#HAL-DMA-Start-开始DMA传输" class="headerlink" title="HAL_DMA_Start : 开始DMA传输"></a>HAL_DMA_Start : 开始DMA传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_DMA_Start</span><span class="params">(DMA_HandleTypeDef *hdma, <span class="type">uint32_t</span> SrcAddress, <span class="type">uint32_t</span> DstAddress, <span class="type">uint32_t</span> DataLength)</span></span><br></pre></td></tr></table></figure><p>第一个参数： DMA句柄</p><p>第二个参数： 源内存地址</p><p>第三个参数： 目标内存地址</p><p>第四个参数： 传输数据的长度 <code>需要乘以siezof（uint32_t）</code></p><h3 id="HAL-DMA-GET-FLAG-判断DMA状态"><a href="#HAL-DMA-GET-FLAG-判断DMA状态" class="headerlink" title="__HAL_DMA_GET_FLAG:  判断DMA状态"></a>__HAL_DMA_GET_FLAG:  判断DMA状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)</span></span><br></pre></td></tr></table></figure><p>参数一： DMA句柄</p><p>参数二：要查看的状态</p><p>有以下几种状态：</p><p>DMA_FLAG_TCIFx：传输完成标志。</p><p>DMA_FLAG_TIFx：半传输完成标志。</p><p>DMA_FLAG_EIFx：传输错误标志。</p><p>DMA_FLAG_DMEIFx：直接模式错误标志。</p><p>DMA_FLAG_FEIFx:FIFO错误标志。</p><p>这里的X需要换成DMA对应的通道</p><h2 id="任务1：内存到内存"><a href="#任务1：内存到内存" class="headerlink" title="任务1：内存到内存"></a>任务1：内存到内存</h2><p>​任务要求：将数组A的内容 通过DMA搬运到数组B 并在串口打印数组B</p><h3 id="配置DMA"><a href="#配置DMA" class="headerlink" title="配置DMA"></a>配置DMA</h3><blockquote><p>选择第二个选项卡 MenToMem （内存到内存）</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230109223949403.png" alt="image-20230109223949403"></p><p>点击Add</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225817635.png" alt="image-20230118225817635"></p><p>配置模式为 正常模式 </p><p>使用DMA1 通道0</p><p>选择指针的递增模式 同步递增</p><p>Data Width 为数据宽度 这里使用word 字 </p><p>其他 暂时不要管 </p><blockquote><p>在 STM32F103 系列没有 Fifo阈值的设置</p></blockquote><h3 id="代码编写："><a href="#代码编写：" class="headerlink" title="代码编写："></a>代码编写：</h3><blockquote><p>以下操作仅在H7系列需要操作</p><p>F1 F4 系列不需要</p><p><strong>attribute</strong>((section(“.DisplayBuffer”))) 这段话只在H7 需要加</p><p>H7 使用的时候可以在DMA.c 文件里 将Filo 关闭</p><p> <code>hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;</code></p></blockquote><p>我使用的是 H7 系列 DMA比较复杂 需要额外设置 如下： 其他系列 F1 F4 不需要做 </p><p>这是总线访问权限的图</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191212561.png" alt="image-20230117191212561"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191224657.png" alt="image-20230117191224657"></p><p>可以看到 DMA1 DMA2 可以访问SRAM1 -SRAM3 的内容 </p><p>所以需要 指定内存 </p><p>我使用的是Clion+CubaMX 需要做如下设置 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191244044.png" alt="image-20230117191244044"></p><p>首先找到xxx.Id添加如下代码 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191256242.png" alt="image-20230117191256242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">._User_data :</span><br><span class="line">   &#123;</span><br><span class="line">     . = ALIGN(32);</span><br><span class="line">     . = ALIGN(32);</span><br><span class="line">   &#125; &gt;RAM_D2</span><br></pre></td></tr></table></figure><p>准备工作完成  指定变量存储去见下方</p><h4 id="准备原始数据"><a href="#准备原始数据" class="headerlink" title="准备原始数据"></a>准备原始数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 1024 <span class="comment">//数组大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line">count <span class="type">uint32_t</span> srcBuf[BUF_SIZE] =&#123;  <span class="comment">//原始数据</span></span><br><span class="line">        <span class="number">0x01020304</span>,<span class="number">0x05060708</span>,<span class="number">0x090A0B0C</span>,<span class="number">0x0D0E0F10</span>,</span><br><span class="line">        <span class="number">0x11121314</span>,<span class="number">0x15161718</span>,<span class="number">0x191A1B1C</span>,<span class="number">0x1D1E1F20</span>,</span><br><span class="line">        <span class="number">0x21222324</span>,<span class="number">0x25262728</span>,<span class="number">0x292A2B2C</span>,<span class="number">0x2D2E2F30</span>,</span><br><span class="line">        <span class="number">0x31323334</span>,<span class="number">0x35363738</span>,<span class="number">0x393A3B3C</span>,<span class="number">0x3D3E3F40</span>,</span><br><span class="line">        <span class="number">0x41424344</span>,<span class="number">0x44564748</span>,<span class="number">0x494A4B4C</span>,<span class="number">0x4D4E4F50</span>,</span><br><span class="line">        <span class="number">0x51525345</span>,<span class="number">0x55565758</span>,<span class="number">0x595A5B5C</span>,<span class="number">0x5D5E5F60</span>,</span><br><span class="line">        <span class="number">0x61626364</span>,<span class="number">0x65666768</span>,<span class="number">0x696A6B6C</span>,<span class="number">0x6D6E6F70</span>,</span><br><span class="line">        <span class="number">0x71727374</span>,<span class="number">0x75767778</span>,<span class="number">0x797A7B7C</span>,<span class="number">0x7D7E7F80</span></span><br><span class="line">&#125;;</span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint32_t</span> desBuf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 目标数组</span></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br></pre></td></tr></table></figure><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DMA M to M Test \r\n &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (HAL_DMA_Start(&amp;hdma_memtomem_dma1_stream0, (<span class="type">uint32_t</span>) srcBuf, (<span class="type">uint32_t</span>) desBuf, BUF_SIZE) == HAL_OK)&#123; <span class="comment">//dma开始搬运数据</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;OK\r\n&quot;</span>); <span class="comment">// 正常串口显示 OK 反之 显示no</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;no\r\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (__HAL_DMA_GET_FLAG(&amp;hdma_memtomem_dma1_stream0,DMA_FLAG_TCIF0_4) == ENABLE); <span class="comment">// 等待发送完毕 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(srcBuf) / <span class="keyword">sizeof</span>(srcBuf[<span class="number">0</span>]); ++i)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;srcBuf[%d] = %lX\r\n&quot;</span>,i,desBuf[i]);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><h3 id="程序结果："><a href="#程序结果：" class="headerlink" title="程序结果："></a>程序结果：</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192215142.png" alt="image-20230117192215142"></p><h2 id="任务2：内存到外设"><a href="#任务2：内存到外设" class="headerlink" title="任务2：内存到外设"></a>任务2：内存到外设</h2><p>使用DMA 将内存的数据发送到串口</p><h3 id="使用到的库函数"><a href="#使用到的库函数" class="headerlink" title="使用到的库函数"></a>使用到的库函数</h3><h4 id="串口DMA方式发送函数：HAL-UART-Transmit-DMA"><a href="#串口DMA方式发送函数：HAL-UART-Transmit-DMA" class="headerlink" title="串口DMA方式发送函数：HAL_UART_Transmit_DMA"></a>串口DMA方式发送函数：HAL_UART_Transmit_DMA</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192252949.png" alt="image-20230117192252949"></p><h3 id="Cuba-MX的设置"><a href="#Cuba-MX的设置" class="headerlink" title="Cuba MX的设置"></a>Cuba MX的设置</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192413741.png" alt="image-20230117192413741"></p><p>打开Usart1 的DMA 所有参数默认即可 这里 Mode 选择单次  只发送一次 </p><p>最后的效果图 可以看出两种 mode的区别  这里 像是串口类型的只需要发送一次选择Normal 就可以  </p><p>像adc需要持续采集数据的需要设置为循环 Circular  </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225333796.png" alt="image-20230118225333796"></p><p>检测NVIC的 DMA1 的中断是否打开 </p><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 50 <span class="comment">//数组大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>)))<span class="type">uint8_t</span> SendBuf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">//因为H7的DMA只能访问 ASRM的数据 需要将发送数据的变量放到ASRM的区域 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h4 id="发送数据-1"><a href="#发送数据-1" class="headerlink" title="发送数据"></a>发送数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;DMA M to P Test \r\n &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(SendBuf) / <span class="keyword">sizeof</span>(SendBuf[<span class="number">0</span>]); ++i)&#123; <span class="comment">//填充数据</span></span><br><span class="line">        SendBuf[i] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HAL_UART_Transmit_DMA(&amp;huart2,SendBuf,BUF_SIZE);<span class="comment">//发送数据 </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><h4 id="程序效果"><a href="#程序效果" class="headerlink" title="程序效果"></a>程序效果</h4><h5 id="Mode-为单次"><a href="#Mode-为单次" class="headerlink" title="Mode 为单次"></a>Mode 为单次</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223101377.png" alt="image-20230118223101377"></p><h5 id="Mode-为循环"><a href="#Mode-为循环" class="headerlink" title="Mode 为循环"></a>Mode 为循环</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223312438.png" alt="image-20230118223312438"></p><h2 id="任务3：-外设到内存"><a href="#任务3：-外设到内存" class="headerlink" title="任务3： 外设到内存"></a>任务3： 外设到内存</h2><h3 id="使用到的库函数-1"><a href="#使用到的库函数-1" class="headerlink" title="使用到的库函数"></a>使用到的库函数</h3><h4 id="串口DMA方式接收函数：HAL-UART-Receive-DMA"><a href="#串口DMA方式接收函数：HAL-UART-Receive-DMA" class="headerlink" title="串口DMA方式接收函数：HAL_UART_Receive_DMA"></a><strong>串口DMA方式接收函数：HAL_UART_Receive_DMA</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223447023.png" alt="image-20230118223447023"></p><h4 id="获取未传输数据个数函数：-HAL-DMA-GET-COUNTER"><a href="#获取未传输数据个数函数：-HAL-DMA-GET-COUNTER" class="headerlink" title="获取未传输数据个数函数：__HAL_DMA_GET_COUNTER"></a><strong>获取未传输数据个数函数：__HAL_DMA_GET_COUNTER</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223459503.png" alt="image-20230118223459503"></p><h4 id="关闭DMA数据流：-HAL-DMA-DISABLE"><a href="#关闭DMA数据流：-HAL-DMA-DISABLE" class="headerlink" title="关闭DMA数据流：__HAL_DMA_DISABLE"></a><strong>关闭DMA数据流：__HAL_DMA_DISABLE</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223508600.png" alt="image-20230118223508600"></p><h3 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a><strong>任务目标</strong></h3><p><strong>实现不定长数据的收发</strong></p><h3 id="任务内容"><a href="#任务内容" class="headerlink" title="任务内容"></a><strong>任务内容</strong></h3><p>利用串口调试助手，从PC上发送任意长度的字符到开发板，开发板收到后原样发回到PC。</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>使能IDLE中断</p><p>在串口1的中断服务程序USART1_IRQHandler中添加对IDLE中断的判断，该函数位于stm32h7xx_it.c文件；</p><p>设置传输模式为普通模式，启动DMA传输。串口一旦接收到数据，则触发DMA操作，将数据存放到用户定义的接收缓冲区；</p><p>当一帧数据发送完成后，线路处于IDLE状态，将触发IDLE中断，调用IDLE中断回调函数，设置数据接收完成标志；</p><p>主程序检测到接收完成标志置位后，将接收的一帧数据原样发回到PC，并禁能DMA，以触发DMA中断。DMA中断将调用接收中断回<br>调函数，在回调函数中重新启动DMA传输</p><h3 id="CubaMx-的-配置"><a href="#CubaMx-的-配置" class="headerlink" title="CubaMx 的 配置"></a>CubaMx 的 配置</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223520009.png" alt="image-20230118223520009"></p><p>添加接收的DMA</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223532827.png" alt="image-20230118223532827"></p><p>检查中断 将 串口中断 和 DMA的中断打开</p><h3 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h3><h4 id="准备数据接收区"><a href="#准备数据接收区" class="headerlink" title="准备数据接收区"></a>准备数据接收区</h4><p>在main.c下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint8_t</span> rcvBuf[BUF_SIZE]; <span class="comment">// 定义接受数组</span></span><br><span class="line"><span class="type">uint8_t</span> rcvLen; <span class="comment">// 定义接受数据长度</span></span><br><span class="line"><span class="type">uint8_t</span> Rx_Flag; <span class="comment">//接受标志</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><p>在 main.h 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 256 <span class="comment">//数组大小</span></span></span><br></pre></td></tr></table></figure><p>在stm32h7xx_it.c 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="keyword">extern</span> __attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint8_t</span> rcvBuf[BUF_SIZE]; <span class="comment">// 定义接受数组</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> rcvLen; <span class="comment">// 定义接受数据长度</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Rx_Flag; <span class="comment">//接受标志</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h4 id="准备接受数据"><a href="#准备接受数据" class="headerlink" title="准备接受数据"></a>准备接受数据</h4><p>开启空闲中断  在main.c 文件下 </p><blockquote><p>H750 上电就进入空闲中断 就会打印一次 长度为0 的数据 一下两种方法可以解决 </p><p><code>while(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE)==RESET)</code></p><p>或</p><pre><code>__HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);</code></pre></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">   <span class="built_in">memset</span>(rcvBuf,<span class="number">0</span>,BUF_SIZE);</span><br><span class="line">   __HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);<span class="comment">//开启IDLE中断</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;DMA P to M Test \r\n &quot;</span>);</span><br><span class="line">   HAL_UART_Receive_DMA(&amp;huart1,rcvBuf,BUF_SIZE);<span class="comment">//开启DMA接收</span></span><br><span class="line">__HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);<span class="comment">//防止单片机上电就进入空闲中断 </span></span><br><span class="line">   __HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);<span class="comment">//防止单片机上电就进入空闲中断 </span></span><br><span class="line">   Rx_Flag = <span class="number">0</span>;<span class="comment">//传输完成 标志置零</span></span><br><span class="line"> <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><p>开始数据接受  在stm32h7xx_it.c 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">    <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE) == SET)&#123; <span class="comment">//判断IDLE的标志位</span></span><br><span class="line">        __HAL_UART_CLEAR_IDLEFLAG(&amp;huart1); <span class="comment">//清除IDLE标志位置</span></span><br><span class="line">        <span class="comment">//计算获得了多少数据</span></span><br><span class="line">        <span class="type">uint8_t</span> temp_len = __HAL_DMA_GET_COUNTER(&amp;hdma_usart1_rx); <span class="comment">// 获取 剩余的位数</span></span><br><span class="line">        HAL_UART_DMAStop(&amp;huart1); <span class="comment">//停止DMA传输 防止干扰</span></span><br><span class="line">        rcvLen = BUF_SIZE - temp_len ; <span class="comment">//总位数减去剩余位数 得到接收位数</span></span><br><span class="line">        <span class="comment">//HAL_UART_Transmit_DMA(&amp;huart1,rcvBuf,rcvLen); //原样发回串口</span></span><br><span class="line">        Rx_Flag = <span class="number">1</span> ;<span class="comment">//传输完成标志 置为1 表示接受完毕 </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END U SART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p> 在main.c 编写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">   <span class="keyword">if</span>(Rx_Flag == <span class="number">1</span> )&#123;</span><br><span class="line">       Rx_Flag = <span class="number">0</span>;<span class="comment">//接受标志 置零</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;data is %s\r\n&quot;</span>,rcvBuf);<span class="comment">//原样输出串口 </span></span><br><span class="line">       <span class="built_in">memset</span>(rcvBuf,<span class="number">0</span>,BUF_SIZE);<span class="comment">//清空接收区</span></span><br><span class="line">       HAL_UART_Receive_DMA(&amp;huart1,rcvBuf,BUF_SIZE);<span class="comment">//重新开启串口DMA接收</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h4 id="程序效果-1"><a href="#程序效果-1" class="headerlink" title="程序效果"></a>程序效果</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225031500.png" alt="image-20230118225031500"></p><p>参考文献：</p><p><a href="https://blog.csdn.net/wallace89/article/details/117001405">https://blog.csdn.net/wallace89/article/details/117001405</a> </p><p><a href="https://blog.csdn.net/Jaken5213/article/details/110494543">(132条消息) STM32H743不能使用DMA的问题_Jaken5213的博客-CSDN博客_stm32h743dma指定地址</a></p><p><a href="https://blog.csdn.net/hqy450665101/article/details/110149311">(132条消息) STM32_H750串口接收不定长数据（IDLE+DMA）及初始化之后便进入idle中断的解决方法_MY_QuinTA的博客-CSDN博客_h750 串口空闲+dma 一直进接收中断</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> DMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记四</title>
      <link href="/Aubuty/Aubuty.github.io.git/2023/01/07/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
      <url>/Aubuty/Aubuty.github.io.git/2023/01/07/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-学习笔记-串口"><a href="#STM32-学习笔记-串口" class="headerlink" title="STM32 学习笔记 串口"></a>STM32 学习笔记 串口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="计算机通信的概念"><a href="#计算机通信的概念" class="headerlink" title="计算机通信的概念"></a><strong>计算机通信的概念</strong></h3><p>​将计算机技术和通信技术相结合，完成计算机与外部设备或计算机与计算机之间的信息交换。按照数据传输方式的不同，可以分为串行通信和并行通信两类</p><ul><li><p><input disabled="" type="checkbox"> <strong>串行通信：数据逐位传输</strong></p></li><li><p><input disabled="" type="checkbox"> <strong>并行通信：多位数据同时传输</strong></p></li></ul><h4 id="并行通信的特点"><a href="#并行通信的特点" class="headerlink" title="并行通信的特点"></a><strong>并行通信的特点</strong></h4><blockquote><p>多位数据同时传输，传输控制简单，传输速度快，但是在长距离传输时硬件成本较高。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107185616094.png" alt="image-20230107185616094"></p><h4 id="串行通信的特点"><a href="#串行通信的特点" class="headerlink" title="串行通信的特点"></a><strong>串行通信的特点</strong></h4><blockquote><p>数据逐位传输，传输线少，长距离传输时成本低，但数据的传输控制较复杂。按照实现数据同步的方式，可以分为同步串行和异步串行两种。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107185701153.png" alt="image-20230107185701153"></p><h4 id="同步串行通信的特点"><a href="#同步串行通信的特点" class="headerlink" title="同步串行通信的特点"></a><strong>同步串行通信的特点</strong></h4><blockquote><p><strong>数据传输以数据块（一组字符）为单位，在一个数据块内，字符与字符间无间隔，收发双方依靠独立的时钟线进行信号的同步.适用于大批量的数据传输。</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190042897.png" alt="image-20230107190042897"></p><h4 id="异步串行通信的特点"><a href="#异步串行通信的特点" class="headerlink" title="异步串行通信的特点"></a><strong>异步串行通信的特点</strong></h4><blockquote><p><strong>数据传输以单个字符为单位，字符和字符之间的间隙任意，字符内部每一位持续的时间相同。收发双方没有专门的时钟信号，而是依靠事先约定的字符格式和通信速率来完成通信。</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190136387.png" alt="image-20230107190136387"></p><h4 id="异步串行通信的字符格式"><a href="#异步串行通信的字符格式" class="headerlink" title="异步串行通信的字符格式"></a><strong>异步串行通信的字符格式</strong></h4><blockquote><p><strong>常用字符格式：1位起始位 8位数据位 无奇偶校验 1位停止位</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190213226.png" alt="image-20230107190213226"></p><h5 id="异步串行通信的通信速率"><a href="#异步串行通信的通信速率" class="headerlink" title="异步串行通信的通信速率"></a><strong>异步串行通信的通信速率</strong></h5><h6 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a><strong>波特率</strong></h6><p>​每秒钟传送二进制数码的位数，以bit&#x2F;s（bps）为单位。</p><ul><li>常用的波特率有：9600、19200、38400、57600和115200；</li><li>波特率为115200，表示每秒传输115200位，且每一位数据在数据线上持续时间为Tbit &#x3D; 1&#x2F;115200 ≈ 8.68us。</li></ul><h4 id="异步串行通信的数据接收过程"><a href="#异步串行通信的数据接收过程" class="headerlink" title="异步串行通信的数据接收过程"></a><strong>异步串行通信的数据接收过程</strong></h4><ol><li>接收过程由起始位的下降沿启动；</li><li>接收端等待8个时钟周期，以便建立一个接近比特周期中间的采样点；</li><li>接收端等待16个时钟周期，使其进入第一个数据位周期的中点；</li><li>第一个数据位被采样并存储在接收寄存器中；</li><li>串口模块在采样第二个数据位之前等待另外16个时钟周期；</li><li>重复此过程，直到所有数据位都被采样和存储；</li><li>由停止位的上升沿使数据线返回到空闲状态。</li></ol><h3 id="三种常用的错误校验方式"><a href="#三种常用的错误校验方式" class="headerlink" title="三种常用的错误校验方式"></a><strong>三种常用的错误校验方式</strong></h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>​奇校验表示数据中“1”的个数与校验位“1”的个数之和为奇数；偶校验表示数据中“1”的个数与校验位“1”的个数之和为偶数。</p><h4 id="代码和校验"><a href="#代码和校验" class="headerlink" title="代码和校验"></a>代码和校验</h4><p>​发送方将所发数据块求和，产生一个字节的校验字符附加到数据块末尾。接收方采用同样方式进行检测。</p><h4 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h4><p>​通过某种数学运算实现有效信息与校验位之间的循环校验，常用于磁盘信息的传输、存储区的完整性校验等。</p><h2 id="STM32串口通信"><a href="#STM32串口通信" class="headerlink" title="STM32串口通信"></a>STM32串口通信</h2><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107191214905.png" alt="image-20230107191214905"></p><blockquote><p>串口收发单元主要利用数据寄存器DR，发送引脚TX，接收引脚RX，以及三个通信状态位TXE、TC和RXNE来完成数据的接收和发送。</p></blockquote><p>STM32H750VBT6的串口引脚</p><table><thead><tr><th>串口号</th><th>RX</th><th>TX</th></tr></thead><tbody><tr><td>USART1</td><td>PB15</td><td>PB14</td></tr><tr><td>USART2</td><td>PA3</td><td>PA2</td></tr><tr><td>USART3</td><td>PB11</td><td>PB10</td></tr><tr><td>USART6</td><td>PC7</td><td>PC6</td></tr><tr><td>UART4</td><td>PA1</td><td>PA0</td></tr><tr><td>UART5</td><td>PB12</td><td>PB13</td></tr><tr><td>UART7</td><td>PE7</td><td>PE8</td></tr><tr><td>UART8</td><td>PE0</td><td>PE1</td></tr></tbody></table><h3 id="串口初始化数据类型"><a href="#串口初始化数据类型" class="headerlink" title="串口初始化数据类型"></a><strong>串口初始化数据类型</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107192804209.png" alt="image-20230107192804209"></p><h3 id="STM32H750-微控制器-HAL-库中常用的串口函数："><a href="#STM32H750-微控制器-HAL-库中常用的串口函数：" class="headerlink" title="STM32H750 微控制器 HAL 库中常用的串口函数："></a>STM32H750 微控制器 HAL 库中常用的串口函数：</h3><h4 id="HAL-UART-Init-：初始化串口设备。"><a href="#HAL-UART-Init-：初始化串口设备。" class="headerlink" title="HAL_UART_Init()：初始化串口设备。"></a>HAL_UART_Init()：初始化串口设备。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107192942341.png" alt="image-20230107192942341"></p><h4 id="HAL-UART-Transmit-：向串口发送数据。"><a href="#HAL-UART-Transmit-：向串口发送数据。" class="headerlink" title="HAL_UART_Transmit()：向串口发送数据。"></a>HAL_UART_Transmit()：向串口发送数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193017730.png" alt="image-20230107193017730"></p><h4 id="HAL-UART-Receive-：从串口接收数据。"><a href="#HAL-UART-Receive-：从串口接收数据。" class="headerlink" title="HAL_UART_Receive()：从串口接收数据。"></a>HAL_UART_Receive()：从串口接收数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193037943.png" alt="image-20230107193037943"></p><h4 id="HAL-UART-Transmit-IT-：启用中断方式向串口发送数据。"><a href="#HAL-UART-Transmit-IT-：启用中断方式向串口发送数据。" class="headerlink" title="HAL_UART_Transmit_IT()：启用中断方式向串口发送数据。"></a>HAL_UART_Transmit_IT()：启用中断方式向串口发送数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193110573.png" alt="image-20230107193110573"></p><h4 id="HAL-UART-Receive-IT-：启用中断方式从串口接收数据。"><a href="#HAL-UART-Receive-IT-：启用中断方式从串口接收数据。" class="headerlink" title="HAL_UART_Receive_IT()：启用中断方式从串口接收数据。"></a>HAL_UART_Receive_IT()：启用中断方式从串口接收数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193131370.png" alt="image-20230107193131370"></p><h4 id="HAL-UART-IRQHandle-r串口中断通用处理函数"><a href="#HAL-UART-IRQHandle-r串口中断通用处理函数" class="headerlink" title="HAL_UART_IRQHandle: r串口中断通用处理函数"></a>HAL_UART_IRQHandle: r串口中断通用处理函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193211185.png" alt="image-20230107193211185"></p><h4 id="HAL-UART-TxCpltCallback-串口发送中断回调函数"><a href="#HAL-UART-TxCpltCallback-串口发送中断回调函数" class="headerlink" title="HAL_UART_TxCpltCallback: 串口发送中断回调函数"></a>HAL_UART_TxCpltCallback: 串口发送中断回调函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193242696.png" alt="image-20230107193242696"></p><h4 id="HAL-UART-RxCpltCallback-串口接收中断回调函数"><a href="#HAL-UART-RxCpltCallback-串口接收中断回调函数" class="headerlink" title="HAL_UART_RxCpltCallback: 串口接收中断回调函数"></a>HAL_UART_RxCpltCallback: <strong>串口接收中断回调函数</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193327081.png" alt="image-20230107193327081"></p><h4 id="HAL-UART-ENABLE-IT-串口中断使能函数"><a href="#HAL-UART-ENABLE-IT-串口中断使能函数" class="headerlink" title="__HAL_UART_ENABLE_IT: 串口中断使能函数"></a>__HAL_UART_ENABLE_IT: 串口中断使能函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193610203.png" alt="image-20230107193610203"></p><h4 id="HAL-UART-GET-FLAG-串口中断标志查询函数"><a href="#HAL-UART-GET-FLAG-串口中断标志查询函数" class="headerlink" title="__HAL_UART_GET_FLAG: 串口中断标志查询函数"></a>__HAL_UART_GET_FLAG: 串口中断标志查询函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193553138.png" alt="image-20230107193553138"></p><h4 id="HAL-UART-CLEAR-IDLEFLAG-空闲中断标志清除函数"><a href="#HAL-UART-CLEAR-IDLEFLAG-空闲中断标志清除函数" class="headerlink" title="__HAL_UART_CLEAR_IDLEFLAG : 空闲中断标志清除函数"></a>__HAL_UART_CLEAR_IDLEFLAG : 空闲中断标志清除函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193532379.png" alt="image-20230107193532379"></p><h4 id="USART-RX-STA-状态标记变量"><a href="#USART-RX-STA-状态标记变量" class="headerlink" title="USART_RX_STA 状态标记变量"></a>USART_RX_STA 状态标记变量</h4><blockquote><p>从零开始，串口中断接收到一个数据(一个字节)自增1,当数据读取全部OK时候,（也就是回车换行符\r\n的时候）,那么USART_RX_STA的最高位置1 表示串口数据全部接收完毕,然后就可以在main函数里处理数据.</p></blockquote><p>uint16_t USART_RX_STA</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107194302211.png" alt="image-20230107194302211"></p><h2 id="任务1：非中断发送接收"><a href="#任务1：非中断发送接收" class="headerlink" title="任务1：非中断发送接收"></a>任务1：非中断发送接收</h2><h3 id="要求：-从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。"><a href="#要求：-从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。" class="headerlink" title="要求： 从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。"></a>要求： 从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。</h3><h3 id="配置串口"><a href="#配置串口" class="headerlink" title="配置串口"></a>配置串口</h3><p>使用USART2： </p><p>mode为<strong>异步模式，无硬件流控</strong></p><p>设置通信参数：<br>波特率115200<br>8位数据位<br>无奇偶校验<br>1位停止位<br>使能接收和发送<br>16倍过采样</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107195129799.png" alt="image-20230107195129799"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收数组定义</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="type">uint8_t</span> Buf[<span class="number">10</span>] ;</span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  <span class="keyword">if</span>(HAL_UART_Receive(&amp;huart2,Buf,<span class="number">5</span>,<span class="number">0xffff</span>) == HAL_OK)&#123; <span class="comment">// 接收数据</span></span><br><span class="line">      HAL_UART_Transmit(&amp;huart2,Buf,<span class="number">5</span>,<span class="number">0xffff</span>);<span class="comment">//原样发回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h3 id="程序效果"><a href="#程序效果" class="headerlink" title="程序效果"></a>程序效果</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107210143947.png" alt="image-20230107210143947"></p><h2 id="任务2：中断方式发送接收"><a href="#任务2：中断方式发送接收" class="headerlink" title="任务2：中断方式发送接收"></a>任务2：中断方式发送接收</h2><p>其他设置和上面一样 </p><h3 id="需要打开串口中断"><a href="#需要打开串口中断" class="headerlink" title="需要打开串口中断"></a>需要打开串口中断</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107211624630.png" alt="image-20230107211624630"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接收区的大小 使用宏定义方便后续更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BuffSize  7 <span class="comment">//接受区大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量声明</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="type">uint8_t</span> Buf[BuffSize] ; <span class="comment">//接收区</span></span><br><span class="line"><span class="type">uint8_t</span> Rx_Flag = <span class="number">0</span>; <span class="comment">// 接收状态定义</span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart2,(<span class="type">uint8_t</span>*)<span class="string">&quot;Hello word\r\n&quot;</span>,<span class="keyword">sizeof</span> (<span class="string">&quot;Hello word\r\n&quot;</span>),<span class="number">0xffff</span>);<span class="comment">//单片机上电初始化 输出Helo word</span></span><br><span class="line"></span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart2,(<span class="type">uint8_t</span>*)Buf,BuffSize);<span class="comment">//使能串口接收中断</span></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">//主函数</span></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    <span class="keyword">if</span>(Rx_Flag == <span class="number">1</span>)&#123;</span><br><span class="line">        Rx_Flag =<span class="number">0</span>;</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart2,(<span class="type">uint8_t</span>*)<span class="string">&quot;Input data:\r\n&quot;</span>,<span class="keyword">sizeof</span> (<span class="string">&quot;Input data:\r\n&quot;</span>));</span><br><span class="line">        HAL_UART_Transmit_IT(&amp;huart2,Buf,BuffSize);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收回调函数</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(huart-&gt;Instance == USART2)&#123;</span><br><span class="line">        Rx_Flag = <span class="number">1</span>;</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart2,Buf,BuffSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> UART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记三</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/12/27/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/12/27/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32定时器"><a href="#STM32定时器" class="headerlink" title="STM32定时器"></a>STM32定时器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>STM32的定时器可用于不同的目的，包括生成PWM信号、测量时间间隔、生成中断和控制外设等。它有几种不同类型的定时器，包括通用定时器、高级控制定时器、低功耗定时器和系统滴答定时器。</p><p>​定时器是对周期固定的脉冲信号进行计数，如MCU内部的外设时钟(APB)。</p><p>​计数器是对周期不确定的脉冲信号进行计数，如MCU的I&#x2F;O引脚所引入的外部脉冲信号。</p><p>​结论：定时器和计数器本质上都是计数器，定时器是计数器的一种特例。</p><h3 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a><strong>定时器分类</strong></h3><table><thead><tr><th align="center">种类</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">基本定时器</td><td align="center">几乎没有任何输入&#x2F;输出通道，常用作时基，实现基本的定时&#x2F;计数功能</td></tr><tr><td align="center">通用定时器</td><td align="center">具备多路独立的捕获和比较通道，可以完成定时计数、输入捕获、输出比较等功能</td></tr><tr><td align="center">高级定时器</td><td align="center">除具备通用定时器的功能外，还具备带死区控制的互补信号输出、紧急刹车关断输入等功能，可用于电机控制和数字电源设计</td></tr></tbody></table><h3 id="定时器的时钟频率"><a href="#定时器的时钟频率" class="headerlink" title="定时器的时钟频率"></a><strong>定时器的时钟频率</strong></h3><p>外设总线挂在TIM外设</p><table><thead><tr><th></th><th align="center"><strong>外设总线时钟APB1</strong>-AHB1</th><th align="center"><strong>外设总线时钟APB2</strong>-AHB2</th></tr></thead><tbody><tr><td></td><td align="center">LPTIM1（低功耗定时器）</td><td align="center"></td></tr><tr><td>基本定时器</td><td align="center">TIM6-TIM7</td><td align="center"></td></tr><tr><td>通用定时器</td><td align="center">TIM2-TIM3-TIM4-TIM5-TIM12-TIM13-TIM14</td><td align="center">TIM15-TIM16-TIM17</td></tr><tr><td>高级定时器</td><td align="center"></td><td align="center">TIM1-TIM8</td></tr></tbody></table><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231132006932.png" alt="image-20221231132006932"></p><p>由上图看出AHB1,2 和APB1,2 的总线频率为240Mhz 挂在在APB1，2和AHB1，2 上的定时器的频率为120Mhz</p><h3 id="定时器的三种计数模式"><a href="#定时器的三种计数模式" class="headerlink" title="定时器的三种计数模式"></a><strong>定时器的三种计数模式</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231132738219.png" alt="image-20221231132738219"></p><h3 id="溢出值CNT与自动重载值ARR的关系列表"><a href="#溢出值CNT与自动重载值ARR的关系列表" class="headerlink" title="溢出值CNT与自动重载值ARR的关系列表"></a><strong>溢出值CNT与自动重载值ARR的关系列表</strong></h3><table><thead><tr><th align="center">计数模式</th><th align="center">计数器溢出值</th><th align="center">计数器重载值</th></tr></thead><tbody><tr><td align="center"><strong>递增计数</strong></td><td align="center"><strong>CNT &#x3D; ARR</strong></td><td align="center"><strong>CNT &#x3D; 0</strong></td></tr><tr><td align="center"><strong>递减计数</strong></td><td align="center"><strong>CNT &#x3D; 0</strong></td><td align="center"><strong>CNT &#x3D; ARR</strong></td></tr><tr><td align="center"><strong>中心对齐计数</strong></td><td align="center"><strong>CNT &#x3D; ARR-1</strong> <br /><strong>CNT &#x3D; 1</strong><br /></td><td align="center"><strong>CNT &#x3D; ARR</strong><br /><strong>CNT &#x3D; 0</strong><br /></td></tr></tbody></table><h3 id="定时器的定时时间计算公式"><a href="#定时器的定时时间计算公式" class="headerlink" title="定时器的定时时间计算公式"></a><strong>定时器的定时时间计算公式</strong></h3><p><strong>定时时间 &#x3D; 计数值*计数时间</strong></p><p><strong>定时时间 &#x3D; 计数值&#x2F;时钟频率</strong><br>$$<br>T_{(s)}&#x3D;\frac{(ARR+1)*(PSC+1)}{𝐓𝐈𝐌_𝐂𝐋_{Hz}}<br>$$<br>例如:</p><p>即时500ms 使用tim2 </p><p>因为tim2 挂载在APB2 TIM2的时钟频率为240Mhz PSC为2399<br>$$<br>500_{ms}&#x3D;\frac{(ARR+1)*(23999+1)}{240000}<br>$$<br>通过计算Arr&#x3D;4999</p><h3 id="HAL库函数解析"><a href="#HAL库函数解析" class="headerlink" title="HAL库函数解析"></a>HAL库函数解析</h3><h4 id="HAL-TIM-Base-Start-IT"><a href="#HAL-TIM-Base-Start-IT" class="headerlink" title="HAL_TIM_Base_Start_IT"></a><strong>HAL_TIM_Base_Start_IT</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231141044345.png" alt="image-20221231141044345"></p><h4 id="回调函数HAL-TIM-PeriodElapsedCallback"><a href="#回调函数HAL-TIM-PeriodElapsedCallback" class="headerlink" title="回调函数HAL_TIM_PeriodElapsedCallback"></a><strong>回调函数HAL_TIM_PeriodElapsedCallback</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231141223889.png" alt="image-20221231141223889"></p><h2 id="任务1定时闪烁指示灯"><a href="#任务1定时闪烁指示灯" class="headerlink" title="任务1定时闪烁指示灯"></a>任务1<strong>定时闪烁指示灯</strong></h2><p>时钟的配置和之前的一样 并且将LED小灯打开 </p><h3 id="配置TIM2"><a href="#配置TIM2" class="headerlink" title="配置TIM2"></a>配置TIM2</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231162909317.png" alt="image-20221231162909317"></p><p>在Clock Source（中断来源） 使用Internal Clock </p><h3 id="使能定时器2的中断中断优先级使用默认值"><a href="#使能定时器2的中断中断优先级使用默认值" class="headerlink" title="使能定时器2的中断中断优先级使用默认值"></a><strong>使能定时器2的中断中断优先级使用默认值</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231163212877.png" alt="image-20221231163212877"></p><p>配置定时时间 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231163359779.png" alt="image-20221231163359779"></p><p>这里我配置的为： </p><p>Prtscaler (定时器分频系数)  : 23999</p><p>Counter Mode(计数模式)    Up(向上计数模式)                    </p><p>Counter Period(自动重装载值) :    4999     </p><p>CKD(时钟分频因子) ：       No Division 不分频                       </p><p>auto-reload-preload(自动重装载)  :    Enable 使能</p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>初始化使能定时器2</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231170317204.png" alt="image-20221231170317204"></p><p>添加定时器溢出的中断回调函数</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231170409617.png" alt="image-20221231170409617"></p><h2 id="任务2-PWM"><a href="#任务2-PWM" class="headerlink" title="任务2 PWM"></a>任务2 PWM</h2><h3 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a><strong>基本特性</strong></h3><p>脉冲宽度调制（PWM）是一种对模拟信号电平进行数字编码的方法。广泛应用于电机控制、灯光的亮度调节、功率控制等领域</p><h3 id="PWM信号的两个基本参数"><a href="#PWM信号的两个基本参数" class="headerlink" title="PWM信号的两个基本参数"></a><strong>PWM信号的两个基本参数</strong></h3><ul><li><strong>周期（Period）</strong></li></ul><p>​<strong>一个完整PWM波形所持续的时间</strong></p><ul><li><strong>占空比（Duty）</strong></li></ul><p>​<strong>高电平持续时间（Ton）与周期时间（Period）的比值</strong></p><h4 id="周期计算公式"><a href="#周期计算公式" class="headerlink" title="周期计算公式"></a>周期计算公式</h4><p>$$<br>Period(ms) &#x3D; {( ARR + 1 ) * ( PSC + 1 )\over  TIMx_CLK_{(KHz)}}<br>$$</p><blockquote><p>TIMx_CLK：定时器X挂在总线的频率</p></blockquote><h4 id="占空比计算公式"><a href="#占空比计算公式" class="headerlink" title="占空比计算公式"></a><strong>占空比计算公式</strong></h4><p>$$<br>Duty &#x3D; （(TIMx-&gt;CCR1) &#x2F; (ARR+1) ）* 100%<br>$$</p><p>使用的TIM几 就是TIM几的CRR</p><h4 id="频率计算公式"><a href="#频率计算公式" class="headerlink" title="频率计算公式"></a>频率计算公式</h4><p>周期的到倒数<br>$$<br>F_{KHz}&#x3D;{TIMx_CLK_{(KHz)}\over (ARR+1)∗(PSC+1)}<br>$$<br>例如： </p><blockquote><p>我要设置一个频率为2Khz的PWM信号 周期为 2Ms 占空比为 47.5% 的信号</p><p>使用TIM2 挂在在APB1 频率为 240Mhz</p><p>PSC 为 239 </p><p>ARR通过计算&#x3D; 1999</p><p>CCR 通过计算为 950</p></blockquote><h3 id="PWM信号的电压调节原理"><a href="#PWM信号的电压调节原理" class="headerlink" title="PWM信号的电压调节原理"></a><strong>PWM信号的电压调节原理</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171151053.png" alt="image-20221231171151053"></p><h3 id="PWM输出的工作原理"><a href="#PWM输出的工作原理" class="headerlink" title="PWM输出的工作原理"></a><strong>PWM输出的工作原理</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171245742.png" alt="image-20221231171245742"></p><h4 id="参数计算公式"><a href="#参数计算公式" class="headerlink" title="参数计算公式"></a>参数计算公式</h4><p>$$<br>Period(s) &#x3D; ( ARR + 1 ) * ( PSC + 1 ) &#x2F; TIMx_CLK<br>$$</p><p>$$<br>Duty &#x3D; ( CRR &#x2F; ( ARR + 1 ) ) * 100%<br>$$</p><p><strong>假设预分频时钟CK_PSC为100MHz，产生周期为1ms，占空比为47.5%的PWM信号</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171451379.png" alt="image-20221231171451379"></p><h4 id="多通道输出"><a href="#多通道输出" class="headerlink" title="多通道输出"></a><strong>多通道输出</strong></h4><p>​定时器的每个通道都可以输出PWM信号，对于同一个定时器而言，它的多个通道共享同一个自动重载寄存器，因此可以输出占空比不同，但周期相同的PWM信号。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171712932.png" alt="image-20221231171712932"></p><h3 id="PWM输出的两种模式"><a href="#PWM输出的两种模式" class="headerlink" title="PWM输出的两种模式"></a><strong>PWM输出的两种模式</strong></h3><h4 id="PWM模式1"><a href="#PWM模式1" class="headerlink" title="PWM模式1"></a><strong>PWM模式1</strong></h4><p>​递增计数时，当TIMx_CNT（当前计数值）&lt;TIMx_CCR（捕获&#x2F;比较值）时，通道输出为有效电平，否则为无效电平。递减计数模式则刚好相反。</p><p><strong>PWM模式2</strong></p><p>​递增计数时，当TIMx_CNT（当前计数值）&lt;TIMx_CCR（捕获&#x2F;比较值）时，通道输出为无效电平，否则为有效电平。递减计数模式则刚好相反。</p><blockquote><p><strong>递增计数，高电平有效时：</strong></p><ul><li><p><strong>PWM1模式下的CCR用于控制高电平持续的时间</strong></p></li><li><p><strong>PWM2模式下的CCR用于控制低电平持续的时间</strong></p></li></ul><p><strong>总结：互补输出</strong></p></blockquote><h3 id="HAL库函数介绍"><a href="#HAL库函数介绍" class="headerlink" title="HAL库函数介绍"></a>HAL库函数介绍</h3><h4 id="定时器PWM输出启动函数：HAL-TIM-PWM-Start"><a href="#定时器PWM输出启动函数：HAL-TIM-PWM-Start" class="headerlink" title="定时器PWM输出启动函数：HAL_TIM_PWM_Start"></a><strong>定时器PWM输出启动函数：HAL_TIM_PWM_Start</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231172727456.png" alt="image-20221231172727456"></p><h4 id="定时器比较-x2F-捕获寄存器设置函数：-HAL-TIM-SET-COMPARE"><a href="#定时器比较-x2F-捕获寄存器设置函数：-HAL-TIM-SET-COMPARE" class="headerlink" title="定时器比较&#x2F;捕获寄存器设置函数：__HAL_TIM_SET_COMPARE"></a><strong>定时器比较&#x2F;捕获寄存器设置函数：__HAL_TIM_SET_COMPARE</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231172745910.png" alt="image-20221231172745910"></p><h3 id="输出PWM信号"><a href="#输出PWM信号" class="headerlink" title="输出PWM信号"></a>输出PWM信号</h3><blockquote><p>输出一个频率为2Khz的PWM信号 周期为 2Ms 占空比从0到100的PWM信号</p></blockquote><h4 id="PWM设置"><a href="#PWM设置" class="headerlink" title="PWM设置"></a>PWM设置</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231215916189.png" alt="image-20221231215916189"></p><p>配置频率与周期</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231220005448.png" alt="image-20221231220005448"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231220356202.png" alt="image-20221231220356202"></p><h4 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a><strong>程序编写</strong></h4><p>在主程序中 启用TIM2计时器通道一的PWM输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* USER CODE BEGIN 2 */</span>  </span><br><span class="line"><span class="comment">//启动定时器Tim2 通道1输出为2ms  pwm信号</span></span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim2,TIM_CHANNEL_1);</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><p>在while循环中改变占空比</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>;i+=<span class="number">200</span>) &#123;</span><br><span class="line">                 __HAL_TIM_SetCompare(&amp;htim2,TIM_CHANNEL_1,i);</span><br><span class="line">         HAL_Delay(<span class="number">4</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><p>下图为使用逻辑分析仪测得的波形</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231223311979.png" alt="image-20221231223311979"></p><h2 id="任务3-使用超声波模块测距"><a href="#任务3-使用超声波模块测距" class="headerlink" title="任务3 使用超声波模块测距"></a>任务3 使用超声波模块测距</h2><blockquote><p>使用超声波模块测距 距离小于5cm LED灯亮</p></blockquote><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>型号：HC-SR04</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291811453.png" alt="image-20220629181110841"></p><p>超声波测距模块是用来测量距离的一种产品，通过发送和收超声波，利用时间差和声音传播速度，计算出模块到前方障碍物的距离。</p><ul><li>怎么让它发送波</li></ul><p>​Trig ，给Trig端口至少10us的高电平</p><ul><li>怎么知道它开始发了</li></ul><p>​Echo信号，由低电平跳转到高电平，表示开始发送波</p><ul><li>怎么知道接收了返回波</li></ul><p>​Echo，由高电平跳转回低电平，表示波回来了</p><ul><li>怎么算时间</li></ul><p>​Echo引脚维持高电平的时间！</p><p>​波发出去的那一下，开始启动定时器</p><p>​波回来的拿一下，我们开始停止定时器，计算出中间经过多少时间</p><ul><li>怎么算距离</li></ul><p>​距离 &#x3D; 速度 （340m&#x2F;s）* 时间&#x2F;2</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126619.png" alt="image-20220629181318917"></p><h3 id="编写一个微秒的延迟程序"><a href="#编写一个微秒的延迟程序" class="headerlink" title="编写一个微秒的延迟程序"></a>编写一个微秒的延迟程序</h3><p>配置Tim2每计数一次 花费1微秒</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101121931318.png" alt="image-20230101121931318"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_Delay_us</span><span class="params">(<span class="type">uint16_t</span> n_us)</span>&#123;</span><br><span class="line">    <span class="comment">//使能定时器2计数</span></span><br><span class="line">    __HAL_TIM_ENABLE(&amp;htim2);</span><br><span class="line">    __HAL_TIM_SetCounter(&amp;htim2,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (__HAL_TIM_GetCounter(&amp;htim2)&lt; ((<span class="number">1</span>*n_us)<span class="number">-1</span>));</span><br><span class="line">    <span class="comment">//关闭定时器2计数</span></span><br><span class="line">    __HAL_TIM_DISABLE(&amp;htim2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br></pre></td></tr></table></figure><h3 id="配置GPIO口"><a href="#配置GPIO口" class="headerlink" title="配置GPIO口"></a>配置GPIO口</h3><p>Trig 需要发波 所以是output模式 连接到 PA0号GPIO口</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101122013745.png" alt="image-20230101122013745"></p><p>Echo 需要接受返回来的波 是Input模式 连接到 PA1号GPIO口</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101122039881.png" alt="image-20230101122039881"></p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">   <span class="comment">//1.先给Trig一个最少10us的高电平</span></span><br><span class="line">     HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_SET);<span class="comment">//拉高</span></span><br><span class="line">     TIM2_Delay_us(<span class="number">20</span>);</span><br><span class="line">     HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET);<span class="comment">//拉低</span></span><br><span class="line">     <span class="comment">//echo 由底电平转为高电平 表示发波完成 启动定时器计数</span></span><br><span class="line">     <span class="keyword">while</span> (HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_RESET);</span><br><span class="line">     HAL_TIM_Base_Start(&amp;htim2); <span class="comment">//开启定时器</span></span><br><span class="line">     <span class="comment">//由高电平转为低电平 表示波回来了 停止定时器计数</span></span><br><span class="line">     <span class="keyword">while</span> (HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_SET);</span><br><span class="line">     HAL_TIM_Base_Stop(&amp;htim2);<span class="comment">//关闭计时器</span></span><br><span class="line">     cnt = __HAL_TIM_GetCounter(&amp;htim2); <span class="comment">//获取计数值</span></span><br><span class="line">     distance = cnt *<span class="number">340</span>/<span class="number">2</span>*<span class="number">0.000001</span>*<span class="number">100</span>; <span class="comment">//单位 cm</span></span><br><span class="line">     <span class="keyword">if</span> (distance &lt; <span class="number">5</span>)&#123; <span class="comment">//判断如果小于5cm LED点亮 反之熄灭</span></span><br><span class="line">         </span><br><span class="line">         HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);</span><br><span class="line">     &#125;</span><br><span class="line">     HAL_Delay(<span class="number">100</span>);<span class="comment">//防止系统卡死</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> STM32定时器 </tag>
            
            <tag> STM32H750VBT6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记二</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/12/19/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/12/19/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-中断"><a href="#STM32-中断" class="headerlink" title="STM32 中断"></a>STM32 中断</h1><h2 id="上节补充："><a href="#上节补充：" class="headerlink" title="上节补充："></a>上节补充：</h2><h3 id="头文件、数据类型及函数声明的添加位置"><a href="#头文件、数据类型及函数声明的添加位置" class="headerlink" title="头文件、数据类型及函数声明的添加位置"></a><strong>头文件、数据类型及函数声明的添加位置</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225122205578.png" alt="image-20221225122205578"></p><h3 id="变量及函数的命名规则"><a href="#变量及函数的命名规则" class="headerlink" title="变量及函数的命名规则"></a><strong>变量及函数的命名规则</strong></h3><p><strong>见名知意：利用英文单词或者其缩写形式定义变量或函数，名称要体现变量的作用或函数的功能，切记不要使用拼音来命名。</strong></p><p><strong>2. 变量一般采用名词形式命名，多个单词间利用大小写字母作为间隔。全局变量的首字母大写，如KeyFlag；局部变量的首字母小写，如keyFlag，便于区分全局变量和局部变量。</strong></p><p><strong>3. 函数一般采用动宾结构命名，首字母大写，也是利用大小写字母作为间隔，如GetValue等。</strong></p><p><strong>4. 宏定义和用户自定义数据类型全部采用大写字母，利用下划线作为间隔，如KEY_STATE等。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a>什么是中断</h3><p>​STM32中断是一种电子设备中的功能，它允许设备在执行主程序时暂停执行，以便处理来自外部设备或系统事件的信息。中断是通过向设备发送特殊的信号（称为中断请求）来触发的，该信号会使设备暂停当前的执行流程，转而执行一段特定的代码，称为中断服务程序（ISR）。在中断服务程序执行完毕后，设备会返回到原来的执行流程。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219205550471.png" alt="image-20221219205550471"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219205623688.png" alt="image-20221219205623688"></p><p>在STM32H750芯片中，你可以使用以下中断源：</p><ul><li>外部中断：外部中断可以由芯片的外部中断线触发，支持软件触发、硬件触发和唤醒功能。</li><li>定时器中断：STM32H750芯片支持多种定时器，可以用于产生周期性中断。</li><li>串口中断：串口中断可以用于响应串口接收到的数据。</li><li>ADC中断：ADC中断可以用于响应ADC转换完成的信息。</li></ul><p>具体的步骤包括：</p><ol><li>配置中断源：在芯片的外设模块（如定时器、串口）中启用中断功能。</li><li>定义中断服务程序：编写中断服务程序，该程序在中断触发时会被执行。</li><li>配置中断优先级：设置中断优先级，以便在多个中断同时发生时能够正确处理。</li><li>启用中断：在主程序中启用中断功能，使得芯片能够响应中断请求。</li><li>开启总中断：在主程序的最后开启总中断，使得芯片开始响应中断请求。</li></ol><h3 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h3><p>​中断优先级是指在微控制器中，在多个中断之间进行调度时，规定哪个中断优先级更高。当微控制器处理多个中断时，优先级较高的中断会优先被处理，优先级较低的中断则要等待优先级较高的中断处理完毕之后才能被处理。</p><p>​在微控制器中，中断优先级可以分为若干个级别，每个级别都有一个对应的数值。通常，数值越小，优先级越高。例如，在 STM32H750 微控制器中，中断优先级可以分为 0 到 15 共 16 个级别，数值为 0 的优先级最高，数值为 15 的优先级最低。</p><hr><h2 id="HAL库的中断封装"><a href="#HAL库的中断封装" class="headerlink" title="HAL库的中断封装"></a>HAL库的中断封装</h2><h3 id="HAL库的中断封装-1"><a href="#HAL库的中断封装-1" class="headerlink" title="HAL库的中断封装"></a>HAL库的中断封装</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220200649608.png" alt="image-20221220200649608"></p><h3 id="HAL库对中断的封装处理"><a href="#HAL库对中断的封装处理" class="headerlink" title="HAL库对中断的封装处理"></a>HAL库对中断的封装处理</h3><p>一：统一规定处理各个外设的中断服务程序HAL_PPP_IRQHandler</p><blockquote><p>PPP代表外设名称</p></blockquote><p>二：在中断服务程序HAL_PPP_IRQHandler完成了中断标志的判断和清除</p><p>三：将中断中需要执行的操作以回调函数的形式提供给用户</p><blockquote><p>由外设初始化、中断、处 理完成&#x2F;出错触发的函数</p></blockquote><h3 id="由CubeMX生成的工程中与中断相关的编程文件"><a href="#由CubeMX生成的工程中与中断相关的编程文件" class="headerlink" title="由CubeMX生成的工程中与中断相关的编程文件"></a>由CubeMX生成的工程中与中断相关的编程文件</h3><h4 id="启动文件：-startup-stm32fxxx-或-startup-stm32hxxx"><a href="#启动文件：-startup-stm32fxxx-或-startup-stm32hxxx" class="headerlink" title="启动文件：  startup_stm32fxxx 或 startup_stm32hxxx"></a>启动文件：  startup_stm32fxxx 或 startup_stm32hxxx</h4><ol><li>在该文件中，预先为每个中断编写了一个中断服务程序，只是这些中断服务程序都是死循环，目的只是初始化中断向量表；</li><li>中断服务程序的属性定义为“weak”。weak属性的函数表示：如果该函数没有在其他文件中定义，则使用该函数；如果用户在其他地方定义<br>了该函数，则使用用户定义的函数</li></ol><h4 id="中断服务程序文件：stm32fxxx-it-c-或-startup-stm32hxxx-it-c"><a href="#中断服务程序文件：stm32fxxx-it-c-或-startup-stm32hxxx-it-c" class="headerlink" title="中断服务程序文件：stm32fxxx_it.c  或 startup_stm32hxxx_it.c"></a>中断服务程序文件：stm32fxxx_it.c  或 startup_stm32hxxx_it.c</h4><ol><li><p>用于存放各个中断的中断服务程序；</p></li><li><p>在使用CubeMX软件进行初始化配置时，如果使能了某一个外设的中断功能，那么在生成代码时，相对应的外设中断服务程序HAL_PPP_IRQHandler就会自动添加到该文件中，用户只需要在该函数中添加相应的中断处理代码即可。</p></li></ol><h4 id="外部中断所对应的中断服务程序"><a href="#外部中断所对应的中断服务程序" class="headerlink" title="外部中断所对应的中断服务程序"></a><strong>外部中断所对应的中断服务程序</strong></h4><table><thead><tr><th align="center">外部中断线</th><th align="center">中断服务程序的函数名称</th></tr></thead><tbody><tr><td align="center">外部中断线1(EXTI Line 1)</td><td align="center">EXTI1_IRQHandler</td></tr><tr><td align="center">外部中断线2(EXTI Line 2)</td><td align="center">EXTI2_IRQHandler</td></tr><tr><td align="center">外部中断线3(EXTI Line 3)</td><td align="center">EXTI3_IRQHandler</td></tr><tr><td align="center">外部中断线4(EXTI Line 4)</td><td align="center">EXTI4_IRQHandler</td></tr><tr><td align="center">外部中断线5~9(EXTI Line[9:5] )</td><td align="center">EXTI9_5_IRQHandler</td></tr><tr><td align="center">外部中断线10~ 15(EXTI Line[15:10] )</td><td align="center">EXTI15_10_IRQHandler</td></tr></tbody></table><h4 id="stm32h7xx-it-c文件中的外部中断服务程序"><a href="#stm32h7xx-it-c文件中的外部中断服务程序" class="headerlink" title="stm32h7xx_it.c文件中的外部中断服务程序"></a><strong>stm32h7xx_it.c文件中的外部中断服务程序</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220201510816.png" alt="image-20221220201510816"></p><h4 id="HAL库的外部中断处理流程"><a href="#HAL库的外部中断处理流程" class="headerlink" title="HAL库的外部中断处理流程"></a><strong>HAL库的外部中断处理流程</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202231156.png" alt="image-20221220202231156"></p><h4 id="引脚初始化数据类型"><a href="#引脚初始化数据类型" class="headerlink" title="引脚初始化数据类型"></a><strong>引脚初始化数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202435635.png" alt="image-20221220202435635"></p><h5 id="成员变量Mode的取值范围"><a href="#成员变量Mode的取值范围" class="headerlink" title="成员变量Mode的取值范围"></a>成员变量Mode的取值范围</h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GPIO_MODE_IT_RISING</td><td align="center">上升沿触发</td></tr><tr><td align="center">GPIO_MODE_IT_FALLING</td><td align="center">下降沿触发</td></tr><tr><td align="center">GPIO_MODE_IT_RISING_FALLING</td><td align="center">双边沿触发</td></tr></tbody></table><h4 id="外部中断通用处理函"><a href="#外部中断通用处理函" class="headerlink" title="外部中断通用处理函"></a>外部中断通用处理函</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202701381.png" alt="image-20221220202701381"></p><h4 id="外部中断回调函数"><a href="#外部中断回调函数" class="headerlink" title="外部中断回调函数"></a>外部中断回调函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202742739.png" alt="image-20221220202742739"></p><h2 id="任务1：按键中断的方式-控制LED"><a href="#任务1：按键中断的方式-控制LED" class="headerlink" title="任务1：按键中断的方式 控制LED"></a>任务1：按键中断的方式 控制LED</h2><h3 id="配置GPIO口"><a href="#配置GPIO口" class="headerlink" title="配置GPIO口"></a>配置GPIO口</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115738703.png" alt="image-20221225115738703"></p><p>电路图</p><p>PC13 为按键有下拉电阻</p><p>PE3 为输出的LED灯</p><p>设置输出LED</p><blockquote><p>设置为 output </p><p>用户标签为LED</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115837063.png" alt="image-20221225115837063"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120304510.png" alt="image-20221225120304510"></p><p>设置按键</p><blockquote><p>选择GPIO_EXTI13</p><p>引脚为外部中断 功能，与外部中 断线EXTI13连接</p><p>用户标签为KEY</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115935019.png" alt="image-20221225115935019"></p><p>在出现的引脚列表中单 击需要配置的引脚PC13</p><blockquote><p>我的PC13 当按下为高电平 松开为低电平 所以我设置为上升沿触发</p></blockquote><p>GPIO mode 为触发模式</p><p>常用的 就是前三个 分别是：</p><p>依次是 上升沿触发 下降沿触发 双边沿触发（上升下降触发）</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120903522.png" alt="image-20221225120903522"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120648026.png" alt="image-20221225120648026"></p><h3 id="使能中断"><a href="#使能中断" class="headerlink" title="使能中断"></a>使能中断</h3><p>还是在刚才的窗口中 点击NVIC </p><p>使能引脚对应的外部中断线EXTI Line[15:10]</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225121244284.png" alt="image-20221225121244284"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225121219230.png"></p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><ol><li>编写回调函数</li></ol><blockquote><p>尽量将直接写的代码函数等写在 code Begin下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == KEY_Pin)&#123;</span><br><span class="line">        HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="任务2：改变指示灯闪烁频率"><a href="#任务2：改变指示灯闪烁频率" class="headerlink" title="任务2：改变指示灯闪烁频率"></a>任务2：改变指示灯闪烁频率</h2><h3 id="声明表示闪烁速度的变量"><a href="#声明表示闪烁速度的变量" class="headerlink" title="声明表示闪烁速度的变量"></a>声明表示闪烁速度的变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> Speed = <span class="number">0</span> ; <span class="comment">//声明表示速度的变量</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h3 id="在主函数while循环中-判断Speed的速度"><a href="#在主函数while循环中-判断Speed的速度" class="headerlink" title="在主函数while循环中 判断Speed的速度"></a>在主函数while循环中 判断Speed的速度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    <span class="keyword">switch</span> (Speed) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//当速度为 0  LED每隔100ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//当速度为 1  LED每隔500ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//当速度为 2  LED每隔1000ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><p>在中断的回调函数中修改Speed变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == KEY_Pin)&#123;</span><br><span class="line">        Speed++; <span class="comment">//修改Speed 的值</span></span><br><span class="line">        <span class="keyword">if</span>(Speed == <span class="number">3</span>) Speed =<span class="number">0</span>; <span class="comment">//Speed 的取值范围为0 ~2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记一</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/12/15/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/12/15/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Stm32-单片机学习笔记"><a href="#Stm32-单片机学习笔记" class="headerlink" title="Stm32 单片机学习笔记"></a>Stm32 单片机学习笔记</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><table><thead><tr><th align="center">使用芯片型号</th><th align="center">开发环境</th><th align="center">开发方式</th></tr></thead><tbody><tr><td align="center">STM32H750VBT6</td><td align="center">CubaMX+CLion</td><td align="center">HAL库</td></tr></tbody></table><p>CubaMX的开发环境配置 可以参考这篇文章</p><blockquote><p><a href="http://www.aubuty.top/2022/08/25/Clion-STM32cubeMX-%E6%90%AD%E5%BB%BA%E8%88%92%E9%80%82%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/">Clion-STM32cubeMX-搭建舒适的STM32开发环境</a></p></blockquote><p>​大家最好要有一些单片机的基础知识比如说51单片机，C语言以及一些数电模电的知识，这样学起来会舒服很多哦！ </p><p>在这里说一下，为什么不讲标准库： </p><p>​首先的话，目前STM32开发方式有以下几种，我整理了一张表格</p><table><thead><tr><th align="center">开发方式</th><th>优点</th><th>缺点</th><th>建议</th></tr></thead><tbody><tr><td align="center">寄存器</td><td>代码效率高</td><td>学习难度大，移植性最低</td><td>了解</td></tr><tr><td align="center">标准库</td><td>开发流程便简单，开发周期缩短</td><td>代码执行效率稍低，移植性较低</td><td>熟悉</td></tr><tr><td align="center">HAL库</td><td>上手简单，移植方便</td><td>执行效率稍低</td><td>掌握</td></tr></tbody></table><p>​STM32已经应用的非常广泛了，并且在工业开发也具有挺高的地位了，所以我们只需要 学会HAL库就可以完成绝大多数的开发了，并且标准库，早在几年前就不再更新维护了，标准库的话，学习有余力的话可以学学，技多不压身嘛！</p><h3 id="STM32的简介"><a href="#STM32的简介" class="headerlink" title="STM32的简介"></a><strong>STM32的简介</strong></h3><h4 id="ARM与STM32的关系"><a href="#ARM与STM32的关系" class="headerlink" title="ARM与STM32的关系"></a><strong>ARM</strong>与<strong>STM32</strong>的关系</h4><p>ARM：Advanced RISC Machines(高级精简指令集机器)</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20220916173832375.png" alt="image-20220916173832375"></p><p>以上是百度百科的简单介绍，可以看出arm在半导体行业，已经是主导地位，全球超过 95%的智能设备都是采用的ARM架构，其公司的发展史也很有意思，小伙伴们感兴趣可以了解一下</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20220916175014412.png" alt="image-20220916175014412"></p><blockquote><p>这个是STM32 的命名规则 </p></blockquote><h4 id="STM32H750VBT6简介"><a href="#STM32H750VBT6简介" class="headerlink" title="STM32H750VBT6简介"></a>STM32H750VBT6简介</h4><table><thead><tr><th align="center">项目</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">内核</td><td align="center">Cortex—M7</td><td align="center"></td></tr><tr><td align="center">Falsh</td><td align="center">128KB</td><td align="center"></td></tr><tr><td align="center">ROM</td><td align="center">1024KB</td><td align="center"></td></tr><tr><td align="center">GPIO</td><td align="center">80个</td><td align="center">PA0<del>15、PB0</del>15、PC0<del>15、PD0</del>15、PE0~15</td></tr><tr><td align="center">ADC</td><td align="center">3个</td><td align="center">五条内部专用通道<br/>– 内部参考电压 (VREFINT)，连接到 ADC3<br/>– 内部温度传感器 (VSENSE)，连接到 ADC3<br/>– VBAT 监测通道 (VBAT&#x2F;4)，连接到 ADC3 <br/>– 内部 DAC 通道 1 和通道 2，连接到 ADC2</td></tr><tr><td align="center">DAC</td><td align="center">2个</td><td align="center">12 位模式</td></tr><tr><td align="center">定时器</td><td align="center">高级定时器<code>2个</code></td><td align="center">TIM1-TIM8</td></tr><tr><td align="center"></td><td align="center">通用定时器<code>10个</code></td><td align="center">TIM2-TIM3-TIM4-TIM5-TIM12-TIM13-TIM14-TIM15-TIM16-TIM17</td></tr><tr><td align="center"></td><td align="center">基本定时器<code>2个</code></td><td align="center">TIM6-TIM7</td></tr><tr><td align="center"></td><td align="center">看门狗定时器<code>2个</code></td><td align="center">系统窗口看门狗 (<code>WWDG</code>)，独立看门狗 (<code>IWDG</code>)</td></tr><tr><td align="center"></td><td align="center">滴答定时器</td><td align="center"></td></tr><tr><td align="center">工作电压</td><td align="center">工作电压范围 1.62V~3.6V</td><td align="center"></td></tr><tr><td align="center">通信端口</td><td align="center">CANbus，EBI&#x2F;EMI，以太网，I²C，IrDA，LINbus，MDIO，MMC&#x2F;SD&#x2F;SDIO，QSPI，SAI，SPDIF，SPI，SWPMI，UART&#x2F;USART，USB OTG</td><td align="center">CAN<code>*2</code><br />I2C<code>*4</code><br />SPI<code>*5</code><br />UART<code>*4</code><br />USART<code>*4</code><br />OYG<code>*2</code><br /></td></tr><tr><td align="center">系统时钟</td><td align="center">HSE（高速外部振荡器）时钟</td><td align="center">4 MHz 到 48 MHz</td></tr></tbody></table><hr><blockquote><p>我开发板使用的外部晶振为<code>25MHz</code></p></blockquote><p>下图为我开发板的原理图</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/STM32H7xx%20SchDoc%20V11_00.png" alt="STM32H7xx SchDoc V11_00"></p><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><h4 id="什么是GPIO？"><a href="#什么是GPIO？" class="headerlink" title="什么是GPIO？"></a>什么是GPIO？</h4><blockquote><p><strong>GPIO是通用输入&#x2F;输出（General Purpose I&#x2F;O）的简称，主要用</strong></p><p><strong>于工业现场需要用到数字量输入&#x2F;输出的场合，例如：</strong></p></blockquote><ul><li><p><strong>输出功能：</strong>继电器、 LED、蜂鸣器等的控制</p></li><li><p><strong>输入功能：</strong>传感器状态、高低电平等信息的读取</p></li><li><p><strong>复用功能：</strong>片内外设的对外接口**</p></li><li><p><strong>时序模拟：</strong>模拟SPI、I2C和UART等常用接口的时序</p></li></ul><h4 id="电路结构"><a href="#电路结构" class="headerlink" title="电路结构"></a>电路结构</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215203902703.png" alt="image-20221215203902703"><br>$$</p><p>$$</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221216100541944.png" alt="image-20221216100541944"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215205623228.png" alt="image-20221215205623228"></p><h4 id="GPIO工作模式的用法总结"><a href="#GPIO工作模式的用法总结" class="headerlink" title="GPIO工作模式的用法总结"></a><strong>GPIO工作模式的用法总结</strong></h4><h5 id="1-输入模式"><a href="#1-输入模式" class="headerlink" title="1.输入模式"></a>1.<strong>输入模式</strong></h5><p>  <strong>浮空输入：按键识别</strong></p><p>  <strong>上拉输入：IO内部上拉电阻输入</strong></p><p>  <strong>下拉输入：IO内部下拉电阻输入</strong></p><h5 id="2-模拟模式"><a href="#2-模拟模式" class="headerlink" title="2.模拟模式"></a>2.<strong>模拟模式</strong></h5><p>  <strong>作为片内模拟外设的对外引脚</strong></p><p>  <strong>单纯作为低功耗使用</strong></p><hr><ul><li>输出模式<ul><li>推挽输出：可以输出高&#x2F;电平，主要用于连接数字器件，如指示灯和继电器等模块；</li><li>开漏输出：只能输出低电平，适合于电流型驱动，也可作为电平转换。</li></ul></li><li>复用模式<ul><li>复用推挽：片内外设功能（URAT的TX，RX，SPI的MOSI，MISO,SCK，SS ）；</li><li>复用开漏：片内外设功能（ I2C的SCL，SDA ）。</li></ul></li></ul><h4 id="引脚初始化数据类型"><a href="#引脚初始化数据类型" class="headerlink" title="引脚初始化数据类型"></a><strong>引脚初始化数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215210422481.png" alt="image-20221215210422481"></p><h5 id="成员变量Pin的取值范围"><a href="#成员变量Pin的取值范围" class="headerlink" title="成员变量Pin的取值范围"></a><strong>成员变量Pin的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_PIN_0</strong></td><td align="center"><strong>选择该端口的引脚0</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_1</strong></td><td align="center"><strong>选择该端口的引脚1</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_2</strong></td><td align="center"><strong>选择该端口的引脚2</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_3</strong></td><td align="center"><strong>选择该端口的引脚3</strong></td></tr><tr><td align="center">***</td><td align="center">***</td></tr><tr><td align="center"><strong>GPIO_PIN_15</strong></td><td align="center"><strong>选择该端口的引脚15</strong></td></tr><tr><td align="center">**GPIO_PIN_All **</td><td align="center"><strong>选择该端口所有引脚</strong></td></tr></tbody></table><h5 id="成员变量Mode的取值范围"><a href="#成员变量Mode的取值范围" class="headerlink" title="成员变量Mode的取值范围"></a><strong>成员变量Mode的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GPIO_MODE_INPUT</td><td align="center">浮空输入模式</td></tr><tr><td align="center">GPIO_MODE_OUTPUT_PP</td><td align="center">推挽输出模式</td></tr><tr><td align="center">GPIO_MODE_OUTPUT_OD</td><td align="center">开漏输出模式</td></tr><tr><td align="center">GPIO_MODE_AF_PP</td><td align="center">复用功能下的推挽模式</td></tr><tr><td align="center">GPIO_MODE_AF_OD</td><td align="center">复用功能下的开漏模式</td></tr><tr><td align="center">GPIO_MODE_ANALOG</td><td align="center">模拟模式</td></tr></tbody></table><p><strong>成员变量Pull的取值范围</strong></p><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_NOPULL</strong></td><td align="center"><strong>没有上拉或下拉电阻激活</strong></td></tr><tr><td align="center"><strong>GPIO_PULLUP</strong></td><td align="center"><strong>上拉电阻激活</strong></td></tr><tr><td align="center"><strong>GPIO_PULLDOWN</strong></td><td align="center"><strong>下拉电阻激活</strong></td></tr></tbody></table><h5 id="成员变量Speed的取值范围"><a href="#成员变量Speed的取值范围" class="headerlink" title="成员变量Speed的取值范围"></a><strong>成员变量Speed的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_SPEED_FREQ_LOW</strong></td><td align="center"><strong>引脚输出速度2MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_MEDIUM</strong></td><td align="center"><strong>引脚输出速度12.5MHz～50MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_HIGH</strong></td><td align="center"><strong>引脚输出速度25MHz～100MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_VERY_HIGH</strong></td><td align="center"><strong>引脚输出速度50MHz～200MHz</strong></td></tr></tbody></table><p><strong>成员变量Alternate的取值范围</strong></p><ul><li>Alternate表示引脚的复用功能；</li><li>由于不同型号的STM32微控制器片内集成的外设不同，因此该成员变量的取值范围由芯片型号决定。</li><li>以STM32F4系列芯片为例，通过查阅stm32H7xx_hal_gpio_ex.h文件可以了解Alternate的取值范围；</li><li>该成员变量的取值一般通过CubeMX软件分配，不需要用户手动设置；</li></ul><h4 id="引脚电平状态数据类型"><a href="#引脚电平状态数据类型" class="headerlink" title="引脚电平状态数据类型"></a><strong>引脚电平状态数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215211612934.png" alt="image-20221215211612934"></p><blockquote><p><strong>使用枚举类型的好处：提高了程序的可读性，并通过限定变量</strong> <strong>的取值范围，来确保变量的合法性</strong></p></blockquote><h4 id="使用HAL库的GPIO引脚初始化步骤"><a href="#使用HAL库的GPIO引脚初始化步骤" class="headerlink" title="使用HAL库的GPIO引脚初始化步骤"></a>使用HAL库的GPIO引脚初始化步骤</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213012641.png" alt="image-20221215213012641"></p><h4 id="GPIO外设接口函数的概述"><a href="#GPIO外设接口函数的概述" class="headerlink" title="GPIO外设接口函数的概述"></a><strong>GPIO外设接口函数的概述</strong></h4><h5 id="初始化函数"><a href="#初始化函数" class="headerlink" title="初始化函数"></a><strong>初始化函数</strong></h5><ul><li><h5 id="HAL-GPIO-Init-：用于完成引脚的初始化；"><a href="#HAL-GPIO-Init-：用于完成引脚的初始化；" class="headerlink" title="HAL_GPIO_Init ：用于完成引脚的初始化；"></a><code>HAL_GPIO_Init ：用于完成引脚的初始化；</code></h5></li></ul><p>​<img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213612676.png" alt="image-20221215213612676"></p><ul><li><h6 id="HAL-GPIO-DeInit-：用于复位引脚到初始状态；"><a href="#HAL-GPIO-DeInit-：用于复位引脚到初始状态；" class="headerlink" title=" HAL_GPIO_DeInit ：用于复位引脚到初始状态；"></a><code> HAL_GPIO_DeInit ：用于复位引脚到初始状态；</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213642893.png" alt="image-20221215213642893"></p><h5 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a><strong>控制函数</strong></h5><ul><li><h6 id="HAL-GPIO-ReadPin-：用于读取引脚电平状态"><a href="#HAL-GPIO-ReadPin-：用于读取引脚电平状态" class="headerlink" title="HAL_GPIO_ReadPin ：用于读取引脚电平状态"></a><code>HAL_GPIO_ReadPin ：用于读取引脚电平状态</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213831597.png" alt="image-20221215213831597"></p><ul><li><h6 id="HAL-GPIO-WritePin-：用于设置引脚电平状态"><a href="#HAL-GPIO-WritePin-：用于设置引脚电平状态" class="headerlink" title="HAL_GPIO_WritePin ：用于设置引脚电平状态"></a><strong><code>HAL_GPIO_WritePin ：用于设置引脚电平状态</code></strong></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213900821.png" alt="image-20221215213900821"></p><ul><li><h6 id="HAL-GPIO-TogglePin-：用于翻转引脚电平状态"><a href="#HAL-GPIO-TogglePin-：用于翻转引脚电平状态" class="headerlink" title="HAL_GPIO_TogglePin ：用于翻转引脚电平状态"></a><code>HAL_GPIO_TogglePin ：用于翻转引脚电平状态</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213911153.png" alt="image-20221215213911153"></p><h5 id="配置函数"><a href="#配置函数" class="headerlink" title="配置函数"></a><strong>配置函数</strong></h5><ul><li><h6 id="HAL-GPIO-LockPin：用于锁定引脚的配置"><a href="#HAL-GPIO-LockPin：用于锁定引脚的配置" class="headerlink" title="HAL_GPIO_LockPin：用于锁定引脚的配置"></a><code>HAL_GPIO_LockPin：用于锁定引脚的配置</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213923020.png" alt="image-20221215213923020"></p><h3 id="任务1：点亮LED灯每隔500ms闪烁"><a href="#任务1：点亮LED灯每隔500ms闪烁" class="headerlink" title="任务1：点亮LED灯每隔500ms闪烁"></a>任务1：点亮LED灯每隔500ms闪烁</h3><blockquote><p>Clion 配置 如何生成STM32工程 可以看之前的文章 </p></blockquote><h4 id="配置-时钟频率"><a href="#配置-时钟频率" class="headerlink" title="配置 时钟频率"></a>配置 时钟频率</h4><p>​因为我使用的是STM32H750VBT6 他的工作频率是480Mhz</p><h4 id="配置引脚"><a href="#配置引脚" class="headerlink" title="配置引脚"></a><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171132276.png" alt="image-20221219171132276">配置引脚</h4><p>观察原理图 发现LED在PE3上</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171256573.png" alt="image-20221219171256573"></p><p>点击PE3 出现以下对话框 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171344974.png" alt="image-20221219171344974"></p><p>选择 GPIO_Output 引脚变为绿色 </p><blockquote><p>在 Systeam Core -&gt; GPIO 对引脚详细配置 </p><p>如默认电平 ， 上拉下拉电阻 ，推挽等，以及用户自定义名字</p><p>用户自定义名字 方便后续代码中使用 （起名 尽量 见名知意 ）如Power_Led等 </p><p>我其他的所有参数均为默认 用户自定义名字为LED</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219191209272.png" alt="image-20221219191209272"></p><h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><ul><li>看之前的文章</li></ul><blockquote><p>注意在生成的时候 在Toolchain&#x2F;IDE 选择SW4STM32 clion 才可以打开 </p><p>如果使用的keil 需要选择MDK-ARM </p></blockquote><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">      HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); <span class="comment">//电平反转</span></span><br><span class="line">      HAL_Delay(<span class="number">500</span>);<span class="comment">//延迟500ms</span></span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为我之前 在CubaMX 配置的时候 LED 的名字被配置成了LED 所以 LED_Pin 就是指代的 PE13</p><p>代码 写在</p><p>&#x2F;* USER CODE BEGIN 3 *&#x2F; 到</p><p>&#x2F;* USER CODE END 3 *&#x2F;下</p><p>防止在使用CubaMX 生成代码的时候 你自己写的代码被删除</p></blockquote><p>以上的程序 实现的效果是LED小灯每隔500ms 亮灭交替</p><hr><h3 id="任务2：-按键控制小灯（轮询法）"><a href="#任务2：-按键控制小灯（轮询法）" class="headerlink" title="任务2： 按键控制小灯（轮询法）"></a>任务2： 按键控制小灯（轮询法）</h3><p>在 while中 读取按钮的状态 </p><h4 id="引脚配置"><a href="#引脚配置" class="headerlink" title="引脚配置"></a>引脚配置</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219192737821.png" alt="image-20221219192737821"></p><blockquote><p>可以看出 原理图中通过一个电阻与地GND相连，固定在低电平。在IO口为输入模式且为下拉电阻时，IO口的常态为低电平。</p><p>所以 在设置引脚的时候需要设置为下拉输入</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219193046799.png" alt="image-20221219193046799"></p><p>选择为 GPIO_Input </p><p>在 Systeam Core -&gt; GPIO -&gt; PC13 -&gt; GPIO Pull-up&#x2F;Pull-down 选择 Pull-down </p><p>User Label 设置为 Key 这个 可以自定义 </p><p>下图就是设置好的</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219193342362.png" alt="image-20221219193342362"></p><h4 id="生成工程-编写代码"><a href="#生成工程-编写代码" class="headerlink" title="生成工程 编写代码"></a>生成工程 编写代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">      <span class="keyword">if</span>(HAL_GPIO_ReadPin(Key_GPIO_Port,Key_Pin) == GPIO_PIN_SET)&#123; <span class="comment">//判断是否为 高电平 如果为高电平 则被按下</span></span><br><span class="line">          HAL_Delay(<span class="number">20</span>); <span class="comment">//去抖动</span></span><br><span class="line">          <span class="keyword">if</span>(HAL_GPIO_ReadPin(Key_GPIO_Port,Key_Pin) == GPIO_PIN_SET)&#123; <span class="comment">//去抖动后 如果还为高电平 则就是被按下 反转LED的状态</span></span><br><span class="line">              HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">              <span class="keyword">while</span>(HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin) != GPIO_PIN_SET);<span class="comment">//检查钥匙是否松开</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      HAL_Delay(<span class="number">100</span>);<span class="comment">//防止扫描过快 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h3 id="任务3：利用状态机控制按键"><a href="#任务3：利用状态机控制按键" class="headerlink" title="任务3：利用状态机控制按键"></a>任务3：<strong>利用状态机控制按键</strong></h3><h4 id="状态机设计思想"><a href="#状态机设计思想" class="headerlink" title="状态机设计思想"></a><strong>状态机设计思想</strong></h4><p>状态机是一个抽象概念，表示把一个过程抽象为若干个状态之间的切换，这些状态之间<br>存在一定的联系。状态机的设计主要包括4个要素：</p><ol><li>现态：是指当前所处的状态。</li><li>条件：当一个条件满足，将会触发一个动作，或者执行一次状态的迁移。</li><li>动作：表示条件满足后执行动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作要素不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。</li><li>次态：表示条件满足后要迁往的新状态。</li></ol><h4 id="按键的状态机设计"><a href="#按键的状态机设计" class="headerlink" title="按键的状态机设计"></a><strong>按键的状态机设计</strong></h4><p><strong>一：状态定义：根据按键的波形图可以设计三个按键状态</strong></p><ul><li><strong>按键检测状态：表示按键没有按下的状态</strong></li><li><strong>按键确认状态：表示按键已经按下的状态</strong></li><li><strong>按键释放状态：表示等待按键释放的状态</strong></li></ul><p><strong>二：状态转换条件（假设低电平表示按键按下）</strong></p><ul><li><strong>当处于按键检测状态时，如果数据线为低，则转换到按键确认状态，否则保持当前状态。</strong></li><li><strong>当处于按键确认状态时，如果数据线为低，则转换到按键释放状态，并设置按键有效标志；如果数据线为高，则表示可能出现了干扰信号，转换到按键检测状态。</strong></li><li><strong>当处于按键释放状态时，如果数据线为高，则转换到按键检测状态，表示完成了本次按键检测,否则保持当前状态。</strong></li></ul><h4 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123004244.png" alt="image-20221225123004244"></p><blockquote><p>假设采用上拉式按键，低电平表示按键按下，高电平表示按键释放</p></blockquote><h4 id="按键的状态机编程实现"><a href="#按键的状态机编程实现" class="headerlink" title="按键的状态机编程实现"></a><strong>按键的状态机编程实现</strong></h4><p><strong>利用Switch Case多分支语句，通过检测按键引脚的电平来实现按键状态的转换；</strong></p><p><strong>利用定时器产生10ms的定时中断，在定时中断服务程序中调用按键状态转换函数。每次执行的间隔10ms，可以有效的消除按键抖动，并提高CPU的利用率。</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123223315.png" alt="image-20221225123223315"></p><h5 id="使能定时器中断"><a href="#使能定时器中断" class="headerlink" title="使能定时器中断"></a>使能定时器中断</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123247174.png" alt="image-20221225123247174"></p><h5 id="定义按键状态数据类型"><a href="#定义按键状态数据类型" class="headerlink" title="定义按键状态数据类型"></a><strong>定义按键状态数据类型</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123321988.png" alt="image-20221225123321988"></p><h5 id="主程序代码"><a href="#主程序代码" class="headerlink" title="主程序代码"></a><strong>主程序代码</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123344324.png" alt="image-20221225123344324"></p><h5 id="定时中断回调函数"><a href="#定时中断回调函数" class="headerlink" title="定时中断回调函数"></a><strong>定时中断回调函数</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123545532.png" alt="image-20221225123545532"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123616224.png" alt="image-20221225123616224"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123627061.png"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion + STM32cubeMX 搭建舒适的STM32开发环境</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/08/25/Clion-STM32cubeMX-%E6%90%AD%E5%BB%BA%E8%88%92%E9%80%82%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/08/25/Clion-STM32cubeMX-%E6%90%AD%E5%BB%BA%E8%88%92%E9%80%82%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Clion-STM32cubeMX搭建stm32开发环境"><a href="#Clion-STM32cubeMX搭建stm32开发环境" class="headerlink" title="Clion+STM32cubeMX搭建stm32开发环境"></a>Clion+STM32cubeMX搭建stm32开发环境</h1><p><strong>本篇介绍的内容也是以基于<code>HAL库</code>开发为准的</strong> </p><p><strong>环境及所需工具</strong></p><p><strong>软件环境:</strong></p><ul><li>Windows 10</li><li>STM32CubeMX</li><li>Clion-2019</li><li>MinGW</li><li>OpenOCD</li><li>arm-none-eabi-gcc</li></ul><p><strong>硬件环境：</strong></p><ul><li>STM32F103C6T6 或其他 STM32 开发板</li><li>ST-Link V2 下载器</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220825154215.jpg" alt="微信图片_20220825154215"></p><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a><strong>工具安装</strong></h2><h3 id="STM32CubeMX"><a href="#STM32CubeMX" class="headerlink" title="STM32CubeMX"></a><strong>STM32CubeMX</strong></h3><p>这个正常去官网下载的安装就行了</p><blockquote><p>该软件用于配置时钟频率 gpio初始化等</p></blockquote><blockquote><p>版本号 &lt;&#x3D; 6.3.0 版本过高无法生成 后续文件</p></blockquote><p><a href="https://www.st.com/en/development-tools/stm32cubemx.html">STM32CubeMX - STM32Cube initialization code generator - STMicroelectronics</a></p><p><strong>OpenOCD</strong></p><h3 id="OpenOCD"><a href="#OpenOCD" class="headerlink" title="OpenOCD"></a><strong>OpenOCD</strong></h3><p>OpenOCD是用于对STM32进行下载仿真的工具，是一个开源软件包，Windows版本下从<a href="https://link.zhihu.com/?target=http://gnutoolchains.com/arm-eabi/openocd/">这里</a>下载，下载好解压到一个目录就行，后面会在Clion中链接这个目录：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825154716119.png" alt="image-20220825154716119"></p><p><strong>MinGW</strong></p><p>Clion需要使用MinGW环境来配置工具链，安装方法如下：<br>首先去MinGW主页下载最新版本的MinGW： <a href="https://link.zhihu.com/?target=https://osdn.net/projects/mingw/releases/">Minimalist GNU for Windows</a>，这是MinGW的安装器：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/v2-1cd72192eaa83cba9becb6abd0b727af_r.jpg" alt="preview"></p><p>打开exe进行安装，修改安装目录（最好不能有空格），安装完成后进行组件下载：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155527418.png" alt="image-20220825155527418"></p><p>如上图中所示，把<code>Basic Setup</code>里面的组件全部勾选（也可也去掉不需要的语言编译器比如Objective-C）。<br>配置系统的环境变量，在Path环境变量里面添加一条，指向MinGW的bin文件夹：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155604634.png" alt="image-20220825155604634"></p><p>重启电脑，然后在命令窗口中输入下面的命令验证安装是否成功：<br>gcc -v</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155637005.png" alt="image-20220825155637005"></p><p><strong>arm-none-eabi-gcc</strong><br>Windows到这里下载：<a href="https://link.zhihu.com/?target=https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a> ，选择ZIP压缩包形式的：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155721531.png" alt="image-20220825155721531"></p><p>解压到一个文件夹，并把安装目录下的bin文件夹添加到环境变量：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155750142.png"></p><p>然后重启使得环境变量生效之后可以在命令行里用以下语句测试：<br>arm-none-eabi-gcc -v<br>如果有信息输出,那就是装好了。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155837867.png" alt="image-20220825155837867"></p><h3 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a><strong>Clion配置</strong></h3><blockquote><p>安装 很简单 这里就不详细说了</p></blockquote><p>Clion是基于CMake来管理项目的，所以首选我们需要配置好预设的MinGW和CMake环境。</p><p>打开<code>File-Settings-Build,Execution,Deployment</code>选项卡，在<code>Toolchains</code>下面添加一个MinGW环境：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825160130915.png" alt="image-20220825160130915"></p><blockquote><p>将 C 编译器 选为arm-none-eabi-gcc bin 文件夹下的 xxx-gcc.exe</p><p>将 C++ 编译器 选为arm-none-eabi-gcc bin 文件夹下的 xxx-g++.exe</p><p>注意<strong>Debugger</strong>不要改，否则断点调试的时候无法连接。</p></blockquote><p>然后再<code>CMake</code>栏下确认一下工具链是否正确：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825160308539.png" alt="image-20220825160308539"></p><p>在设置-&gt; 构建、执行、部署 -&gt; 嵌入式开发 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161455637.png" alt="image-20220825161455637"></p><p>绑定 openOCD 与 STM32cubeMX </p><p>至此Clion环境配置完成，可以创建STM32项目了。</p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><blockquote><p>选择嵌入式 </p><p>位置 你想要存放的位置 最后一个文件 就是项目名称</p><p>例如 我的工程叫 GPIO_demo</p><p>在 G 盘 Stm32_Project 下</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161946846.png" alt="image-20220825161946846"></p><p> 新建完 就是如下界面 点击跳过 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161922184.png" alt="image-20220825161922184"></p><p>选择 通过STM32cubeMX 打开</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162138931.png" alt="image-20220825162138931"></p><p>打开STM32cubeMX </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162253458.png" alt="image-20220825162253458"></p><ol><li>点击STM32F030F4Px 选择自己的芯片型号</li></ol><p>在Part Number 搜索自己的芯片 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162437107.png" alt="image-20220825162437107"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162535422.png" alt="image-20220825162535422"></p><p>​点击Start Project</p><h3 id="设置引脚功能"><a href="#设置引脚功能" class="headerlink" title="设置引脚功能"></a>设置引脚功能</h3><blockquote><p>注意：这里的内容需要根据 自己手里的开发板 操作</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162845228.png" alt="image-20220825162845228"></p><p>可以看到 我的LED  是RGB的 其中红色引脚在PA0</p><p>在 如下图中 点击 引脚 设置为output</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162958972.png" alt="image-20220825162958972"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163103245.png" alt="image-20220825163103245"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163118459.png" alt="image-20220825163118459"></p><p>下面设置该引脚名称</p><p>引脚右键 弹出如下菜单 选择ENter User Lable </p><p>我设置为LED_R</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163217442.png" alt="image-20220825163217442"></p><p>引脚设置完成</p><h3 id="设置时钟"><a href="#设置时钟" class="headerlink" title="设置时钟"></a>设置时钟</h3><blockquote><p>选择Rcc 设置为图二的样子 使用外部晶振</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163412315.png" alt="image-20220825163412315"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163431036.png" alt="image-20220825163431036"></p><h4 id="配置时钟树"><a href="#配置时钟树" class="headerlink" title="配置时钟树"></a>配置时钟树</h4><p>在Clock Configuration 配置为 图二的样子 是103c6t6 在72Mhz的频率下工作</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163513845.png" alt="image-20220825163513845"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163802440.png" alt="image-20220825163802440"></p><h3 id="设置项目生成"><a href="#设置项目生成" class="headerlink" title="设置项目生成"></a>设置项目生成</h3><blockquote><p>这里有几个需要注意的地方 </p><p>Name 必须和clion 生成的项目名字一样</p><p>Toolchain&#x2F;IDE 需要设置为SW4STM32   如果没有 就是STM32cubeMX版本太高了</p><p>完事 之后 点击 cenereate code</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163916606.png" alt="image-20220825163916606"></p><p>弹出如下对话框 点击关闭就可</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164201145.png" alt="image-20220825164201145"></p><p>自此STM32cubeMX设置完成 </p><p>写代码在 Core&#x2F;Src 里</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164250946.png" alt="image-20220825164250946"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164430859.png" alt="image-20220825164430859"></p><blockquote><p>三个按钮 分别是 编译 下载 调试</p><p>点击 编译会出现 烧录文件</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164506477.png" alt="image-20220825164506477"></p><h2 id="烧录程序-amp-在线调试"><a href="#烧录程序-amp-在线调试" class="headerlink" title="烧录程序 &amp; 在线调试"></a><strong>烧录程序 &amp; 在线调试</strong></h2><p>在<code>Keil</code>里面我们烧录程序的时候要指定使用的下载器（J-Link、ST-Link、CMSIS-DAP等），<code>Clion</code>烧录程序之前通用需要进行一些设置。</p><p>点击编译按钮旁边的配置栏下拉，选<code>Edit Configurations 或者 编辑配置</code>，打开配置窗口：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825165035523.png" alt="image-20220825165035523"></p><p>可以看到没有设置板子的config文件所以出现警告错误，这个配置文件就是前面说的需要自己生成的文件。</p><p>我们在工程根目录下新建一个文件夹<code>config</code>，在里面新建一个配置文件<code>daplink.cfg</code>（因为我这里使用的是STlink V2作为仿真器），文件的内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># choose st-link/j-link/dap-link etc.</span></span><br><span class="line"><span class="comment">#adapter driver cmsis-dap</span></span><br><span class="line"><span class="comment">#transport select swd</span></span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line">transport select hla_swd</span><br><span class="line">source [find <span class="keyword">target</span>/stm32f1x.cfg]</span><br><span class="line"><span class="comment"># download speed = 10MHz</span></span><br><span class="line">adapter speed <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>前两行设置了仿真器的类型和接口，下面几行指定了<strong>Flash大小</strong>、<strong>芯片类型</strong>、<strong>下载速度</strong>等。</p><p>如果对自己的芯片不知道怎么设置，可以参考OpenOCD自带的一系列配置文件，路径在OpenOCD安装目录的<code>share\openocd\scripts</code>下：</p><p>只需要关注这几个目录：</p><ul><li><strong>board</strong>：板卡配置，各种官方板卡</li><li><strong>interface</strong>：仿真器类型配置，比如ST-Link、CMSIS-DAP等都在里面</li><li><strong>target</strong>：芯片类型配置，STM32F1xx、STM32L0XX等等都在里面</li></ul><p>设置好配置文件之后，就可以点击<strong>下载</strong>或者<strong>调试</strong>按钮进行下载和在线调试了。</p><blockquote><p>在配置文件中不要加<code>reset_config srst_only</code>这一句，会导致下载失败，这一句是指示系统重启的，删除不影响下载。</p></blockquote><p>CLion里面是支持全功能的单步断点调试的，也能在代码里直接观察变量的值，非常舒服~</p><blockquote><p>最后说明一下，CLion中组织编译规则都是基于CMakeLists.txt文件的，如果熟悉CMake应该会觉得很方便很强大，不熟悉的也没事，基本不需要额外修改什么，只需要知道怎么在这个文件里面添加源码目录和include文件夹的路径就行了：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        Core/Inc</span><br><span class="line">        UserApp</span><br><span class="line">// 其他<span class="keyword">include</span>目录</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SOURCES</span><br><span class="line">        <span class="string">&quot;startup/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;Drivers/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;Core/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;UserApp/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;3rdParty/*.*&quot;</span></span><br><span class="line">// *.*表示通配符，也就是这个文件夹里的所有文件都会被编译</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="printf重定向问题"><a href="#printf重定向问题" class="headerlink" title="printf重定向问题"></a><strong><code>printf</code>重定向问题</strong></h3><p>​在Clion中链接的是<code>GNU-Tools-ARM-Embedded\arm-none-eabi\include</code>里面的<code>stdio.h</code>，如果仍然想使用<code>printf</code>函数功能，则需要进行如下操作：</p><p>新建一个retarget.h文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _RETARGET_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _RETARGET_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32xxxx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//#ifndef _RETARGET_H__</span></span></span><br></pre></td></tr></table></figure><p>再新建一个retarget.c文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_ansi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_syslist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;retarget.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OS_USE_SEMIHOSTING)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_FILENO  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_FILENO 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_FILENO 2</span></span><br><span class="line"></span><br><span class="line">UART_HandleTypeDef *gHuart;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    gHuart = huart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Disable I/O buffering for STDOUT stream, so that</span></span><br><span class="line"><span class="comment">     * chars are sent out as soon as they are printed. */</span></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDOUT_FILENO || fd == STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Transmit(gHuart, (<span class="type">uint8_t</span> *) ptr, len, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>) fd;</span><br><span class="line">    (<span class="type">void</span>) ptr;</span><br><span class="line">    (<span class="type">void</span>) dir;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDIN_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Receive(gHuart, (<span class="type">uint8_t</span> *) ptr, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        st-&gt;st_mode = S_IFCHR;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//#if !defined(OS_USE_SEMIHOSTING)</span></span></span><br></pre></td></tr></table></figure><p>​添加这两个文件到工程，更新CMake，编译之后会发现，有几个系统函数重复定义了，被重复定义的函数位于<code>Src</code>目录的<code>syscalls.c</code>文件中，我们把里面重复的几个函数删掉即可。</p><p>在main函数的初始化代码中添加对头文件的引用并注册重定向的串口号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">RetargetInit(&amp;huart1);</span><br></pre></td></tr></table></figure><p>配置完成</p><p><strong>上面的修改完成之后可能会发现无法正常读取浮点数，这里修改CMakeList.txt，加入下述编译选项</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(COMMON_FLAGS <span class="string">&quot;-specs=nosys.specs -specs=nano.specs -u _printf_float -u _scanf_float&quot;</span>)</span><br></pre></td></tr></table></figure><p>[]: ttps:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;145801160“参考链接”</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记九</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/08/15/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/08/15/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="IIC协议"><a href="#IIC协议" class="headerlink" title="IIC协议"></a>IIC<em><strong>协议</strong></em></h1><h2 id="IIC协议概述"><a href="#IIC协议概述" class="headerlink" title="IIC协议概述"></a><strong>IIC</strong>协议概述</h2><blockquote><p>IIC全称Inter-Integrated Circuit (集成电路总线)<br>是由PHILIPS公司在80年代开发的两线式串行总线，用于连接微控制器及其外围设备。IIC属于半双<br>工同步通信方式</p></blockquote><p><strong>特点</strong></p><ul><li>简单性和有效性。</li></ul><p>由于接口直接在组件之上，因此IIC总线占用的空间非常小，减少了电路板的空间和芯片管脚的数量，降低了互联成本。总线的长度可高达25英尺，并且能够以10Kbps的最大传输速率支持40个组件</p><p><strong>构成</strong></p><p>IIC串行总线一般有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL，其时钟信号是由主控器件产生。所有接到IIC总线设备上的串行数据SDA都接到总线的SDA上，各设备的时钟线SCL接到总线的SCL上。对于并联在一条总线上的每个IC都有唯一的地址。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151506039.png" alt="image-20220815150649916"></p><p><strong>IIC</strong>协议</p><p>IIC总线在传输数据的过程中一共有三种类型信号，分别为：开始信号、结束信号和应答信号。</p><p>&#x2F;&#x2F;起始位，停止位，数据位，速度</p><p>这些信号中，起始信号是必需的，结束信号和应答信号</p><ul><li><p>起始信号</p></li><li><p>终止信号</p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151507749.png" alt="image-20220815150749694"></p><ul><li>应答信号</li></ul><p>发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；<br>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151508377.png" alt="image-20220815150823317"></p><ul><li>数据发送的时序</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151508223.png" alt="image-20220815150840172"></p><h2 id="OLED写命令"><a href="#OLED写命令" class="headerlink" title="OLED写命令"></a>OLED写命令</h2><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151557560.png" alt="image-20220815155717480"></p><h3 id="写命令-x2F-数据的思路"><a href="#写命令-x2F-数据的思路" class="headerlink" title="写命令&#x2F;数据的思路"></a>写命令&#x2F;数据的思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. start() </span></span><br><span class="line"><span class="comment">2. 写入 b0111 1000 0x78 </span></span><br><span class="line"><span class="comment">3. ACK </span></span><br><span class="line"><span class="comment">4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据 </span></span><br><span class="line"><span class="comment">5. ACK </span></span><br><span class="line"><span class="comment">6. 写入指令/数据 </span></span><br><span class="line"><span class="comment">7. ACK</span></span><br><span class="line"><span class="comment">8. STOP */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体的 每个参数的意义 看卖家给的文档 </p></blockquote><h3 id="OLED-显示一个点"><a href="#OLED-显示一个点" class="headerlink" title="OLED 显示一个点"></a>OLED 显示一个点</h3><p>如何显示一个点？</p><p>有三种，分别位页地址模式，水平地址模式和垂直地址模式，可以通过一下表格进行配置</p><p>内存管理</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151633854.png" alt="image-20220815163312778"></p><blockquote><p>页寻址模式： </p><ol><li>发送cmd：0x20</li><li>发送cmd: 0x02 ; 默认是页寻址模式</li></ol></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151633903.png"></p><h4 id="页地址模式"><a href="#页地址模式" class="headerlink" title="页地址模式"></a>页地址模式</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151636719.png" alt="image-20220815163623674"></p><h4 id="水平地址模式"><a href="#水平地址模式" class="headerlink" title="水平地址模式"></a><strong>水平地址模式</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151637806.png" alt="image-20220815163702760"></p><h4 id="垂直地址模式"><a href="#垂直地址模式" class="headerlink" title="垂直地址模式"></a><strong>垂直地址模式</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151637956.png" alt="image-20220815163717911"></p><table><thead><tr><th>64</th><th></th><th></th><th>0列</th><th>1列</th><th>2列</th><th>3列</th><th>···························</th><th>124列</th><th>125列</th><th>126列</th><th>127列</th></tr></thead><tbody><tr><td>Page0</td><td>bit0</td><td>0行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit1</td><td>1行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit2</td><td>2行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit3</td><td>3行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit4</td><td>4行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit5</td><td>5行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit6</td><td>6行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit7</td><td>7行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page1</td><td></td><td>8到15行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page2</td><td></td><td>16到23行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page3</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page4</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page5</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page6</td><td></td><td>56行到63行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="显示一个点代码"><a href="#显示一个点代码" class="headerlink" title="显示一个点代码"></a>显示一个点代码</h4><blockquote><p>这里我遇到的坑： 初始化会花屏  我在初始化完成后 加了一个清屏函数 就解决了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init(); </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个0 1011 0000 == 0xB0</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>);</span><br><span class="line">    Oled_Write_Data(<span class="number">0x08</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152330488.jpeg"></p><h4 id="显示一个字母A"><a href="#显示一个字母A" class="headerlink" title="显示一个字母A"></a>显示一个字母A</h4><p>通过取显示字母的 数组</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152206152.png" alt="image-20220815220605099"></p><p>字模取出来是2*16的 需要拆解一下 因为OLED的一个page只能放8位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> A[<span class="number">2</span>][<span class="number">8</span>] =&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,&#123;<span class="number">0x20</span>,<span class="number">0x3C</span>,<span class="number">0x23</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x27</span>,<span class="number">0x38</span>,<span class="number">0x20</span>&#125;&#125; ;</span><br></pre></td></tr></table></figure><p>我用的 是二维数组</p><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--  文字:  A  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span></span><br><span class="line"><span class="type">char</span> A[<span class="number">2</span>][<span class="number">8</span>] =&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,&#123;<span class="number">0x20</span>,<span class="number">0x3C</span>,<span class="number">0x23</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x27</span>,<span class="number">0x38</span>,<span class="number">0x20</span>&#125;&#125; ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i,j; </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line">    <span class="keyword">for</span> ( i =<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span>+i);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(A[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152237938.jpg" alt="c5258ae852af29ac815cec9acc2a3ff"></p><h4 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--  文字:  小  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> xiao[<span class="number">2</span>][<span class="number">16</span>]=&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">                  &#123;<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  刘  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> liu[<span class="number">2</span>][<span class="number">16</span>] =&#123;&#123;<span class="number">0x08</span>,<span class="number">0x28</span>,<span class="number">0x48</span>,<span class="number">0x89</span>,<span class="number">0x0E</span>,<span class="number">0x88</span>,<span class="number">0x78</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x09</span>,<span class="number">0x06</span>,<span class="number">0x19</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  同  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> tong[<span class="number">2</span>][<span class="number">16</span>]= &#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFE</span>,<span class="number">0x02</span>,<span class="number">0x12</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x12</span>,<span class="number">0x02</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x1F</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  学  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> xue[<span class="number">2</span>][<span class="number">16</span>]=&#123;&#123;<span class="number">0x40</span>,<span class="number">0x30</span>,<span class="number">0x11</span>,<span class="number">0x96</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x91</span>,<span class="number">0x96</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x98</span>,<span class="number">0x14</span>,<span class="number">0x13</span>,<span class="number">0x50</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x44</span>,<span class="number">0x84</span>,<span class="number">0x7E</span>,<span class="number">0x06</span>,<span class="number">0x05</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i,j; </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line">    <span class="keyword">for</span> ( i =<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span>+i);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(xiao[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(liu[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(tong[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(xue[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152238727.jpg" alt="441c9b56fdfac5f5ef87d2cd68608ca"></p><blockquote><p> 相机拍摄的 刷新率有问题 肉眼看到没有 横杠</p></blockquote><h4 id="显示-照片"><a href="#显示-照片" class="headerlink" title="显示 照片"></a>显示 照片</h4><blockquote><p>需要先对图片进行处理 分辨率为128*64 </p><p>输出方法类似清屏 只不过 清屏时候 写入的 数据是0 显示图片 换成对应的数组值</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152312711.png" alt="image-20220815231250630"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Show_Image</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* img)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">128</span> * i; j &lt; <span class="number">128</span> * (i+<span class="number">1</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(img[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code BMP1[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,</span><br><span class="line"><span class="number">0xF0</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0x1E</span>,<span class="number">0x1E</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x86</span>,</span><br><span class="line"><span class="number">0x86</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0x70</span>,</span><br><span class="line"><span class="number">0x70</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,</span><br><span class="line"><span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x2F</span>,<span class="number">0x2F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,</span><br><span class="line"><span class="number">0xFF</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x16</span>,<span class="number">0x16</span>,<span class="number">0x1E</span>,<span class="number">0x1E</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x3F</span>,</span><br><span class="line"><span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0xFC</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,</span><br><span class="line"><span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x3C</span>,<span class="number">0x3C</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xFE</span>,<span class="number">0xFC</span>,<span class="number">0xEC</span>,</span><br><span class="line"><span class="number">0xEC</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x7D</span>,</span><br><span class="line"><span class="number">0x7D</span>,<span class="number">0xFD</span>,<span class="number">0xFD</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,</span><br><span class="line"><span class="number">0x33</span>,<span class="number">0x23</span>,<span class="number">0x23</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x9E</span>,<span class="number">0x9E</span>,<span class="number">0xFD</span>,<span class="number">0xFD</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0xFC</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xB8</span>,<span class="number">0xB8</span>,<span class="number">0xDC</span>,<span class="number">0xDC</span>,<span class="number">0xCE</span>,<span class="number">0xCE</span>,<span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0xEE</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0xEE</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xDC</span>,<span class="number">0xDC</span>,<span class="number">0xB8</span>,<span class="number">0xB8</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x7F</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x19</span>,<span class="number">0x19</span>,<span class="number">0x5D</span>,<span class="number">0x5D</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xEE</span>,<span class="number">0xEE</span>,<span class="number">0xF6</span>,<span class="number">0xF6</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xB7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x9D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,</span><br><span class="line"><span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF6</span>,<span class="number">0xF6</span>,<span class="number">0xEE</span>,<span class="number">0xEE</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0x5D</span>,<span class="number">0x5D</span>,<span class="number">0x19</span>,<span class="number">0x19</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x3B</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x0D</span>,<span class="number">0x0D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xBE</span>,<span class="number">0xBE</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xEF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xBF</span>,<span class="number">0xBF</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xBD</span>,<span class="number">0xBD</span>,<span class="number">0xBE</span>,<span class="number">0xBE</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x0D</span>,<span class="number">0x0D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3D</span>,<span class="number">0x3D</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x6F</span>,<span class="number">0x6F</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x7D</span>,<span class="number">0x7D</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,</span><br><span class="line"><span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0x7D</span>,<span class="number">0x7D</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x6F</span>,<span class="number">0x6F</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x3D</span>,<span class="number">0x3D</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line"></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>);</span><br><span class="line">    Oled_Show_Image(BMP1);</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152316108.jpg" alt="705b8c6db0fe5ca8b8d9601c3f984b1"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIC协议 </tag>
            
            <tag> OLED屏幕 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记八</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/07/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/07/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="4G模块的使用"><a href="#4G模块的使用" class="headerlink" title="4G模块的使用"></a>4G模块的使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h3><p>EC03-DNC是亿佰特推出的LTECAT1数传模块产品，该产品软件功能完善，覆盖绝大多数常规应用场景，EC03-DNC是为实现串口设备与网络服务器,通过网络相互传输数据而开发的产品，该产品是一款带分集接收功能的LTE-FDD&#x2F;LTE-TDD无线通信数传模块，支持LTE-FDD，LTE-TDD网络数据连接，用户只需通过简单的设置，即可实现串口到网络服务器的双向数据透明传输。模块使用2.0mm排针方便客户设备集成，使用5V～18V宽电压供电。支持移动、联通、电信4G卡，通信与LED指示采用兼容电平，默认3.3V可适用5V电平，具有抗干扰能力，能适应使用在一些电磁干扰强的环境当中，比如一些电力行业当中。</p><h3 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h3><ol><li>采用最新4GCAT1方案；</li><li>支持数据透明传输，支持TCP、UDP网络协议，支持心跳包、注册包功能最大支持60个字节数；</li><li>支持MQTT协议，支持接入OneNet平台、百度云平台、阿里云平台的MQTT服务；</li><li>支持两路Socket链路同时收发；</li><li>支持ModbusRTU与ModbusTCP自动相互转换；</li><li>支持网络AT指令，可以通过网络，远程配置设备；</li><li>LTE-FDD：最大下行速率10Mbps，最大上行速率5Mbps；LTE-TDD：最大下行速率7.5Mbps，最大上行速率1Mbps；</li><li>软件看门狗设计，系统稳定。</li><li>支持APN&#x2F;VPN。</li></ol><blockquote><p>有两种工作模式，默认是透传模式，通过其他方式进入AT指令模式，后续有说明</p></blockquote><blockquote><p>注意插卡不要出错，下图红色位置为SIM卡状态灯，亮才是正常</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282315729.png" alt="image-20220728231458084"></p><ul><li>软件和用户手册下载地址 <a href="https://www.ebyte.com/product-view-news.html?id=1102">https://www.ebyte.com/product-view-news.html?id=1102</a></li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>​     串口调试助手，网络调试助手，用户手册（AT指令），均可在以上网址中下载到</p><h3 id="进入AT模式"><a href="#进入AT模式" class="headerlink" title="进入AT模式"></a>进入AT模式</h3><blockquote><p>在使用前:</p><p>将电源、天线、SIM 卡、串口线等硬件连接好。</p></blockquote><ol><li><p>进入AT指令模式在串口助手内发送+++(<strong>除了+++不需要勾选发送新行其他AT指令都需要勾选发送新行才有效</strong>)必须在发送+++指令3s内发送其他任意AT指令(除重启AT指令外)才能完全进入AT</p></li><li><p>进入AT指令模式后，使用<code>AT+CPIN</code>查看SIM卡接入情况：</p><p>例如：</p><p> <code>AT+CPIN</code></p><p><code>+OK=1</code></p><p>表示SIM卡已接入，使用AT+CSQ查看当前信号强度：</p><p>例如：</p><p><code>AT+CSQ</code></p><p><code>+OK=26</code>表示当前信号强度正常.  26是信号强度 不是固定的 根据实际情况看</p><p>如果回复99表示当前信号强度异常，请查看当前为天线是否连好，或周围基站存在异常。</p></li><li><p>接入服务器，<code>AT+SOCK=TCPC,116.62.42.192,31687</code>（参数之间使用英文字符逗号隔开，IP指令之间使用英文字符点隔开），如果是SOCK1，SOCK2，SOCK3，需要在前端加使能命令(具体查看AT指令说明部分)。</p><p>SOCK设置</p><p>例如：</p><p><code>AT+SOCK=TCPC,116.62.42.192,31687</code></p><p><code>+OK</code></p><p>SOCK1、SOCK2、SOCK3设置</p><p>例如：</p><p><code>AT+SOCK1=0,TCPC,116.62.42.192,31687</code></p><p><code>+OK</code> 表示设置成功。</p></li><li><p>重启（所有AT指令修改参数后，设备重启后生效）执行指令<code>AT+REBT</code>返回OK后设备立即重启，此处IP只做演示，实际连接以需要连接的服务器IP为基准</p></li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282328951.png" alt="image-20220728232806905"></p><blockquote><p>模块还有很多的AT指令 如心跳包内容的设置 心跳包的发送时间，MQTT服务器的设置等等。在官方的文档中有详细介绍。每一个指令都有详细的使用方法的介绍，返回值等。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282351377.png" alt="image-20220728235152338"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282341466.png" alt="image-20220728234120429"></p><h3 id="连接socket-服务器"><a href="#连接socket-服务器" class="headerlink" title="连接socket 服务器"></a>连接socket 服务器</h3><blockquote><p>因为是4G通信，所以需要用到内网穿透功能，将电脑搭建的socket服务器 映射到公网</p><p>这里我使用的是花生壳内网穿透工具，  </p><blockquote><p>  免费 学习使用和简单的场景足够</p></blockquote></blockquote><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><ol><li>注册账号 </li><li>下载软件</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282333714.png" alt="屏幕截图 2022-07-28 233329"></p><h4 id="设置一个TCP服务器"><a href="#设置一个TCP服务器" class="headerlink" title="设置一个TCP服务器"></a>设置一个TCP服务器</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282334926.png" alt="image-20220728233431875"></p><blockquote><p>百度搜索网络调试助手很多</p></blockquote><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282335598.png" alt="image-20220728233556556"></p><p>这里的内网主机和内网端口 一定要和网络调试助手的保持一致</p><h4 id="内网穿透测试"><a href="#内网穿透测试" class="headerlink" title="内网穿透测试"></a>内网穿透测试</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282338221.png" alt="image-20220728233808140"></p><blockquote><p> 通过外网地址访问成功</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应于课堂代码16文件夹 </span></span><br><span class="line"><span class="comment">//C51通过4g模块连接网络，收到数据包op开灯，收到数据包cl关灯 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE</span></span><br><span class="line"><span class="number">12</span> sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit D5 = P3 ^ <span class="number">7</span>;</span><br><span class="line"><span class="type">char</span> cmd[SIZE];</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>;</span><br><span class="line">    <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>; <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>; <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    D5 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//配置C51串口的通信方式</span></span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        <span class="comment">//往发送缓冲区写入数据，就完成数据的发送</span></span><br><span class="line">        <span class="comment">// sendString(&quot;xiaoliu tongxue shuai\r\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cmd[i++] = tmp;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; cmd[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; cmd[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(cmd, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; cmd[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; cmd[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(cmd, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span>)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TI)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 4G模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记七</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/07/21/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/07/21/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="DHT11-温湿度模块"><a href="#DHT11-温湿度模块" class="headerlink" title="DHT11 温湿度模块"></a>DHT11 温湿度模块</h1><h2 id="产品概述"><a href="#产品概述" class="headerlink" title="产品概述"></a><strong>产品概述</strong></h2><blockquote><p>DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传感器，应用领域：暖通</p><p>空调；汽车；消费品；气象站；湿度调节器；除湿器；家电；医疗；自动控制</p></blockquote><p><img src="C:/Users/Antonio/AppData/Roaming/Typora/typora-user-images/image-20220721225948515.png" alt="image-20220721225948515"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul><li>相对湿度和温度测量</li><li>全部校准，数字输出</li><li>长期稳定性</li><li>超长的信号传输距离：20米</li><li>超低能耗：休眠</li><li>4 引脚安装：可以买封装好的</li><li>完全互换 : 直接出结果，不用转化</li></ul><h4 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h4><table><thead><tr><th align="center">单片机</th><th align="center">DHT11</th></tr></thead><tbody><tr><td align="center">VCC</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">P1.1</td><td align="center">DATA</td></tr></tbody></table><h3 id="数据传送逻辑"><a href="#数据传送逻辑" class="headerlink" title="数据传送逻辑"></a><strong>数据传送逻辑</strong></h3><blockquote><p>只有一根数据线DATA，上官一号发送序列指令给DHT11模块，模块一次完整的数据传输为40bit,高位先出</p></blockquote><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a><strong>数据格式</strong></h3><blockquote><p>8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据+8bit校验和</p></blockquote><h3 id="通讯过程时序图"><a href="#通讯过程时序图" class="headerlink" title="通讯过程时序图"></a>通讯过程时序图</h3><p><img src="C:\Users\Antonio\AppData\Roaming\Typora\typora-user-images\image-20220721230414860.png" alt="image-20220721230414860"></p><h4 id="时序分析"><a href="#时序分析" class="headerlink" title="时序分析"></a>时序分析</h4><p>a : dht &#x3D; 1<br>b ：dht &#x3D; 0<br>延时30ms<br>c： dht &#x3D; 1<br>在60us后读d点，如果d点是低电平（被模块拉低），说明模块存在！</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;INTRINS.H&quot;</span></span></span><br><span class="line">sbit ledone = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit dht = P1 ^ <span class="number">0</span>; <span class="comment">// DHT out数据线在P1.0口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// a : dht = 1</span></span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// b ：dht = 0</span></span><br><span class="line">    dht = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    <span class="comment">// c： dht = 1</span></span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 在60us后读d点，如果d点是低电平（被模块拉低），说明模块存在！</span></span><br><span class="line">    Delay60us();</span><br><span class="line">    <span class="keyword">if</span> (dht == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ledone = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledone = <span class="number">1</span>;</span><br><span class="line">    check_DHT();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DHT模块初始化"><a href="#DHT模块初始化" class="headerlink" title="DHT模块初始化"></a>DHT模块初始化</h3><h4 id="时许分析"><a href="#时许分析" class="headerlink" title="时许分析"></a>时许分析</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101932159.png" alt="image-20220810193205055"></p><p>这里需要判断模块高低电平的时间 延迟时间不好把握  </p><p>这里 我使用<code>whiile(Dht)</code>的方法 卡 模块的 高电平 与 低电平</p><p>DHT11传输0的时序分析</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101934236.png" alt="image-20220810193424195"></p><p>DHT11传输1的时序分析 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101934651.png" alt="image-20220810193444610"></p><p>DHT数据 大小为 40bit 所以 我一共读五轮 每轮读8次</p><h3 id="LCD1602显示"><a href="#LCD1602显示" class="headerlink" title="LCD1602显示"></a>LCD1602显示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此代码没有封装，又臭又长，慎用！ </span></span><br><span class="line"><span class="comment">//接线：LCD1602数据选用P0口， RS接P1.0 RW接P1.1 EN接P1.4 </span></span><br><span class="line"><span class="comment">//DHT11：数据线接P3.3口</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line">sbit ledOne   = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit dht      = P3 ^ <span class="number">3</span>; <span class="comment">//模块的data插在p3.3</span></span><br><span class="line">sbit fengshan = P1 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">4</span>;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> huma[<span class="number">8</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp   = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN  = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x40</span>; <span class="comment">//配置串口工作方式1，REN不使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    dht = <span class="number">0</span>; <span class="comment">//延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//卡d点；</span></span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">//卡e点 while (!dht) 卡f点：while(dht) while (dht);</span></span><br><span class="line">    <span class="keyword">while</span> (!dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//轮</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">//每一轮读多少次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="type">char</span> flag;</span><br><span class="line">    DHT11_Start();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123; <span class="comment">//卡g点while(!dht) 有效数据都是高电平，持续时间不一样，50us读，低电平0 高 电平</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!dht)</span><br><span class="line">                ; <span class="comment">//等待卡g点</span></span><br><span class="line">            Delay40us();</span><br><span class="line">            <span class="keyword">if</span> (dht == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (dht)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            tmp |= flag;</span><br><span class="line">        &#125;</span><br><span class="line">        datas[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号 //（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置</span></span><br><span class="line"></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + <span class="number">0x40</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Build_Datas</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    huma[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    huma[<span class="number">1</span>] = datas[<span class="number">0</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">2</span>] = datas[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    huma[<span class="number">4</span>] = datas[<span class="number">1</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">5</span>] = datas[<span class="number">1</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">6</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    huma[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    temp[<span class="number">1</span>] = datas[<span class="number">2</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">2</span>] = datas[<span class="number">2</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    temp[<span class="number">4</span>] = datas[<span class="number">3</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">5</span>] = datas[<span class="number">3</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">6</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    temp[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    UartInit();</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Read_Data_From_DHT();</span><br><span class="line">        <span class="keyword">if</span> (datas[<span class="number">2</span>] &gt; <span class="number">24</span>) &#123; fengshan = <span class="number">0</span>; &#125;</span><br><span class="line">        Build_Datas();</span><br><span class="line">        sendString(huma);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sendString(temp);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        LCD1602_showLine(<span class="number">1</span>, <span class="number">2</span>, huma);</span><br><span class="line">        LCD1602_showLine(<span class="number">2</span>, <span class="number">2</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分文件编程（推荐）"><a href="#分文件编程（推荐）" class="headerlink" title="分文件编程（推荐）"></a>分文件编程（推荐）</h3><p>代码结构</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208111826017.png" alt="image-20220811182648943"></p><p>说明</p><ul><li>config.h 接口定义</li><li>delay.h 延迟函数</li><li>dht11.h 温湿度模块</li><li>lcd1602.h LCD1602显示</li><li>uart.h 串口初始化</li><li>main 主函数</li></ul><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接线：LCD1602数据选用P0口， RS接P1.0 RW接P1.1 EN接P1.4 </span></span><br><span class="line"><span class="comment">//DHT11：数据线接P3.3口</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;lcd1602.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="type">char</span> temp[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> huma[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">Build_Datas</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    huma[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    huma[<span class="number">1</span>] = datas[<span class="number">0</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">2</span>] = datas[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    huma[<span class="number">4</span>] = datas[<span class="number">1</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">5</span>] = datas[<span class="number">1</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">6</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    huma[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    temp[<span class="number">1</span>] = datas[<span class="number">2</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">2</span>] = datas[<span class="number">2</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    temp[<span class="number">4</span>] = datas[<span class="number">3</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">5</span>] = datas[<span class="number">3</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">6</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    temp[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    UartInit();</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">         Read_Data_From_DHT();</span><br><span class="line">        <span class="keyword">if</span> (datas[<span class="number">2</span>] &gt;= <span class="number">24</span>)</span><br><span class="line">         &#123; fengshan = <span class="number">0</span>; &#125; <span class="comment">//风扇开关</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">        Build_Datas();</span><br><span class="line">        sendString(huma);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sendString(temp);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        LCD1602_showLine(<span class="number">1</span>, <span class="number">2</span>, huma);</span><br><span class="line">        LCD1602_showLine(<span class="number">2</span>, <span class="number">2</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="config-h"><a href="#config-h" class="headerlink" title="config.h"></a>config.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbit ledOne   = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit fengshan = P1 ^ <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h4 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h4> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br></pre></td></tr></table></figure><h4 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line">sbit dht      = P3 ^ <span class="number">3</span>; <span class="comment">//模块的data插在p3.3</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    dht = <span class="number">0</span>; <span class="comment">//延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//卡d点；</span></span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">//卡e点 while (!dht) 卡f点：while(dht) while (dht);</span></span><br><span class="line">    <span class="keyword">while</span> (!dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//轮</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">//每一轮读多少次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="type">char</span> flag;</span><br><span class="line">    DHT11_Start();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123; <span class="comment">//卡g点while(!dht) 有效数据都是高电平，持续时间不一样，50us读，低电平0 高 电平</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!dht)</span><br><span class="line">                ; <span class="comment">//等待卡g点</span></span><br><span class="line">            Delay40us();</span><br><span class="line">            <span class="keyword">if</span> (dht == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (dht)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            tmp |= flag;</span><br><span class="line">        &#125;</span><br><span class="line">        datas[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a>dht11.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="lcd1602-c"><a href="#lcd1602-c" class="headerlink" title="lcd1602.c"></a>lcd1602.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">4</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp   = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN  = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号 //（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置</span></span><br><span class="line"></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + <span class="number">0x40</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lcd1602-h"><a href="#lcd1602-h" class="headerlink" title="lcd1602.h"></a>lcd1602.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="uart-c"><a href="#uart-c" class="headerlink" title="uart.c"></a>uart.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">12</span>] ; </span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN不使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span> ;  <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span> ;  <span class="comment">// 开启串口中断 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4 </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp ;</span><br><span class="line">    <span class="type">char</span> i ;  </span><br><span class="line">    <span class="keyword">if</span>(RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span> ; </span><br><span class="line">        tmp = SBUF; </span><br><span class="line">        <span class="keyword">if</span>(tmp == <span class="string">&quot;:&quot;</span>)&#123;</span><br><span class="line">            i = <span class="number">0</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp ; </span><br><span class="line">        <span class="keyword">if</span>(buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)&#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)&#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uart-h"><a href="#uart-h" class="headerlink" title="uart.h"></a>uart.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> ;<span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>接上蓝牙透传模块 可以在手机的蓝牙助手查看数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> DHT11 </tag>
            
            <tag> 单片机非标准协议外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记六</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/07/05/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/07/05/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="非标协议外设"><a href="#非标协议外设" class="headerlink" title="非标协议外设"></a><strong>非标协议外设</strong></h1><h2 id="LCD1602显示"><a href="#LCD1602显示" class="headerlink" title="LCD1602显示"></a>LCD1602显示</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><blockquote><p>LCD1602（Liquid Crystal Display）是一种工业字符型液晶，能够同时显示 16×02 即 32 字符(16列两行) </p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705221821632.png" alt="image-20220705221821632"></p><h3 id="引脚说明"><a href="#引脚说明" class="headerlink" title="引脚说明"></a>引脚说明</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705221824828.png" alt="image-20220705221824828"></p><blockquote><p>第 1 脚: VSS 为电源地<br>第 2 脚: VDD 接 5V 正电源<br>第 3 脚: VL 为液晶显示器对比度调整端,接正电源时对比度最弱，接地时对比度最高，对比度过高时会产生“鬼影”，使用时可以通过一个 10K 的电位器调整对比度。<br>第 4 脚：RS 为寄存器选择，高电平时选择数据寄存器、低电平时选择指令寄存器。<br>第 5 脚：R&#x2F;W 为读写信号线，高电平时进行读操作，低电平时进行写操作。当 RS 和 R&#x2F;W 共同为低电平时可以写入指令或者显示地址，当 RS 为低电平 R&#x2F;W 为高电平时可以读忙信号，当 RS 为高电平 R&#x2F;W 为低电平时可以写入数据。<br>第 6 脚：E 端为使能端，当 E 端由高电平跳变成低电平时，液晶模块执行命令。<br>第 7-14 脚：D0～D7 为 8 位双向数据线。<br>第 15 脚：背光源正极。<br>第 16 脚：背光源负极。</p></blockquote><h3 id="接线表"><a href="#接线表" class="headerlink" title="接线表"></a>接线表</h3><table><thead><tr><th>LCD1602</th><th>单片机</th></tr></thead><tbody><tr><td>VSS</td><td>GND</td></tr><tr><td>VDD</td><td>5V</td></tr><tr><td>VO</td><td>GND</td></tr><tr><td>RS</td><td>P1.0</td></tr><tr><td>RW</td><td>P1.1</td></tr><tr><td>E</td><td>P1.2</td></tr><tr><td>A</td><td>5V</td></tr><tr><td>K</td><td>GND</td></tr><tr><td>D0~D7</td><td>P0.0~Po.7</td></tr></tbody></table><h3 id="LCD1602指令"><a href="#LCD1602指令" class="headerlink" title="LCD1602指令"></a>LCD1602指令</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705222932571.png" alt="image-20220705222932571"></p><h3 id="开发逻辑"><a href="#开发逻辑" class="headerlink" title="开发逻辑"></a><strong>开发逻辑</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705222947558.png" alt="image-20220705222947558"></p><p>例如第二行第一个字符的地址是 40H，那么是否直接写入 40H 就可以将光标定位在第二行第一个字符的位置呢？这样不行，因为写入显示地址时要求最高位 D7 恒定为高电平 1 所以实际写入的数据应该是01000000B(40H) +10000000B(80H)&#x3D;11000000B(C0H)</p><h4 id="显示什么"><a href="#显示什么" class="headerlink" title="显示什么"></a>显示什么</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223032600.png" alt="image-20220705223032600"></p><h4 id="读写操作时序"><a href="#读写操作时序" class="headerlink" title="读写操作时序"></a><strong>读写操作时序</strong></h4><h5 id="读操作时序"><a href="#读操作时序" class="headerlink" title="读操作时序"></a>读操作时序</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223114577.png" alt="image-20220705223114577"></p><h5 id="写操作时序"><a href="#写操作时序" class="headerlink" title="写操作时序"></a>写操作时序</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223129166.png" alt="image-20220705223129166"></p><h5 id="数序参数"><a href="#数序参数" class="headerlink" title="数序参数"></a>数序参数</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223144533.png" alt="image-20220705223144533"></p><h3 id="显示一个字符C"><a href="#显示一个字符C" class="headerlink" title="显示一个字符C"></a>显示一个字符<strong>C</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="comment">/*RS -- P1.0</span></span><br><span class="line"><span class="comment">RW -- P1.1</span></span><br><span class="line"><span class="comment">E -- P1.2 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">2</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123; <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号</span></span><br><span class="line">    <span class="comment">//（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置&#125;</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> position = <span class="number">0x80</span> + <span class="number">0x05</span>;</span><br><span class="line">    <span class="type">char</span> dataShow = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Write_Cmd_Func(position);</span><br><span class="line">    <span class="comment">//选择要显示的地址</span></span><br><span class="line">    Write_Data_Func(dataShow);</span><br><span class="line">    <span class="comment">//发送要显示的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/IMG_4517.jpg" alt="IMG_4517"></p><blockquote><p>这里的电位器 用于调整对比度 </p><p>也就是V0 引脚 当v0 为5v的时候对比度最大 啥也看不见 </p><p>当V0为GND 的时候 对比度最小 可以看见 但是有方块</p></blockquote><h3 id="显示一行文字"><a href="#显示一行文字" class="headerlink" title="显示一行文字"></a>显示一行文字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="comment">/*RS -- P1.0</span></span><br><span class="line"><span class="comment">RW -- P1.1</span></span><br><span class="line"><span class="comment">E -- P1.2 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">2</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123; <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号</span></span><br><span class="line">    <span class="comment">//（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置&#125;</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row,<span class="type">char</span> col,<span class="type">char</span> *<span class="built_in">string</span>)</span>&#123; <span class="comment">// row 选择显示行数 col 显示位置 string 显示的内容</span></span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Write_Cmd_Func(<span class="number">0x80</span>+col); </span><br><span class="line">        <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">            <span class="built_in">string</span>++;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">    Write_Cmd_Func(<span class="number">0x80</span>+<span class="number">0x40</span>+col); </span><br><span class="line">        <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">            <span class="built_in">string</span>++;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> position = <span class="number">0x80</span> + <span class="number">0x05</span>;</span><br><span class="line">    <span class="type">char</span> dataShow = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    <span class="comment">// Write_Cmd_Func(position);</span></span><br><span class="line">    <span class="comment">// //选择要显示的地址</span></span><br><span class="line">    <span class="comment">// Write_Data_Func(dataShow);</span></span><br><span class="line">    <span class="comment">// //发送要显示的字符</span></span><br><span class="line">    LCD1602_showLine(<span class="number">1</span>,<span class="number">5</span>,<span class="string">&quot;NO.1&quot;</span>); <span class="comment">//第一行的第五个位置开始显示 NO.1 </span></span><br><span class="line">    LCD1602_showLine(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;xiaoliutongxue&quot;</span>); <span class="comment">// 第二行的第零个位置开始显示 小刘同学</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 单片机非标准协议外设 </tag>
            
            <tag> LCD1602 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记五</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/07/02/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/07/02/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝牙与wifi模块"><a href="#蓝牙与wifi模块" class="headerlink" title="蓝牙与wifi模块"></a>蓝牙与wifi模块</h1><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p>蓝牙模块，又叫做蓝牙串口模块</p><p>串口透传技术</p><blockquote><p>透传即透明传送，是指在数据的传输过程中，通过无线的方式这组数据不发生任何形式的改变，仿佛传输过程是透明的一样，同时保证传输的质量，原封不动地到了最终接收者手里。</p></blockquote><p>以太网，蓝牙，Zigbee, GPRS 等模块玩法一样，对嵌入式程序员来说，不需要关心通讯模块内部数据</p><p>及协议栈工作原理，只要通过串口编程获得数据即可</p><p>接线 </p><blockquote><p>串口交叉相连</p></blockquote><table><thead><tr><th align="center">单片机</th><th align="center">蓝牙模块</th></tr></thead><tbody><tr><td align="center">RX</td><td align="center">TX</td></tr><tr><td align="center">TX</td><td align="center">RX</td></tr><tr><td align="center">VCC</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr></tbody></table><h2 id="Wifi模块ESP-01s"><a href="#Wifi模块ESP-01s" class="headerlink" title="Wifi模块ESP-01s"></a>Wifi模块<strong>ESP-01s</strong></h2><h3 id="AT-指令"><a href="#AT-指令" class="headerlink" title="AT****指令"></a><strong>AT****指令</strong></h3><blockquote><p>AT指令集是从终端设备（Terminal Equipment，TE)或数据终端设备（Data TerminalEquipment，DTE)向终端适配器(Terminal Adapter，TA)或数据电路终端设备(Data CircuitTerminal Equipment，DCE)发送的。</p><p>其对所传输的数据包大小有定义：即对于AT指令的发送，除AT两个字符外，最多可以接收1056个字符的长度（包括最后的空字符）。</p><p>每个AT命令行中只能包含一条AT指令；对于由终端设备主动向PC端报告的URC指示或者response响应，也要求一行最多有一个，不允许上报的一行中有多条指示或者响应。AT指令以回车作为结尾，响应或上报以回车换行为结尾。</p></blockquote><blockquote><p>ESP-01s<code>出厂波特率</code>正常是115200, 注意：AT指令，控制类都要加回车，数据传输时不加回车</p></blockquote><ul><li>上电后，通过串口输出一串系统开机信息，购买的部分模块可能电压不稳，导致乱码，以 ready 为 准</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">################################################ </span><br><span class="line">arch:ESP8266, 1 </span><br><span class="line">compile_time:Ai-Thinker|B&amp;T </span><br><span class="line">wifi_mac:4c75250dAE2F </span><br><span class="line">sdk_version:v3.4-22-g967752e2 </span><br><span class="line">firmware_version:2.2.0 </span><br><span class="line">compile_time:Jun 30 </span><br><span class="line">2021 11:28:20 ready </span><br><span class="line">################################################</span><br></pre></td></tr></table></figure><ul><li>上电后发送AT指令测试通信及模块功能是否正常</li></ul><blockquote><p>发送AT</p><p>返回OK 就没问题了</p></blockquote><ul><li>通过一下命令配置成9600波特率</li></ul><blockquote><p>AT+UART&#x3D;9600,8,1,0,0 </p></blockquote><h3 id="入网设置"><a href="#入网设置" class="headerlink" title="入网设置"></a><strong>入网设置</strong></h3><ul><li>设置工作模式</li></ul><blockquote><p>AT+CWMODE&#x3D;3 &#x2F;&#x2F;1. 是station（设备）模式 2.是AP（路由）模式 3.是双模</p><p>OK </p></blockquote><ul><li>以设备模式接入家中路由器配置</li></ul><blockquote><p>AT+CWJAP&#x3D;”wifi名字”,”wifi密码” &#x2F;&#x2F;指令    </p><p>WIFI CONNECTED &#x2F;&#x2F;结果 </p><p>WIFI GOT IP &#x2F;&#x2F;结果 </p></blockquote><blockquote><p>这里 连接wifi的时候 只能连接2.4G的wifi 5Gwifi不支持</p></blockquote><p>查询IP地址</p><blockquote><p>AT+CIFSR</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+CIFSR:APIP,&quot;192.168.4.1&quot;</span><br><span class="line">+CIFSR:APMAC,&quot;a6:e5:7c:1e:c5:96&quot;</span><br><span class="line">+CIFSR:STAIP,&quot;192.168.3.52&quot;</span><br><span class="line">+CIFSR:STAMAC,&quot;a4:e5:7c:1e:c5:96&quot;</span><br></pre></td></tr></table></figure><h3 id="连接到-TCP-server"><a href="#连接到-TCP-server" class="headerlink" title="连接到 TCP server"></a><strong>连接到</strong> <strong>TCP server</strong></h3><p>开关网络助手，设立TCP服务器</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704165833278.png" alt="image-20220704165833278"></p><blockquote><p> AT+CIPSTART&#x3D;”TCP”,”192.168.3.19”,1234</p><p>CONNECT &#x2F;&#x2F;结果：成功 </p><p>OK &#x2F;&#x2F;结果：成功</p></blockquote><h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><blockquote><p>AT+CIPSEND&#x3D;4 &#x2F;&#x2F; 设置即将发送数据的长度 （这里是4个字节） </p><p>&gt;CLCA &#x2F;&#x2F; 看到大于号后，输入消息，CLCA，不要带回车 </p><p>Response :SEND OK &#x2F;&#x2F;结果：成功 </p><p>&#x2F;&#x2F;注意，这种情况下，每次发送前都要先发送AT+CIPSEND&#x3D;长度 的指令，再发数据！</p></blockquote><h3 id="透传"><a href="#透传" class="headerlink" title="透传"></a><strong>透传</strong></h3><ul><li>未设置透传模式 每次发送数据都要进行字符长度设定，如果设置成透传，就有点像蓝牙模块的玩法</li></ul><p>在连接到socket服务后 </p><blockquote><p>AT+CIPMODE&#x3D;1 &#x2F;&#x2F;开启透传模式</p><p>Response :OK 返回</p></blockquote><blockquote><p>AT+CIPSEND &#x2F;&#x2F;带回车 </p><p>Response: &gt; </p></blockquote><p>退出透传模式</p><blockquote><p>&#x2F;&#x2F;在透传发送数据过程中，若识别到单独的⼀包数据 “+++”，则退出透传发送 </p></blockquote><h3 id="通过socket控制LED小灯"><a href="#通过socket控制LED小灯" class="headerlink" title="通过socket控制LED小灯"></a>通过socket控制LED小灯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;STRING.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit LED2 = P3 ^ <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">code <span class="type">char</span> LJWL[] = <span class="string">&quot;AT+CWJAP=\&quot;liuxu\&quot;,\&quot;liuxu123121\&quot;\r\n&quot;</span>; <span class="comment">//入网指令</span></span><br><span class="line">code <span class="type">char</span> LJFWQ[] = <span class="string">&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;192.168.3.19\&quot;,1234\r\n&quot;</span>;<span class="comment">//连接服务器</span></span><br><span class="line">code <span class="type">char</span> TCMS[] = <span class="string">&quot;AT+CIPMODE=1\r\n&quot;</span>; <span class="comment">//透传指令</span></span><br><span class="line">code <span class="type">char</span> FSSJ[] = <span class="string">&quot;AT+CIPSEND\r\n&quot;</span>; <span class="comment">//数据传输开始指令</span></span><br><span class="line">code <span class="type">char</span> RESET[] = <span class="string">&quot;AT+RST\r\n&quot;</span>; <span class="comment">//重启模块指令</span></span><br><span class="line"><span class="type">char</span> AT_OK_Flag = <span class="number">0</span>; <span class="comment">//OK返回值的标志位</span></span><br><span class="line"><span class="type">char</span> AT_Connect_Net_Flag = <span class="number">0</span>;<span class="comment">//WIFI GOT IP返回值的标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">16</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LED = <span class="number">1</span>;</span><br><span class="line">    LED2 = <span class="number">1</span>;</span><br><span class="line">    UartInit();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    SendString(LJWL);</span><br><span class="line">    <span class="keyword">while</span> (!AT_Connect_Net_Flag);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(LJFWQ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(TCMS);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(FSSJ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AT_Connect_Net_Flag)&#123;</span><br><span class="line">        LED = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (AT_OK_Flag)&#123;</span><br><span class="line">        LED2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">            Delay1000ms();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;W&#x27;</span> || tmp == <span class="string">&#x27;O&#x27;</span> || tmp == <span class="string">&#x27;L&#x27;</span> || tmp == <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp; <span class="comment">//入网成功的判断依据WIFI GOT IP</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; buffer[<span class="number">5</span>] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_Connect_Net_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//连接服务器等OK返回值指令的判断</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_OK_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//联网失败出现FAIL字样捕获</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                LED = <span class="number">0</span>;</span><br><span class="line">                Delay1000ms();</span><br><span class="line">                LED = <span class="number">1</span>;</span><br><span class="line">                Delay1000ms();</span><br><span class="line">            &#125;</span><br><span class="line">            SendString(RESET);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//灯控指令</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == SIZE)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704181105911.png"></p><h4 id="代码重点："><a href="#代码重点：" class="headerlink" title="代码重点："></a>代码重点：</h4><blockquote><p>当捕获到 </p><p>WIFI GOT IP</p><p>证明 联网成功 联网标志改为1 </p><p>当捕获到OK </p><p>证明指令执行成功  指令执行标志位 改为1 </p><p>当捕获到 F </p><p>证明指令执行错误 小灯闪烁5次 重启模块</p></blockquote><h3 id="ESP01模块作为路由器"><a href="#ESP01模块作为路由器" class="headerlink" title="ESP01模块作为路由器"></a>ESP01模块作为路由器</h3><p>USB转TTL插入电脑，TX–RX RX-TX VCC-3.3V GDN-GND</p><p>查询IP地址：AT+CIFSR</p><blockquote><p>&#x2F;&#x2F;1 配置成双模 </p><p>AT+CWMODE&#x3D;2 </p><p>Response :OK </p><p>&#x2F;&#x2F;2 使能多链接</p><p>AT+CIPMUX&#x3D;1 </p><p>Response :OK </p><p>&#x2F;&#x2F;3 建立TCPServer </p><p>AT+CIPSERVER&#x3D;1 &#x2F;&#x2F; default port &#x3D; 333 </p><p>Response :OK </p><hr><p>到这里 socket 服务器已经打开 连接地址为 espIP地址 端口 333 </p><p>向客户端发送信息</p><p>&#x2F;&#x2F;4 发送数据 </p><p>AT+CIPSEND&#x3D;0,4 &#x2F;&#x2F; 发送4个字节在连接0通道上 </p><p>&gt;abcd &#x2F;&#x2F;输入数据，不带回车 </p><p>Response :SEND OK </p><p>&#x2F;&#x2F;• 接收数据 </p><p>+IPD, 0, n: xxxxxxxxxx &#x2F;&#x2F;+IPD是固定字符串 0是通道，n是数据长度，xxx是数据 </p><p>&#x2F;&#x2F;断开连接 </p><p>AT+CIPCLOSE&#x3D;0 </p><p>Response :0, CLOSED OK </p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704223056856.png" alt="image-20220704223056856"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESP-01s工作在路由模式，查询路由器IP地址192.168.4.1，使用的服务器默认端口号333</span></span><br><span class="line"><span class="comment">// ESP-01s收到收到数据op/cl给上官一号，实现D6led的亮/灭</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 12</span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit D5 = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit D6 = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> buffer[SIZE];                  <span class="comment">// 1 工作在路由模式</span></span><br><span class="line"><span class="type">char</span> LYMO[] = <span class="string">&quot;AT+CWMODE=2\r\n&quot;</span>;    <span class="comment">// 2 使能多链接</span></span><br><span class="line"><span class="type">char</span> DLJ[] = <span class="string">&quot;AT+CIPMUX=1\r\n&quot;</span>;     <span class="comment">// 3 建立TCPServer</span></span><br><span class="line"><span class="type">char</span> JLFW[] = <span class="string">&quot;AT+CIPSERVER=1\r\n&quot;</span>; <span class="comment">// default port = 333</span></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="type">char</span> FSSJ[] = <span class="string">&quot;AT+CIPSEND=0,5\r\n&quot;</span>;</span><br><span class="line"><span class="type">char</span> AT_OK_Flag = <span class="number">0</span>;          <span class="comment">// OK返回值的标志位</span></span><br><span class="line"><span class="type">char</span> AT_Connect_Net_Flag = <span class="number">0</span>; <span class="comment">// WIFI GOT IP返回值的标志位</span></span><br><span class="line"><span class="type">char</span> Client_Connect_Flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mark = <span class="number">0</span>;</span><br><span class="line">    D5 = D6 = <span class="number">1</span>; <span class="comment">//灭状态灯 //配置C51串口的通信方式</span></span><br><span class="line">    UartInit();</span><br><span class="line">    Delay1000ms(); <span class="comment">//给espwifi模块上电时间</span></span><br><span class="line">    sendString(LYMO);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    sendString(DLJ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    sendString(JLFW);</span><br><span class="line">    <span class="keyword">while</span> (!Client_Connect_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (Client_Connect_Flag)</span><br><span class="line">    &#123;</span><br><span class="line">        D5 = <span class="number">0</span>; <span class="comment">//点亮D5,代表有客户端接入</span></span><br><span class="line">        D6 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123; <span class="comment">// 4 发送数据</span></span><br><span class="line">        sendString(FSSJ);</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        sendString(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Delay1000ms();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;W&#x27;</span> || tmp == <span class="string">&#x27;O&#x27;</span> || tmp == <span class="string">&#x27;L&#x27;</span> || tmp == <span class="string">&#x27;0&#x27;</span> || tmp == <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp; <span class="comment">//入网成功的判断依据WIFI GOT IP</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; buffer[<span class="number">5</span>] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_Connect_Net_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//连接服务器等OK返回值指令的判断</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_OK_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Client_Connect_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//灯控指令</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span>)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 蓝牙 </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机学习笔记四</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/30/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/30/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是串口"><a href="#什么是串口" class="headerlink" title="什么是串口"></a>什么是串口</h3><blockquote><p>串行接口简称串口，也称串行通信接口或串行通讯接口（通常指COM接口），是采用串行通信方</p><p>式的扩展接口。串行接口（Serial Interface）是指数据一位一位地顺序传送。其特点是通信线路简</p><p>单，只要一对传输线就可以实现双向通信（可以直接利用电话线作为传输线），从而大大降低了成</p><p>本，特别适用于远距离通信，但传送速度较慢</p></blockquote><ul><li>是设备间接线通信的一种方式</li><li>数据一位一位地顺序传送</li><li>双向通信，全双工</li><li>传送速度相对较慢</li></ul><h3 id="关于电器标准和协议"><a href="#关于电器标准和协议" class="headerlink" title="关于电器标准和协议"></a><strong>关于电器标准和协议</strong></h3><blockquote><p>串行接口按电气标准及协议来分包括RS-232-C、RS-422、RS485等。RS-232-C、RS-422与RS-485</p><p>标准只对接口的电气特性做出规定，不涉及接插件、电缆或协议。</p></blockquote><p>​也称标准串口，最常用的一种[串行通讯接口,比如我们的电脑主机的9针串口 ，最高速率为20kb&#x2F;sRS-232是为点对点（即只用一对收、发设备）通讯而设计的，其传送距离最大为约15米。所以RS-232适合本地设备之间的通信</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161405514.png" alt="image-20220630161405514"></p><h4 id="RS-422"><a href="#RS-422" class="headerlink" title="RS-422"></a>RS-422</h4><p>由于接收器采用高输入阻抗和发送驱动器比RS232更强的驱动能力，故允许在相同传输线上连接多个接收节点，最多可接10个节点。即一个主设备（Master），其余为从设备（Slave），从设备之间不能通信，所以RS-422支持点对多的双向通信。</p><p>RS-422的最大传输距离为1219米，最大传输速率为10Mb&#x2F;s。平衡双绞线的长度与传输速率成反比</p><h4 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485"></a>RS-485</h4><p>是从RS-422基础上发展而来的，无论四线还是二线连接方式总线上可多接到32个设备。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161450717.png" alt="image-20220630161450717"></p><h3 id="关于串口的电平"><a href="#关于串口的电平" class="headerlink" title="关于串口的电平"></a><strong>关于串口的电平</strong></h3><h4 id="经常听说的UART"><a href="#经常听说的UART" class="headerlink" title="经常听说的UART"></a>经常听说的UART</h4><blockquote><p>异步串行是指UART（Universal Asynchronous Receiver&#x2F;Transmitter），通用异步接收&#x2F;发送。</p><p>UART包含TTL电平的串口和RS232电平的串口</p></blockquote><h4 id="RS232电平"><a href="#RS232电平" class="headerlink" title="RS232电平"></a>RS232电平</h4><p>逻辑1为-3<del>-15V的电压, 逻辑0为3</del>15V的电压</p><ul><li>笔记本通过RS232电平和单片机通信</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161724673.png" alt="image-20220630161724673"></p><ul><li>TTL电平</li></ul><p>​TTL是Transistor-Transistor Logic，即晶体管-晶体管逻辑的简称，它是计算机处理器控制的设备内部各部分之间通信的标准技术。TTL电平信号应用广泛，是因为其数据表示采用二进制规定，</p><ul><li><p>+5V等价于逻辑”1”，0V等价于逻辑”0”。</p><p>数字电路中，由TTL电子元器件组成电路的电平是个电压范围，规定：</p></li><li><p>输出高电平&gt;&#x3D;2.4V，输出低电平&lt;&#x3D;0.4V；</p></li><li><p>输入高电平&gt;&#x3D;2.0V，输入低电平&lt;&#x3D;0.8V</p><ul><li><p>笔记本电脑通过TTL电平与单片机通信</p><p>TX发送线（端口）3.1</p><p>RX接收线 (端口）3.0</p></li></ul></li></ul><p>USB转TTL，使用ch340通信 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161942810.png" alt="image-20220630161942810"></p><ul><li><p>上官一号</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162811236.png" alt="image-20220630162811236"></p></li></ul><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><h3 id="串口接线方式"><a href="#串口接线方式" class="headerlink" title="串口接线方式"></a><strong>串口接线方式</strong></h3><ul><li><p>RXD：数据输入引脚，数据接受；STC89系列对应P3.0口，上官一号有单独引出</p></li><li><p>TXD：数据发送引脚，数据发送；STC89系列对应P3.1口，上官一号有单独引出</p></li><li><p>接线方式</p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162903062.png" alt="image-20220630162903062"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162907262.png" alt="image-20220630162907262"></p><p>印象塑造</p><ul><li><p>输入&#x2F;输出数据缓冲器都叫做<em><strong>SBUF</strong></em>, 都用99H地址码，但是是两个独立的8位寄存器 </p></li><li><p>代码体现为： 想要接收数据 <code>char data = SBUF</code> 想要发送数据<code>SBUF = data</code></p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630195523220.png" alt="image-20220630195523220"></p><ul><li>回忆UART是异步串行接口，通信双方使用时钟不同，因为双方硬件配置不同，但是需要约定通信速度，叫做<em><strong>波特率</strong></em></li></ul><p>对于电脑来说，别人做好了软件，鼠标点点点就能配置好，而苦逼单片机的波特率配置需要我们写代码</p><p>点点点配置什么，我们代码也要配置对应参数</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630195630843.png" alt="image-20220630195630843"></p><ul><li><p><strong>字符<code>&#39;a&#39;</code>是如何从单片机上传到PC的</strong></p><p>a的ASSII码是97，16进制就是0x61, 二进制是01010001，这个8位就是数据位</p><p>串口工作模式1，一帧数据有10位，起始位（0），数据位，停止位（1）</p><p>那么a的一帧数据就是  0 1000 1010 1 起始位，a的低位到高位，停止位</p></li><li><p>除了速度要求，还要有数据格式，双方<code>暗号</code>对上了再发数据，所以有<em><strong>起始位</strong></em>，和<em><strong>停止位</strong></em> 的概念</p></li></ul><h3 id="串口代码"><a href="#串口代码" class="headerlink" title="串口代码"></a>串口代码</h3><h4 id="发送一个字符"><a href="#发送一个字符" class="headerlink" title="发送一个字符"></a>发送一个字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">PCON &amp;= <span class="number">0x7F</span>;<span class="comment">//波特率不倍速</span></span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">AUXR &amp;= <span class="number">0xBF</span>;<span class="comment">//定时器时钟12T模式</span></span><br><span class="line">AUXR &amp;= <span class="number">0xFE</span>;<span class="comment">//串口1选择定时器1为波特率发生器</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;<span class="comment">//设置定时重载值</span></span><br><span class="line">ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器%d中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> data_msg = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SBUF = data_msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630214450155.png" alt="image-20220630214450155"></p><hr><h4 id="发送一个字符串"><a href="#发送一个字符串" class="headerlink" title="发送一个字符串"></a>发送一个字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">AUXR = <span class="number">0x01</span>;</span><br><span class="line">SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//9600波特率的初值</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//启动定时器</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//开启总中断</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>&#123;</span><br><span class="line">SBUF = data_msg; </span><br><span class="line"><span class="keyword">while</span> (!TI);</span><br><span class="line">TI = <span class="number">0</span> ; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sendByte(*str);</span><br><span class="line">str++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220701180259863.png" alt="image-20220701180259863"></p><hr><blockquote><p>代码中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!TI);</span><br><span class="line">TI = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>TI 是单片机串口发送中断的请求位：</p><ul><li>当 串行数据发送 结束时 TI&#x3D;1 </li><li>在发送过程中为 TI &#x3D; 0 ；</li></ul><p>所以 当在发送数据的时候 TI0 通过 while等待 直到数据全部写入完成</p><p>想要实现换行 使用\r\n 会使串口数据换行对齐</p></blockquote><hr><h4 id="PC发送数据-控制开发板的小灯"><a href="#PC发送数据-控制开发板的小灯" class="headerlink" title="PC发送数据 控制开发板的小灯"></a>PC发送数据 控制开发板的小灯</h4><p>当RI &#x3D; 1 的时候 单片机就知道 串口 有数据来了 </p><blockquote><p>这里需要和发送请求为TI做区分</p><p>接收完数据后需要软件将RI接受位 置0 </p></blockquote><h5 id="非中断方式-判断串口数据接受位"><a href="#非中断方式-判断串口数据接受位" class="headerlink" title="非中断方式 判断串口数据接受位"></a>非中断方式 判断串口数据接受位</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3^<span class="number">6</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">AUXR = <span class="number">0x01</span>;</span><br><span class="line">SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//9600波特率的初值</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//启动定时器</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//开启总中断</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>&#123;</span><br><span class="line">SBUF = data_msg; </span><br><span class="line"><span class="keyword">while</span> (!TI);</span><br><span class="line">TI = <span class="number">0</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sendByte(*str);</span><br><span class="line">str++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> cmd;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(RI == <span class="number">1</span>)&#123;</span><br><span class="line">           cmd = SBUF;</span><br><span class="line">           <span class="keyword">if</span> (cmd == <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">                LED = <span class="number">0</span> ; </span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">            LED = <span class="number">1</span>; </span><br><span class="line">           &#125;</span><br><span class="line">           RI =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h5><blockquote><p>中断号为 4  需要开启总中断 使EA &#x3D; 1 开启串口中断 ES &#x3D; 1 </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">128</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span> ; </span><br><span class="line">    <span class="keyword">if</span> (RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>;</span><br><span class="line">        cmd[i] = SBUF;</span><br><span class="line">        i++; </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span> </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="处理-单词命令"><a href="#处理-单词命令" class="headerlink" title="处理 单词命令"></a>处理 单词命令</h5><blockquote><p>头文件string.h  处理字符串 详见[<a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html">C 标准库 –  | 菜鸟教程 (runoob.com)</a>]:</p><p>用到的api </p><p>strstr(参数1,参数2) </p><ul><li>参数1 需要在那个字符串中查找</li><li>参数2 要查找的字符串</li></ul><p>memset(参数1，参数2，参数3)</p><ul><li>参数1 要初始化的字符串数组或指针</li><li>参数2 要初始化为什么字符 </li><li>参数3 该字符串的大小 根据数组大小或者指针大小而定</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;STRING.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">16</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LED = <span class="number">0</span> ; </span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span> ; </span><br><span class="line">    <span class="keyword">if</span> (RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>;</span><br><span class="line">        cmd[i] = SBUF; <span class="comment">//将SBUF的第一位放到cmd[0]</span></span><br><span class="line">        i++;  <span class="comment">// 向后累加 </span></span><br><span class="line">        <span class="keyword">if</span> (i == SIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span> ;<span class="comment">//指向头部</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmd,<span class="string">&quot;en&quot;</span>)) <span class="comment">// open </span></span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>;</span><br><span class="line">            i= <span class="number">0</span> ; </span><br><span class="line">            <span class="built_in">memset</span>(cmd,<span class="string">&#x27;\0&#x27;</span>,SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmd,<span class="string">&quot;se&quot;</span>)) <span class="comment">//close</span></span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>;</span><br><span class="line">            i = <span class="number">0</span> ;</span><br><span class="line">            <span class="built_in">memset</span>(cmd,<span class="string">&#x27;\0&#x27;</span>,SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 串口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记三</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/29/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/29/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比，例如方波的占空比就是50%.</p></blockquote><ul><li><p>脉冲宽度调制</p></li><li><p>通过占空比编码模拟信号</p></li><li><p>占空比<code>一个周期内，高电平占据时长的百分比</code></p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291643223.png" alt="image-20220629164300217"></p><h3 id="如何实现PWM信号输出"><a href="#如何实现PWM信号输出" class="headerlink" title="如何实现PWM信号输出"></a><strong>如何实现<strong><strong>PWM</strong></strong>信号输出</strong></h3><ol><li>通过芯片内部模块输出，一般观察手册或者芯片IO口都会标明这个是否是PWM口</li></ol><p>如下图增强51，STC15w的CPU</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126615.png" alt="image-20220629164320716"></p><p> 2.如果没有集成PWM功能，可以通过IO口软件模拟，相对硬件PWM来说精准度略差</p><h2 id="控制舵机"><a href="#控制舵机" class="headerlink" title="控制舵机"></a><strong>控制舵机</strong></h2><h4 id="1-什么是舵机"><a href="#1-什么是舵机" class="headerlink" title="1.什么是舵机"></a>1.什么是舵机</h4><p>如下图所示，最便宜的舵机sg90，常用三根或者四根接线，黄色为PWM信号控制</p><p>用处：垃圾桶项目开盖用、智能小车的全比例转向、摄像头云台、机械臂等</p><p>常见的有0-90°、0-180°、0-360</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126617.png" alt="image-20220629164456069"></p><h4 id="2-怎么控制舵机"><a href="#2-怎么控制舵机" class="headerlink" title="2.怎么控制舵机"></a>2.怎么控制舵机</h4><p>向黄色信号线“灌入”PWM信号。</p><p>PWM波的频率不能太高，大约50HZ，即周期&#x3D;1&#x2F;频率&#x3D;1&#x2F;50&#x3D;0.02s，20ms左右</p><p>数据：</p><p>0.5ms————-0度； 2.5% 对应函数中占空比为250</p><p>1.0ms————45度； 5.0% 对应函数中占空比为500</p><p>1.5ms————90度； 7.5% 对应函数中占空比为750</p><p>2.0ms———–135度； 10.0% 对应函数中占空比为1000</p><p>2.5ms———–180度； 12.5% 对应函数中占空比为1250</p><p>定时器需要定时20ms, 关心的单位0.5ms, 40个的0.5ms,初值0.5m cnt++</p><p>1s &#x3D; 10ms * 100</p><p>20ms &#x3D; 0.5ms * 40</p><ol start="3"><li>编程实现</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126618.png" alt="image-20220629164514379"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//计数变量</span></span><br><span class="line">sbit sg90_con = P1^<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span> jd; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay2000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">15</span>;</span><br><span class="line">j = <span class="number">2</span>;</span><br><span class="line">k = <span class="number">235</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">time1init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    TMOD = <span class="number">0x01</span>; <span class="comment">// 模式配置 16</span></span><br><span class="line">    TL0 = <span class="number">0x33</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">    TR0 = <span class="number">1</span>; <span class="comment">// 开始计时</span></span><br><span class="line">    ET0 = <span class="number">1</span>;</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay300ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">j = <span class="number">26</span>;</span><br><span class="line">k = <span class="number">223</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay300ms();</span><br><span class="line">    time1init();</span><br><span class="line">    jd =<span class="number">1</span> ; </span><br><span class="line">    sg90_con = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        jd = <span class="number">4</span> ;</span><br><span class="line">        cnt = <span class="number">0</span> ;  </span><br><span class="line">        Delay2000ms();</span><br><span class="line">        jd = <span class="number">1</span> ; </span><br><span class="line">        cnt = <span class="number">0</span> ; </span><br><span class="line">        Delay2000ms();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">time0Handler</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    cnt++;      <span class="comment">// 计数自加</span></span><br><span class="line">    TL0 = <span class="number">0x33</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; jd )</span><br><span class="line">    &#123;</span><br><span class="line">        sg90_con = <span class="number">1</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sg90_con = <span class="number">0</span> ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">40</span>)</span><br><span class="line">    &#123; <span class="comment">// 计数40次 等于 5ms乘以50 等于0.20秒</span></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">      sg90_con =<span class="number">1</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超声波测距"><a href="#超声波测距" class="headerlink" title="超声波测距"></a>超声波测距</h2><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a><strong>简介</strong></h4><p>型号：HC-SR04</p><p>接线参考：模块除了两个电源引脚外，还有TRIG，ECHO引脚，这两个引脚分别接我们开发板的P1.5和</p><p>P1.6端</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291811453.png" alt="image-20220629181110841"></p><blockquote><p>超声波测距模块是用来测量距离的一种产品，通过发送和收超声波，利用时间差和声音传播速度，</p><p>计算出模块到前方障碍物的距离。</p></blockquote><ul><li>怎么让它发送波</li></ul><p>​Trig ，给Trig端口至少10us的高电平</p><ul><li>怎么知道它开始发了</li></ul><p>​Echo信号，由低电平跳转到高电平，表示开始发送波</p><ul><li>怎么知道接收了返回波</li></ul><p>​Echo，由高电平跳转回低电平，表示波回来了</p><ul><li>怎么算时间</li></ul><p>​Echo引脚维持高电平的时间！</p><p>​波发出去的那一下，开始启动定时器</p><p>​波回来的拿一下，我们开始停止定时器，计算出中间经过多少时间</p><ul><li>怎么算距离</li></ul><p>​距离 &#x3D; 速度 （340m&#x2F;s）* 时间&#x2F;2</p><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126619.png" alt="image-20220629181318917"></p><p>​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//距离小于10cm,D5亮，D6灭，反之相反现象</span></span><br><span class="line"></span><br><span class="line">sbit D5 = P3^<span class="number">7</span>;<span class="comment">//根据原理图（电路图），设备变量led1指向P3组IO口的第7口</span></span><br><span class="line">sbit D6 = P3^<span class="number">6</span>;<span class="comment">//根据原理图（电路图），设备变量led2指向P3组IO口的第6口</span></span><br><span class="line">sbit Trig = P1^<span class="number">5</span>;</span><br><span class="line">sbit Echo = P1^<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay10us</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;</span><br><span class="line">TH0 = <span class="number">0</span>;</span><br><span class="line">TL0 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//设置定时器0工作模式1，初始值设定0开始数数，不着急启动定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十进制2左移1位，变成20。相当于乘以10</span></span><br><span class="line"><span class="comment">二禁止1左移1位，变成10（2）。相当于乘以2，左移8位，乘以2的8次方=256；*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">startHC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Trig = <span class="number">0</span>;</span><br><span class="line">Trig = <span class="number">1</span>;</span><br><span class="line">Delay10us();</span><br><span class="line">Trig = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> time;</span><br><span class="line"><span class="type">double</span> dis;</span><br><span class="line"></span><br><span class="line">Time0Init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//1. Trig ，给Trig端口至少10us的高电平</span></span><br><span class="line">startHC();</span><br><span class="line"><span class="comment">//2. echo由低电平跳转到高电平，表示开始发送波</span></span><br><span class="line"><span class="keyword">while</span>(Echo == <span class="number">0</span>);</span><br><span class="line"><span class="comment">//波发出去的那一下，开始启动定时器</span></span><br><span class="line">TR0 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//3. 由高电平跳转回低电平，表示波回来了</span></span><br><span class="line"><span class="keyword">while</span>(Echo == <span class="number">1</span>);</span><br><span class="line"><span class="comment">//波回来的那一下，我们开始停止定时器</span></span><br><span class="line">TR0 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//4. 计算出中间经过多少时间</span></span><br><span class="line">time = (TH0 * <span class="number">256</span> + TL0)*<span class="number">1.085</span>;<span class="comment">//us为单位</span></span><br><span class="line"><span class="comment">//5. 距离 = 速度 （340m/s）* 时间/2</span></span><br><span class="line">dis = time * <span class="number">0.017</span>;</span><br><span class="line"><span class="keyword">if</span>(dis &lt; <span class="number">10</span>)&#123;</span><br><span class="line">D5 = <span class="number">0</span>;</span><br><span class="line">D6 = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">D5 = <span class="number">1</span>;</span><br><span class="line">D6 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器数据清零，以便下一次测距</span></span><br><span class="line">TH0 = <span class="number">0</span>;</span><br><span class="line">TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记二</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><blockquote><p>C51中的定时器和计数器是同一个硬件电路支持的，通过寄存器配置不同，就可以将他当做定时器或者计数器使用。</p><p>确切的说，定时器和计数器区别是致使他们背后的计数存储器加1的信号不同。当配置为定时器使用时，每经过1个机器周期，计数存储器的值就加1。而当配置为计数器时，每来一个负跳变信号(信号从P3.4 或者P3.5引脚输入)，就加1，以此达到计数的目的。</p><p>标准C51有2个定时器&#x2F;计数器：T0和T1。他们的使用方法一致。C52相比C51多了一个T2</p></blockquote><ul><li><p>定时器和计数器，电路一样</p></li><li><p>定时或者计数的本质就是让单片机某个部件数数</p></li><li><p>当定时器用的时候，靠内部震荡电路数数</p></li><li><p>当计数器用的时候，数外面的信号，读取针脚的数据</p></li></ul><h3 id="定时器怎么定时"><a href="#定时器怎么定时" class="headerlink" title="定时器怎么定时"></a>定时器怎么定时</h3><p>定时器的本质原理： 每经过一个机器周期，就加1 :寄存器</p><p>思考：</p><ul><li><h4 id="什么是晶振"><a href="#什么是晶振" class="headerlink" title="什么是晶振"></a>什么是晶振</h4></li></ul><blockquote><p>晶振(晶体震荡器)，又称数字电路的“心脏”，是各种电子产品里面必不可少的频率元器件。数字电路的所有工作都离不开时钟，晶振的好坏、晶振电路设计的好坏，会影响到整个系统的稳定性。</p></blockquote><ul><li><h4 id="什么是时钟周期"><a href="#什么是时钟周期" class="headerlink" title="什么是时钟周期"></a>什么是时钟周期</h4></li></ul><blockquote><p>时钟周期也称为<a href="https://baike.baidu.com/item/%E6%8C%AF%E8%8D%A1%E5%91%A8%E6%9C%9F/10063375">振荡周期</a>，定义为<a href="https://baike.baidu.com/item/%E6%97%B6%E9%92%9F%E9%A2%91%E7%8E%87/103708">时钟频率</a>的<a href="https://baike.baidu.com/item/%E5%80%92%E6%95%B0/4793">倒数</a>。时钟周期是计算机中最基本的、最小的<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D/3078999">时间单位</a>。在一个时钟周期内，CPU仅完成一个最基本的动作。时钟周期是一个时间的量。更小的时钟周期就意味着更高的工作频率</p></blockquote><ul><li><h4 id="什么是机器周期"><a href="#什么是机器周期" class="headerlink" title="什么是机器周期"></a>什么是机器周期</h4></li></ul><blockquote><p>机器周期也称为CPU周期。在计算机中，为了便于管理，常把一条指令的执行过程划分为若干个阶段（如取指、译码、执行等），每一阶段完成一个基本操作。完成一个基本操作所需要的时间称为机器周期。一般情况下，一个机器周期由若干个时钟周期组成</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282003556.png" alt="image-20220628200312346"></p><ul><li><h4 id="加1经过了多少时间"><a href="#加1经过了多少时间" class="headerlink" title="加1经过了多少时间"></a>加1经过了多少时间</h4></li></ul><p>当晶振频率是11.0592MHz的时候，等于11059.2KHz &#x3D; 11059200Hz</p><p>机器周期 &#x3D; 12 x 时钟周期 &#x3D;12 x  (1&#x2F;时钟频率)  秒 &#x3D; 12 &#x2F; 时钟频率 秒 &#x3D; 12 &#x2F; 11059200 秒 &#x3D; 12 000 000 &#x2F; 11059200  微秒 &#x3D; 1.085 微秒</p><h3 id="计时器编程"><a href="#计时器编程" class="headerlink" title="计时器编程"></a>计时器编程</h3><p>相关寄存器：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282034622.png" alt="image-20220628202445758"></p><ul><li><p>在哪里加1，最大计数时间，也就是爆表了能计算多长</p></li><li><p>在TH0&#x2F;1和TL0&#x2F;1寄存器中加1，默认是从0开始数数，最多能数65536下，累计计时71ms如何算出10ms定时器的初值</p><p> 就不让他从0开始数数，10ms需要数9216下，你让他从65536-9126&#x3D;56320（16进制表示为0xDC00）开始数数</p></li></ul><p>​这样TL0&#x3D;0x00；TH0&#x3D;0xDC</p><p>关于TCON</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282034623.png" alt="image-20220628202453306"></p><ul><li><p>怎么知道爆表</p><p>TCON寄存器的bit5（TF0）能表示爆表：当爆表的时候，硬件会修改bit5(TF0)位上面的数据，改成1（置1），如果不用中断，我们代码清零</p></li></ul><ul><li><p>怎么开始计时</p><p>TCON寄存器的bit4，通过编程让这个位为1的时候，开始计时，相当于按下了闹钟</p></li></ul><ul><li><p>定时器使用是有很多种模式的</p><p>定时器模式寄存器：TMOD来选择定时器模式，选择工作方式1，TMOD的bit0 bit1配置成0 1 ：16</p><p>的定时器功能</p></li><li><p>四个二进制数表示一位的16进制数</p></li><li><p>8421法进制的转换（方便人类来看，对计算机底层来说，不关心进制010101010）</p></li><li><p>配寄存器推荐用按位操作，清零的时候，对应的需要清零的位与上0，不需要清零的位与上1 </p></li><li><p>置1的时候，需要置1的位置或1，不需要置一的位置或0</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line">sbit led = P3^<span class="number">7</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span> ; <span class="comment">//计数变量</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>; <span class="comment">// 模式配置 16 </span></span><br><span class="line">    TL0 = <span class="number">0x00</span>;  <span class="comment">// 初始值设置 10ms</span></span><br><span class="line">    TH0 = <span class="number">0xDC</span>; </span><br><span class="line">    TR0 = <span class="number">1</span> ;  <span class="comment">// 开始计时 </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TF0 == <span class="number">1</span> ) <span class="comment">// 10ms 计数一次</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++ ;  <span class="comment">// 计数自加</span></span><br><span class="line">            TF0 = <span class="number">0</span>; <span class="comment">// 手动归零</span></span><br><span class="line">            TL0 = <span class="number">0x00</span>; <span class="comment">// 初始值复位</span></span><br><span class="line">            TH0 = <span class="number">0xDC</span>; </span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">50</span>)&#123; <span class="comment">// 计数50次 等于 10ms乘以50 等于 0.5秒</span></span><br><span class="line">                cnt = <span class="number">0</span> ; </span><br><span class="line">                led = !led ; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器中断方式控制"><a href="#定时器中断方式控制" class="headerlink" title="定时器中断方式控制"></a><strong>定时器中断方式控制</strong></h3><ul><li>中断寄存器</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705224922316.png" alt="image-20220705224922316"></p><p>CPU能响应定时器0中断的条件：需要配置IE寄存器的bit1: ET0  bit7:EA</p><ol><li>ET0中断允许要置一   ET0 &#x3D; 1</li><li>EA总中断要置一         EA &#x3D; 1</li></ol><p>硬件内部设计逻辑如下图：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705224935060.png" alt="image-20220705224935060"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************* *********定时器中断控制LED每隔1秒亮灭一次******************** *****main中控制另外一个灯每个300ms亮灭一次，有点多线程的意思了*** </span></span><br><span class="line"><span class="comment">*******************************************************/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line">sbit led = P3^<span class="number">6</span>; </span><br><span class="line">sbit led1 = P3^<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="comment">//1. 配置定时器0工作模式位16位计时 </span></span><br><span class="line">    TMOD = <span class="number">0x01</span>; </span><br><span class="line">    <span class="comment">//2. 给初值，定一个10ms出来 </span></span><br><span class="line">    TL0=<span class="number">0x00</span>; </span><br><span class="line">    TH0=<span class="number">0xDC</span>; </span><br><span class="line">    <span class="comment">//3. 开始计时，定时器&quot;数数&quot; </span></span><br><span class="line">    TR0 = <span class="number">1</span>; </span><br><span class="line">    TF0 = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">//4. 打开定时器0中断 </span></span><br><span class="line">    ET0 = <span class="number">1</span>; </span><br><span class="line">    <span class="comment">//5. 打开总中断EA </span></span><br><span class="line">    EA = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay300ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz 软件延时，CPU“数数” </span></span><br><span class="line">&#123; <span class="type">unsigned</span> <span class="type">char</span> i, j, k; </span><br><span class="line"> i = <span class="number">3</span>; </span><br><span class="line"> j = <span class="number">26</span>; </span><br><span class="line"> k = <span class="number">223</span>; </span><br><span class="line"> <span class="keyword">do</span>&#123; </span><br><span class="line">     <span class="keyword">do</span>&#123; </span><br><span class="line">         <span class="keyword">while</span> (--k); </span><br><span class="line">     &#125; <span class="keyword">while</span> (--j); </span><br><span class="line"> &#125; <span class="keyword">while</span> (--i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line">    led = <span class="number">1</span>; </span><br><span class="line">    Time0Init(); </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123; </span><br><span class="line">        led1 = <span class="number">0</span>; </span><br><span class="line">        Delay300ms(); </span><br><span class="line">        led1 = <span class="number">1</span>;</span><br><span class="line">        Delay300ms(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Handler</span><span class="params">()</span> interrupt 1 &#123; </span><br><span class="line">    cnt++; <span class="comment">//统计爆表的次数 </span></span><br><span class="line">    <span class="comment">//重新给初值 </span></span><br><span class="line">    TL0=<span class="number">0x00</span>; </span><br><span class="line">    TH0=<span class="number">0xDC</span>; </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">100</span>)&#123;<span class="comment">//爆表100次，经过了1s </span></span><br><span class="line">        cnt = <span class="number">0</span>; <span class="comment">//当100次表示1s，重新让cnt从0开始，计算下一次的1s </span></span><br><span class="line">        led = !led;<span class="comment">//每经过1s，翻转led的状态 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记一</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/28/C51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机学习笔记"><a href="#51单片机学习笔记" class="headerlink" title="51单片机学习笔记"></a>51单片机学习笔记</h1><h2 id="1-1开发环境搭建与单片机相关知识扫盲"><a href="#1-1开发环境搭建与单片机相关知识扫盲" class="headerlink" title="1.1开发环境搭建与单片机相关知识扫盲"></a>1.1开发环境搭建与单片机相关知识扫盲</h2><h3 id="什么是单片机"><a href="#什么是单片机" class="headerlink" title="什么是单片机"></a>什么是单片机</h3><ul><li>什么是单片机</li></ul><blockquote><p>单片机（Single-Chip Microcomputer）是一种<a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E8%8A%AF%E7%89%87/4872662">集成电路芯片</a>，</p><p>把具有数据处理能力的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/284033">中央处理器</a>CPU、随机存储器<a href="https://baike.baidu.com/item/RAM/144481">RAM</a>、<a href="https://baike.baidu.com/item/%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8/2399075">只读存储器</a>ROM、</p><p>多种I&#x2F;O口和中断系统、定时器&#x2F;计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、<a href="https://baike.baidu.com/item/A%2FD%E8%BD%AC%E6%8D%A2%E5%99%A8/4883848">A&#x2F;D转换器</a>等电路）</p><p>集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。</p></blockquote><ul><li>什么是单片机开发板</li></ul><blockquote><p>基于单片机设计一些外接电路，模块以满足学习，日常调研等工作需求</p><p>STC89系列单片机</p><p>命名规则，封装LQFP44, 特性 定时器，计数器，串口，看门狗，IO</p></blockquote><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>keil</li></ul><blockquote><p>Keil C51是美国Keil Software公司出品的51系列兼容<a href="https://baike.baidu.com/item/%E5%8D%95%E7%89%87%E6%9C%BA/102396">单片机</a>C语言软件开发系统，与<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96/627224">汇编</a>相比，<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80/105958">C语言</a>在功能上、结构性、可读性、可维护性上有明显的优势，因而易学易用。</p></blockquote><ul><li>安装省略</li><li>使用<ol><li>创建项目工程文件夹，可以当作模板Template</li><li>创建文件，取名main.c   <em><strong>（要打开拓展名，在文件夹窗口上找 “查看”，勾选“文件拓展名”）</strong></em></li><li>进入keil主页面，工具栏project-&gt;new uVision project-&gt;选择第一步的工程文件夹位置-&gt;输入工程名字-&gt;选择芯片类型AT89c52-&gt;会提示是否拷贝STARTUP.A51,选择是-&gt;生成了工程目录-&gt;在工程目录Source Group1上右键鼠标-&gt;add Exiting file to Source Group1…-&gt;选择代码文件main.c</li></ol></li></ul><h3 id="如何将代码放入单片机"><a href="#如何将代码放入单片机" class="headerlink" title="如何将代码放入单片机"></a>如何将代码放入单片机</h3><blockquote><p>STC-ISP 是一款<a href="https://baike.baidu.com/item/%E5%8D%95%E7%89%87%E6%9C%BA/102396">单片机</a>下载编程<a href="https://baike.baidu.com/item/%E7%83%A7%E5%BD%95/7116522">烧录</a>软件，是针对<a href="https://baike.baidu.com/item/STC">STC</a>系列单片机而设计的，可下载STC89系列、12C2052系列和12C5410等系列的STC单片机，使用简便。</p></blockquote><ul><li>单片机通过type-C数据线和电脑连接（如果不识别，安装ch340驱动，在资料包中）</li><li>选择单片机型号STC89C52RC</li><li>选择生成的执行程序文件template.hex</li><li>点击”下载&#x2F;编程“按钮</li><li>单片机开关拨动重新上电</li><li>自动检测并下载了程序</li></ul><h2 id="1-2基本IO控制"><a href="#1-2基本IO控制" class="headerlink" title="1.2基本IO控制"></a>1.2基本IO控制</h2><p>以下是我使用的单片机开发板的电路图 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206281755289.png" alt="image-20220628175536031"></p><table><thead><tr><th>IO组</th><th>0针脚</th><th>1针脚</th><th>2针脚</th><th>3针脚</th><th>4针脚</th><th>5针脚</th><th>6针脚</th><th>7针脚</th><th>数值</th><th>输入&#x2F;输出</th><th>复用</th></tr></thead><tbody><tr><td>P0</td><td>P0^0</td><td>P0^1</td><td>P0^2</td><td>P0^3</td><td>P0^4</td><td>P0^5</td><td>P0^6</td><td>P0^7</td><td>0-低电平 1-高电平</td><td>给变量赋值，就是输出 被赋值，就是输入</td><td></td></tr><tr><td>P1</td><td>P1^1</td><td>P1^1</td><td>P1^2</td><td>P1^3</td><td>P1^4</td><td>P1^5</td><td>P1^6</td><td>P1^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P2</td><td>P2^0</td><td>P2^1</td><td>P2^2</td><td>P2^3</td><td>P2^4</td><td>P2^5</td><td>P2^6</td><td>P2^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P3</td><td>P3^0</td><td>P3^1</td><td>P3^2</td><td>P3^3</td><td>P3^4</td><td>P3^5</td><td>P3^6</td><td>P3^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P4</td><td>P4^0</td><td>P4^1</td><td>P4^2</td><td>P4^3</td><td>P4^4</td><td>P4^5</td><td>P4^6</td><td>无</td><td>同上</td><td>同上</td><td></td></tr></tbody></table><p>对于单片机来讲的，IO口的 输入（把外面东西拿回来）&#x2F;输出（给东西给外面）</p><p>89C52比较简单粗暴，关于引脚输入还是输出的功能不需要配置</p><p>比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sbit IFfire = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> io_data;</span><br><span class="line"><span class="comment">//什么情况叫做输入</span></span><br><span class="line">io_data = IFfire; <span class="comment">// 给变量赋值，就是输入  —— 或者理解为，这个针脚有数据啦，拿个变量来保存</span></span><br><span class="line">    <span class="keyword">if</span>(io_data == <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//什么情况叫做输出</span></span><br><span class="line">IFfire = <span class="number">1</span>; <span class="comment">// 被给予一个数值，引起IO口电压变化(一般1输出高电平，0输出低电平)，此时为输出，来影响外接的电路</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="按键控制灯"><a href="#按键控制灯" class="headerlink" title="按键控制灯"></a>按键控制灯</h3><p>原理：按键和灯不是我们传统理解的思维，传统按键和灯是在同一个电路中的。而我们单片机编程按键和灯是分开的两个电路，通过单片机作为媒介来处理数据，通过逻辑来实现按键控制灯</p><h3 id="查询法按键控制灯"><a href="#查询法按键控制灯" class="headerlink" title="查询法按键控制灯"></a>查询法按键控制灯</h3><ul><li><p>怎么知道sw1按键被按下</p><p>KEY1位置和GND接通，表现为低电平，值为0</p></li><li><p>怎么知道sw1按键没有被按下<br>KEY1位置通过上拉电阻到5V，表现为高电平，值为1</p></li><li><p>按键控制灯</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sbit key1   = P2^<span class="number">1</span>;</span><br><span class="line">sbit ledOne = P3^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//注意：用“==”两个等于号表示判断，新手容易犯错</span></span><br><span class="line">        <span class="keyword">if</span>(key1 == <span class="number">0</span>)&#123; <span class="comment">//KEY1位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">            <span class="comment">//灯亮，给一个P3.7低电平</span></span><br><span class="line">            ledOne = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按键控制灯，SW1开，SW2关，案例中只在SW1添加软件消抖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit key1   = P2^<span class="number">1</span>;</span><br><span class="line">sbit key2   = P2^<span class="number">0</span>;</span><br><span class="line">sbit ledOne = P3^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay50ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">j = <span class="number">26</span>;</span><br><span class="line">k = <span class="number">223</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查询法检测，是否被按下</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(key1 == <span class="number">0</span>)<span class="comment">//KEY1位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//感觉被按下，不知道是抖动还是人为，延迟50ms再判断一次</span></span><br><span class="line"><span class="comment">//软件消除抖动</span></span><br><span class="line">Delay50ms();</span><br><span class="line"><span class="keyword">if</span>(key1 == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//灯亮，给一个P3.7低电平</span></span><br><span class="line">ledOne = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(key2 == <span class="number">0</span>)&#123;<span class="comment">//KEY2位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">ledOne = <span class="number">1</span>;<span class="comment">//灭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象进阶</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><p>在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;_gender&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">22</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person._gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span></span><br><span class="line">    <span class="comment"># person._is_gay = True</span></span><br></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">a, b, c</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        <span class="built_in">print</span>(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        <span class="built_in">print</span>(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法构成三角形.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">now</span>(<span class="params">cls</span>):</span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>我们可以使用一种叫做<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读<a href="https://e.jd.com/30392949.html">《UML面向对象设计基础》</a>一书。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020030970.png"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020031440.png"></p><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;人&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_av</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看爱情动作片.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, grade</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self, grade</span>):</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, title</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self, title</span>):</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s%s正在讲%s.&#x27;</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;初三&#x27;</span>)</span><br><span class="line">    stu.study(<span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;菜鸟&#x27;</span>)</span><br><span class="line">    t.teach(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nickname</span>):</span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pets = [Dog(<span class="string">&#x27;旺财&#x27;</span>), Cat(<span class="string">&#x27;凯蒂&#x27;</span>), Dog(<span class="string">&#x27;大黄&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：奥特曼打小怪兽。"><a href="#案例1：奥特曼打小怪兽。" class="headerlink" title="案例1：奥特曼打小怪兽。"></a>案例1：奥特曼打小怪兽。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fighter</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;战斗者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过__slots__魔法限定对象可以绑定的成员变量</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, hp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 名字</span></span><br><span class="line"><span class="string">        :param hp: 生命值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._hp = hp</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._hp</span><br><span class="line"></span><br><span class="line"><span class="meta">    @hp.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hp</span>(<span class="params">self, hp</span>):</span><br><span class="line">        self._hp = hp <span class="keyword">if</span> hp &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">alive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._hp &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param other: 被攻击的对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ultraman</span>(<span class="title class_ inherited__">Fighter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;奥特曼&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>, <span class="string">&#x27;_mp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, hp, mp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 名字</span></span><br><span class="line"><span class="string">        :param hp: 生命值</span></span><br><span class="line"><span class="string">        :param mp: 魔法值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, hp)</span><br><span class="line">        self._mp = mp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        other.hp -= randint(<span class="number">15</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">huge_attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param other: 被攻击的对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 使用成功返回True否则返回False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._mp &gt;= <span class="number">50</span>:</span><br><span class="line">            self._mp -= <span class="number">50</span></span><br><span class="line">            injury = other.hp * <span class="number">3</span> // <span class="number">4</span></span><br><span class="line">            injury = injury <span class="keyword">if</span> injury &gt;= <span class="number">50</span> <span class="keyword">else</span> <span class="number">50</span></span><br><span class="line">            other.hp -= injury</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.attack(other)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magic_attack</span>(<span class="params">self, others</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;魔法攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param others: 被攻击的群体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 使用魔法成功返回True否则返回False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._mp &gt;= <span class="number">20</span>:</span><br><span class="line">            self._mp -= <span class="number">20</span></span><br><span class="line">            <span class="keyword">for</span> temp <span class="keyword">in</span> others:</span><br><span class="line">                <span class="keyword">if</span> temp.alive:</span><br><span class="line">                    temp.hp -= randint(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;</span></span><br><span class="line">        incr_point = randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        self._mp += incr_point</span><br><span class="line">        <span class="keyword">return</span> incr_point</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;~~~%s奥特曼~~~\n&#x27;</span> % self._name + \</span><br><span class="line">            <span class="string">&#x27;生命值: %d\n&#x27;</span> % self._hp + \</span><br><span class="line">            <span class="string">&#x27;魔法值: %d\n&#x27;</span> % self._mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span>(<span class="title class_ inherited__">Fighter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;小怪兽&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        other.hp -= randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;~~~%s小怪兽~~~\n&#x27;</span> % self._name + \</span><br><span class="line">            <span class="string">&#x27;生命值: %d\n&#x27;</span> % self._hp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_any_alive</span>(<span class="params">monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> monster <span class="keyword">in</span> monsters:</span><br><span class="line">        <span class="keyword">if</span> monster.alive &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_alive_one</span>(<span class="params">monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;</span></span><br><span class="line">    monsters_len = <span class="built_in">len</span>(monsters)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        index = randrange(monsters_len)</span><br><span class="line">        monster = monsters[index]</span><br><span class="line">        <span class="keyword">if</span> monster.alive &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> monster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_info</span>(<span class="params">ultraman, monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(ultraman)</span><br><span class="line">    <span class="keyword">for</span> monster <span class="keyword">in</span> monsters:</span><br><span class="line">        <span class="built_in">print</span>(monster, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    u = Ultraman(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">1000</span>, <span class="number">120</span>)</span><br><span class="line">    m1 = Monster(<span class="string">&#x27;狄仁杰&#x27;</span>, <span class="number">250</span>)</span><br><span class="line">    m2 = Monster(<span class="string">&#x27;白元芳&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">    m3 = Monster(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">750</span>)</span><br><span class="line">    ms = [m1, m2, m3]</span><br><span class="line">    fight_round = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> u.alive <span class="keyword">and</span> is_any_alive(ms):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;========第%02d回合========&#x27;</span> % fight_round)</span><br><span class="line">        m = select_alive_one(ms)  <span class="comment"># 选中一只小怪兽</span></span><br><span class="line">        skill = randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 通过随机数选择使用哪种技能</span></span><br><span class="line">        <span class="keyword">if</span> skill &lt;= <span class="number">6</span>:  <span class="comment"># 60%的概率使用普通攻击</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">            u.attack(m)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))</span><br><span class="line">        <span class="keyword">elif</span> skill &lt;= <span class="number">9</span>:  <span class="comment"># 30%的概率使用魔法攻击(可能因魔法值不足而失败)</span></span><br><span class="line">            <span class="keyword">if</span> u.magic_attack(ms):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用了魔法攻击.&#x27;</span> % u.name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用魔法失败.&#x27;</span> % u.name)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)</span></span><br><span class="line">            <span class="keyword">if</span> u.huge_attack(m):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用究极必杀技虐了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))</span><br><span class="line">        <span class="keyword">if</span> m.alive &gt; <span class="number">0</span>:  <span class="comment"># 如果选中的小怪兽没有死就回击奥特曼</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s回击了%s.&#x27;</span> % (m.name, u.name))</span><br><span class="line">            m.attack(u)</span><br><span class="line">        display_info(u, ms)  <span class="comment"># 每个回合结束后显示奥特曼和小怪兽的信息</span></span><br><span class="line">        fight_round += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n========战斗结束!========\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> u.alive &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s奥特曼胜利!&#x27;</span> % u.name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小怪兽胜利!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="案例2：扑克游戏。"><a href="#案例2：扑克游戏。" class="headerlink" title="案例2：扑克游戏。"></a>案例2：扑克游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一张牌&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, suite, face</span>):</span><br><span class="line">        self._suite = suite</span><br><span class="line">        self._face = face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">face</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suite</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._suite</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._face == <span class="number">1</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">11</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;J&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">12</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">13</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;K&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            face_str = <span class="built_in">str</span>(self._face)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (self._suite, face_str)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一副牌&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._cards = [Card(suite, face) </span><br><span class="line">                       <span class="keyword">for</span> suite <span class="keyword">in</span> <span class="string">&#x27;♠♥♣♦&#x27;</span></span><br><span class="line">                       <span class="keyword">for</span> face <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cards</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._cards</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;</span></span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line">        random.shuffle(self._cards)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span></span><br><span class="line">        card = self._cards[self._current]</span><br><span class="line">        self._current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;还有没有牌&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._current &lt; <span class="built_in">len</span>(self._cards)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._cards_on_hand = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cards_on_hand</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._cards_on_hand</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, card</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.append(card)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrange</span>(<span class="params">self, card_key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.sort(key=card_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序规则-先根据花色再根据点数排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">card</span>):</span><br><span class="line">    <span class="keyword">return</span> (card.suite, card.face)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = Poker()</span><br><span class="line">    p.shuffle()</span><br><span class="line">    players = [Player(<span class="string">&#x27;东邪&#x27;</span>), Player(<span class="string">&#x27;西毒&#x27;</span>), Player(<span class="string">&#x27;南帝&#x27;</span>), Player(<span class="string">&#x27;北丐&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">            player.get(p.<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        <span class="built_in">print</span>(player.name + <span class="string">&#x27;:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        player.arrange(get_key)</span><br><span class="line">        <span class="built_in">print</span>(player.cards_on_hand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统。"><a href="#案例3：工资结算系统。" class="headerlink" title="案例3：工资结算系统。"></a>案例3：工资结算系统。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">某公司有三种类型的员工 分别是部门经理、程序员和销售员</span></span><br><span class="line"><span class="string">需要设计一个工资结算系统 根据提供的员工信息来计算月薪</span></span><br><span class="line"><span class="string">部门经理的月薪是每月固定15000元</span></span><br><span class="line"><span class="string">程序员的月薪按本月工作时间计算 每小时150元</span></span><br><span class="line"><span class="string">销售员的月薪是1200元的底薪加上销售额5%的提成</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 姓名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获得月薪</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 月薪</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15000.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Programmer</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, working_hour=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self._working_hour = working_hour</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">working_hour</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._working_hour</span><br><span class="line"></span><br><span class="line"><span class="meta">    @working_hour.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">working_hour</span>(<span class="params">self, working_hour</span>):</span><br><span class="line">        self._working_hour = working_hour <span class="keyword">if</span> working_hour &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">150.0</span> * self._working_hour</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesman</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sales=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self._sales = sales</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sales</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._sales</span><br><span class="line"></span><br><span class="line"><span class="meta">    @sales.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sales</span>(<span class="params">self, sales</span>):</span><br><span class="line">        self._sales = sales <span class="keyword">if</span> sales &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1200.0</span> + self._sales * <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    emps = [</span><br><span class="line">        Manager(<span class="string">&#x27;刘备&#x27;</span>), Programmer(<span class="string">&#x27;诸葛亮&#x27;</span>),</span><br><span class="line">        Manager(<span class="string">&#x27;曹操&#x27;</span>), Salesman(<span class="string">&#x27;荀彧&#x27;</span>),</span><br><span class="line">        Salesman(<span class="string">&#x27;吕布&#x27;</span>), Programmer(<span class="string">&#x27;张辽&#x27;</span>),</span><br><span class="line">        Programmer(<span class="string">&#x27;赵云&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(emp, Programmer):</span><br><span class="line">            emp.working_hour = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入%s本月工作时间: &#x27;</span> % emp.name))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(emp, Salesman):</span><br><span class="line">            emp.sales = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入%s本月销售额: &#x27;</span> % emp.name))</span><br><span class="line">        <span class="comment"># 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s本月工资为: ￥%s元&#x27;</span> %</span><br><span class="line">              (emp.name, emp.get_salary()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象基础</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/08.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程基础"><a href="#面向对象编程基础" class="headerlink" title="面向对象编程基础"></a>面向对象编程基础</h2><p>活在当下的程序员应该都听过&quot;面向对象编程&quot;一词，也经常有人问能不能用一句话解释下什么是&quot;面向对象编程&quot;，我们先来看看比较正式的说法。</p><p>&quot;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。&quot;</p><p>这样一说是不是更不明白了。所以我们还是看看更通俗易懂的说法，下面这段内容来自于<a href="https://www.zhihu.com/">知乎</a>。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012303252.png"></p><blockquote><p><strong>说明：</strong> 以上的内容来自于网络，不代表作者本人的观点和看法，与作者本人立场无关，相关责任不由作者承担。</p></blockquote><p>之前我们说过&quot;<strong>程序是指令的集合</strong>&quot;，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，&quot;每个人都应该学习编程&quot;这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA">软件危机</a>&quot;、&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>&quot;等一系列的概念开始在行业中出现。</p><p>当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的&quot;<a href="https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">银弹</a>&quot;，真正让软件开发者看到希望的是上世纪70年代诞生的<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的<a href="https://zh.wikipedia.org/wiki/Simula">Simula</a>语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。</p><blockquote><p><strong>说明：</strong> 当然面向对象也不是解决软件开发中所有问题的最后的“银弹”，所以今天的高级程序设计语言几乎都提供了对多种编程范式的支持，Python也不例外。</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012303253.png"></p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p></blockquote><h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><p>当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;思想品德&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="访问可见性问题"><a href="#访问可见性问题" class="headerlink" title="访问可见性问题"></a>访问可见性问题</h3><p>对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给<code>Student</code>对象绑定的<code>name</code>和<code>age</code>属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是&quot;<strong>We are all consenting adults here</strong>&quot;。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    <span class="built_in">print</span>(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻，关于这一点可以看看我的<a href="http://blog.csdn.net/jackfrued/article/details/79521404">《Python - 那些年我们踩过的那些坑》</a>文章中的讲解。</p><h3 id="面向对象的支柱"><a href="#面向对象的支柱" class="headerlink" title="面向对象的支柱"></a>面向对象的支柱</h3><p>面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是&quot;隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口&quot;。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：定义一个类描述数字时钟。"><a href="#练习1：定义一个类描述数字时钟。" class="headerlink" title="练习1：定义一个类描述数字时钟。"></a>练习1：定义一个类描述数字时钟。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param hour: 时</span></span><br><span class="line"><span class="string">        :param minute: 分</span></span><br><span class="line"><span class="string">        :param second: 秒</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"><a href="#练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。" class="headerlink" title="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"></a>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动到指定位置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 新的横坐标</span></span><br><span class="line"><span class="string">        &quot;param y: 新的纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动指定的增量</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param dx: 横坐标的增量</span></span><br><span class="line"><span class="string">        &quot;param dy: 纵坐标的增量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x += dx</span><br><span class="line">        self.y += dy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算与另一个点的距离</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param other: 另一个点</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dx = self.x - other.x</span><br><span class="line">        dy = self.y - other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s, %s)&#x27;</span> % (<span class="built_in">str</span>(self.x), <span class="built_in">str</span>(self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1 = Point(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    p2 = Point()</span><br><span class="line">    <span class="built_in">print</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    p2.move_by(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    <span class="built_in">print</span>(p1.distance_to(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 本章中的插图来自于Grady Booch等著作的<a href="https://item.jd.com/20476561918.html">《面向对象分析与设计》</a>一书，该书是讲解面向对象编程的经典著作，有兴趣的读者可以购买和阅读这本书来了解更多的面向对象的相关知识。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串和常用数据结构</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><p>第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作这些文本信息，就必须要先了解字符串类型以及与它相关的知识。</p><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，一般记为<img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301039.png" alt="$${\displaystyle s=a_{1}a_{2}\dots a_{n}(0\leq n \leq \infty)}$$">。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;hello, world!&quot;</span></span><br><span class="line"><span class="comment"># 以三个双引号或单引号开头的字符串可以折行</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello, </span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, s3, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。也可以在<code>\</code>后面跟Unicode字符编码来表示字符，例如<code>\u9a86\u660a</code>代表的是中文“小刘同学”。运行下面的代码，看看输出了什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\141\142\143\x61\x62\x63&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;\u9a86\u660a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2)</span><br></pre></td></tr></table></figure><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，再看看下面的代码又会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">r&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello &#x27;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">s1 += s2</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ll&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::-<span class="number">1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line"><span class="built_in">print</span>(str2[-<span class="number">3</span>:-<span class="number">1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br></pre></td></tr></table></figure><p>我们之前讲过，可以用下面的方式来格式化输出字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br></pre></td></tr></table></figure><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br></pre></td></tr></table></figure><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。</p><h3 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h3><p>不知道大家是否注意到，刚才我们讲到的字符串类型（<code>str</code>）和之前我们讲到的数值类型（<code>int</code>和<code>float</code>）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><p>下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 5, 7, 100]</span></span><br><span class="line"><span class="comment"># 乘号表示列表元素的重复</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># 计算列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 下标(索引)运算</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">4</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(list1[5])  # IndexError: list index out of range</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">3</span>]) <span class="comment"># 5</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 300, 7, 100]</span></span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><p>下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;waxberry&#x27;</span>]</span><br><span class="line">fruits += [<span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>]</span><br><span class="line"><span class="comment"># 列表切片</span></span><br><span class="line">fruits2 = fruits[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits2) <span class="comment"># apple strawberry waxberry</span></span><br><span class="line"><span class="comment"># 可以通过完整切片操作来复制列表</span></span><br><span class="line">fruits3 = fruits[:]</span><br><span class="line"><span class="built_in">print</span>(fruits3) <span class="comment"># [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, &#x27;pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line">fruits4 = fruits[-<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits4) <span class="comment"># [&#x27;pitaya&#x27;, &#x27;pear&#x27;]</span></span><br><span class="line"><span class="comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span></span><br><span class="line">fruits5 = fruits[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits5) <span class="comment"># [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure><p>下面的代码实现了对列表的排序操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;zoo&#x27;</span>, <span class="string">&#x27;internationalization&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line"><span class="comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span></span><br><span class="line"><span class="comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span></span><br><span class="line">list4 = <span class="built_in">sorted</span>(list1, key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br><span class="line"><span class="comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span></span><br><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h3><p>我们还可以使用列表的生成式语法来创建列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABCDE&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;1234567&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line"><span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line"><span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列</a>的生成器。所谓斐波拉切数列可以通过下面<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的方法来进行定义：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301040.png" alt="$${\displaystyle F_{0}=0}$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301041.png" alt="$${\displaystyle F_{1}=1}$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301042.png" alt="$${\displaystyle F_{n}=F_{n-1}+F_{n-2}}({n}\geq{2})$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301043.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">t = (<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">38</span>, <span class="literal">True</span>, <span class="string">&#x27;内蒙古&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 获取元组中的元素</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(member)</span><br><span class="line"><span class="comment"># 重新给元组赋值</span></span><br><span class="line"><span class="comment"># t[0] = &#x27;王大锤&#x27;  # TypeError</span></span><br><span class="line"><span class="comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span></span><br><span class="line">t = (<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">20</span>, <span class="literal">True</span>, <span class="string">&#x27;云南昆明&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">person = <span class="built_in">list</span>(t)</span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"><span class="comment"># 列表是可以修改它的元素的</span></span><br><span class="line">person[<span class="number">0</span>] = <span class="string">&#x27;李小龙&#x27;</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits_list = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">fruits_tuple = <span class="built_in">tuple</span>(fruits_list)</span><br><span class="line"><span class="built_in">print</span>(fruits_tuple)</span><br></pre></td></tr></table></figure><p>这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？</p><ol><li>元组中的元素是无法修改的，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</li><li>元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的macOS系统上测试的结果。</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301044.png"></p><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301045.png"></p><p>可以按照下面代码所示的方式来创建和使用集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合的字面量语法</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Length =&#x27;</span>, <span class="built_in">len</span>(set1))</span><br><span class="line"><span class="comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(set2, set3)</span><br><span class="line"><span class="comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set4)</span><br></pre></td></tr></table></figure><p>向集合添加元素和从集合删除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3.pop())</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br></pre></td></tr></table></figure><p>集合的成员、交集、并集、差集等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的交集、并集、差集、对称差运算</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)</span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)</span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)</span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)</span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line"><span class="comment"># 判断子集和超集</span></span><br><span class="line"><span class="built_in">print</span>(set2 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line"><span class="built_in">print</span>(set3 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set3.issubset(set1))</span></span><br><span class="line"><span class="built_in">print</span>(set1 &gt;= set2)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 &gt;= set3)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set3))</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如<code>&amp;</code>运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。</p></blockquote><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;小刘同学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;白元芳&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;狄仁杰&#x27;</span>: <span class="number">82</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="comment"># 创建字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 通过zip函数将两个序列压成字典</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(items1, items2, items3)</span><br><span class="line"><span class="comment"># 通过键可以获取字典中对应的值</span></span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;小刘同学&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;狄仁杰&#x27;</span>])</span><br><span class="line"><span class="comment"># 对字典中所有键值对进行遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">&#x27;白元芳&#x27;</span>] = <span class="number">65</span></span><br><span class="line">scores[<span class="string">&#x27;诸葛王朗&#x27;</span>] = <span class="number">71</span></span><br><span class="line">scores.update(冷面=<span class="number">67</span>, 方启鹤=<span class="number">85</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;武则天&#x27;</span> <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(scores[<span class="string">&#x27;武则天&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;武则天&#x27;</span>))</span><br><span class="line"><span class="comment"># get方法也是通过键获取对应的值但是可以设置默认值</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;武则天&#x27;</span>, <span class="number">60</span>))</span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line"><span class="built_in">print</span>(scores.popitem())</span><br><span class="line"><span class="built_in">print</span>(scores.popitem())</span><br><span class="line"><span class="built_in">print</span>(scores.pop(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">scores.clear()</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：在屏幕上显示跑马灯文字。"><a href="#练习1：在屏幕上显示跑马灯文字。" class="headerlink" title="练习1：在屏幕上显示跑马灯文字。"></a>练习1：在屏幕上显示跑马灯文字。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    content = <span class="string">&#x27;北京欢迎你为你开天辟地…………&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 清理屏幕上的输出</span></span><br><span class="line">        os.system(<span class="string">&#x27;cls&#x27;</span>)  <span class="comment"># os.system(&#x27;clear&#x27;)</span></span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="comment"># 休眠200毫秒</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:] + content[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"><a href="#练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。" class="headerlink" title="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"></a>练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_code</span>(<span class="params">code_len=<span class="number">4</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成指定长度的验证码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param code_len: 验证码的长度(默认4个字符)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: 由大小写英文字母和数字构成的随机验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_chars = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">    last_pos = <span class="built_in">len</span>(all_chars) - <span class="number">1</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(code_len):</span><br><span class="line">        index = random.randint(<span class="number">0</span>, last_pos)</span><br><span class="line">        code += all_chars[index]</span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure><h4 id="练习3：设计一个函数返回给定文件名的后缀名。"><a href="#练习3：设计一个函数返回给定文件名的后缀名。" class="headerlink" title="练习3：设计一个函数返回给定文件名的后缀名。"></a>练习3：设计一个函数返回给定文件名的后缀名。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_suffix</span>(<span class="params">filename, has_dot=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取文件名的后缀名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filename: 文件名</span></span><br><span class="line"><span class="string">    :param has_dot: 返回的后缀名是否需要带点</span></span><br><span class="line"><span class="string">    :return: 文件的后缀名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pos = filename.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; pos &lt; <span class="built_in">len</span>(filename) - <span class="number">1</span>:</span><br><span class="line">        index = pos <span class="keyword">if</span> has_dot <span class="keyword">else</span> pos + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> filename[index:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"><a href="#练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。" class="headerlink" title="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"></a>练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max2</span>(<span class="params">x</span>):</span><br><span class="line">    m1, m2 = (x[<span class="number">0</span>], x[<span class="number">1</span>]) <span class="keyword">if</span> x[<span class="number">0</span>] &gt; x[<span class="number">1</span>] <span class="keyword">else</span> (x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        <span class="keyword">if</span> x[index] &gt; m1:</span><br><span class="line">            m2 = m1</span><br><span class="line">            m1 = x[index]</span><br><span class="line">        <span class="keyword">elif</span> x[index] &gt; m2:</span><br><span class="line">            m2 = x[index]</span><br><span class="line">    <span class="keyword">return</span> m1, m2</span><br></pre></td></tr></table></figure><h4 id="练习5：计算指定的年月日是这一年的第几天。"><a href="#练习5：计算指定的年月日是这一年的第几天。" class="headerlink" title="练习5：计算指定的年月日是这一年的第几天。"></a>练习5：计算指定的年月日是这一年的第几天。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断指定的年份是不是闰年</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param year: 年份</span></span><br><span class="line"><span class="string">    :return: 闰年返回True平年返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">which_day</span>(<span class="params">year, month, date</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算传入的日期是这一年的第几天</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param year: 年</span></span><br><span class="line"><span class="string">    :param month: 月</span></span><br><span class="line"><span class="string">    :param date: 日</span></span><br><span class="line"><span class="string">    :return: 第几天</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    days_of_month = [</span><br><span class="line">        [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ][is_leap_year(year)]</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">        total += days_of_month[index]</span><br><span class="line">    <span class="keyword">return</span> total + date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">1980</span>, <span class="number">11</span>, <span class="number">28</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">31</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习6：打印杨辉三角。"><a href="#练习6：打印杨辉三角。" class="headerlink" title="练习6：打印杨辉三角。"></a>练习6：打印<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">杨辉三角</a>。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Number of rows: &#x27;</span>))</span><br><span class="line">    yh = [[]] * num</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yh)):</span><br><span class="line">        yh[row] = [<span class="literal">None</span>] * (row + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yh[row])):</span><br><span class="line">            <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == row:</span><br><span class="line">                yh[row][col] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                yh[row][col] = yh[row - <span class="number">1</span>][col] + yh[row - <span class="number">1</span>][col - <span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(yh[row][col], end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：双色球选号。"><a href="#案例1：双色球选号。" class="headerlink" title="案例1：双色球选号。"></a>案例1：双色球选号。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange, randint, sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">balls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    输出列表中的双色球号码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, ball <span class="keyword">in</span> <span class="built_in">enumerate</span>(balls):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(balls) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%02d&#x27;</span> % ball, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_select</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    随机选择一组号码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    red_balls = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">34</span>)]</span><br><span class="line">    selected_balls = []</span><br><span class="line">    selected_balls = sample(red_balls, <span class="number">6</span>)</span><br><span class="line">    selected_balls.sort()</span><br><span class="line">    selected_balls.append(randint(<span class="number">1</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> selected_balls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;机选几注: &#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        display(random_select())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。</p></blockquote><h4 id="综合案例2：约瑟夫环问题。"><a href="#综合案例2：约瑟夫环问题。" class="headerlink" title="综合案例2：约瑟夫环问题。"></a>综合案例2：<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环问题</a>。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">《幸运的基督徒》</span></span><br><span class="line"><span class="string">有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    persons = [<span class="literal">True</span>] * <span class="number">30</span></span><br><span class="line">    counter, index, number = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">if</span> persons[index]:</span><br><span class="line">            number += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">9</span>:</span><br><span class="line">                persons[index] = <span class="literal">False</span></span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">                number = <span class="number">0</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        index %= <span class="number">30</span></span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> persons:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;基&#x27;</span> <span class="keyword">if</span> person <span class="keyword">else</span> <span class="string">&#x27;非&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="综合案例3：井字棋游戏。"><a href="#综合案例3：井字棋游戏。" class="headerlink" title="综合案例3：井字棋游戏。"></a>综合案例3：<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B">井字棋</a>游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_board</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;TL&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;TM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;TR&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;ML&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;MM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;MR&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;BL&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;BM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;BR&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    init_board = &#123;</span><br><span class="line">        <span class="string">&#x27;TL&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;TM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;TR&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ML&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;MM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;MR&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BL&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;BM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;BR&#x27;</span>: <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    begin = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> begin:</span><br><span class="line">        curr_board = init_board.copy()</span><br><span class="line">        begin = <span class="literal">False</span></span><br><span class="line">        turn = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line">        print_board(curr_board)</span><br><span class="line">        <span class="keyword">while</span> counter &lt; <span class="number">9</span>:</span><br><span class="line">            move = <span class="built_in">input</span>(<span class="string">&#x27;轮到%s走棋, 请输入位置: &#x27;</span> % turn)</span><br><span class="line">            <span class="keyword">if</span> curr_board[move] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">                curr_board[move] = turn</span><br><span class="line">                <span class="keyword">if</span> turn == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                    turn = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    turn = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">            os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line">            print_board(curr_board)</span><br><span class="line">        choice = <span class="built_in">input</span>(<span class="string">&#x27;再玩一局?(yes|no)&#x27;</span>)</span><br><span class="line">        begin = choice == <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 最后这个案例来自<a href="https://item.jd.com/11943853.html">《Python编程快速上手:让繁琐工作自动化》</a>一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数与模块</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012302559.png"></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012302560.png"></p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入M和N计算C(M,N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;m = &#x27;</span>))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n = &#x27;</span>))</span><br><span class="line">fm = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">    fm *= num</span><br><span class="line">fn = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    fn *= num</span><br><span class="line">fm_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m - n + <span class="number">1</span>):</span><br><span class="line">    fm_n *= num</span><br><span class="line"><span class="built_in">print</span>(fm // fn // fm_n)</span><br></pre></td></tr></table></figure><h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入M和N计算C(M,N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;m = &#x27;</span>))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n = &#x27;</span>))</span><br><span class="line"><span class="comment"># 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数</span></span><br><span class="line"><span class="built_in">print</span>(fac(m) // fac(n) // fac(m - n))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">n=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a=<span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有指定参数那么使用默认值摇两颗色子</span></span><br><span class="line"><span class="built_in">print</span>(roll_dice())</span><br><span class="line"><span class="comment"># 摇三颗色子</span></span><br><span class="line"><span class="built_in">print</span>(roll_dice(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(add())</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 传递参数时可以不按照设定的顺序进行传递</span></span><br><span class="line"><span class="built_in">print</span>(add(c=<span class="number">50</span>, a=<span class="number">100</span>, b=<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在参数名前面的*表示args是一个可变参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用add函数时可以传入0个或多个参数</span></span><br><span class="line"><span class="built_in">print</span>(add())</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的代码会输出什么呢？</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;call foo()&#x27;</span>)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;call bar()&#x27;</span>)</span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span></span><br><span class="line">    (x, y) = (y, x) <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> (x, y)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x * y // gcd(x, y)</span><br></pre></td></tr></table></figure><h4 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断一个数是不是回文数&quot;&quot;&quot;</span></span><br><span class="line">    temp = num</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">        total = total * <span class="number">10</span> + temp % <span class="number">10</span></span><br><span class="line">        temp //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total == num</span><br></pre></td></tr></table></figure><h4 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断一个数是不是素数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> num != <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入正整数: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> is_palindrome(num) <span class="keyword">and</span> is_prime(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d是回文素数&#x27;</span> % num)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python中可以在函数内部再定义函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">        c = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">    bar()</span><br><span class="line">    <span class="comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    <span class="comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span></span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Todo: Add your code here</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python构造逻辑</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/05.%E6%9E%84%E9%80%A0%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/05.%E6%9E%84%E9%80%A0%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><p>学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。</p><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3&#x3D;153$。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">找出所有水仙花数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    low = num % <span class="number">10</span></span><br><span class="line">    mid = num // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">    high = num // <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> num == low ** <span class="number">3</span> + mid ** <span class="number">3</span> + high ** <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正整数的反转</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;num = &#x27;</span>))</span><br><span class="line">reversed_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    reversed_num = reversed_num * <span class="number">10</span> + num % <span class="number">10</span></span><br><span class="line">    num //= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(reversed_num)</span><br></pre></td></tr></table></figure></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">《百钱百鸡》问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">33</span>):</span><br><span class="line">        z = <span class="number">100</span> - x - y</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;公鸡: %d只, 母鸡: %d只, 小鸡: %d只&#x27;</span> % (x, y, z))</span><br></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Craps赌博游戏</span></span><br><span class="line"><span class="string">我们设定玩家开始游戏时有1000元的赌注</span></span><br><span class="line"><span class="string">游戏结束的条件是玩家输光所有的赌注</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"><span class="keyword">while</span> money &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的总资产为:&#x27;</span>, money)</span><br><span class="line">    needs_go_on = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        debt = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请下注: &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; debt &lt;= money:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    first = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家摇出了%d点&#x27;</span> % first)</span><br><span class="line">    <span class="keyword">if</span> first == <span class="number">7</span> <span class="keyword">or</span> first == <span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;玩家胜!&#x27;</span>)</span><br><span class="line">        money += debt</span><br><span class="line">    <span class="keyword">elif</span> first == <span class="number">2</span> <span class="keyword">or</span> first == <span class="number">3</span> <span class="keyword">or</span> first == <span class="number">12</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;庄家胜!&#x27;</span>)</span><br><span class="line">        money -= debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        needs_go_on = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> needs_go_on:</span><br><span class="line">        needs_go_on = <span class="literal">False</span></span><br><span class="line">        current = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;玩家摇出了%d点&#x27;</span> % current)</span><br><span class="line">        <span class="keyword">if</span> current == <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;庄家胜&#x27;</span>)</span><br><span class="line">            money -= debt</span><br><span class="line">        <span class="keyword">elif</span> current == first:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;玩家胜&#x27;</span>)</span><br><span class="line">            money += debt</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            needs_go_on = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你破产了, 游戏结束!&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>###有用的练习 </p><ol><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote></li><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6&#x3D;1+2+3$）和28（$28&#x3D;1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote></li><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><p>上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python循环结构</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/04.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/04.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里同样需要循环结构。</p><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n&#x3D;1}^{100}n$）。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">猜数字游戏</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你总共猜了%d次&#x27;</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的智商余额明显不足&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出乘法口诀表(九九表)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入一个正整数判断它是不是素数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个正整数: &#x27;</span>))</span><br><span class="line">end = <span class="built_in">int</span>(sqrt(num))</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> num % x == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> is_prime <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d是素数&#x27;</span> % num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d不是素数&#x27;</span> % num)</span><br></pre></td></tr></table></figure><h4 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入两个正整数计算它们的最大公约数和最小公倍数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;y = &#x27;</span>))</span><br><span class="line"><span class="comment"># 如果x大于y就交换x和y的值</span></span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="comment"># 通过下面的操作将y的值赋给x, 将x的值赋给y</span></span><br><span class="line">    x, y = y, x</span><br><span class="line"><span class="comment"># 从两个数中较小的数开始做递减的循环</span></span><br><span class="line"><span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d和%d的最大公约数是%d&#x27;</span> % (x, y, factor))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d和%d的最小公倍数是%d&#x27;</span> % (x, y, x * y // factor))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印三角形图案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">row = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入行数: &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        <span class="keyword">if</span> j &lt; row - i - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(row - i - <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python分支结构</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/03.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/03.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用户身份验证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名: &#x27;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入口令: &#x27;</span>)</span><br><span class="line"><span class="comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span></span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证失败!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是和C&#x2F;C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020035837.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        3x - 5  (x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">        5x + 3  (x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">    y = x + <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string">3x - 5(x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =x + 2(-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">5x + 3(x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">        y = x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：英制单位英寸与公制单位厘米互换。"><a href="#练习1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="练习1：英制单位英寸与公制单位厘米互换。"></a>练习1：英制单位英寸与公制单位厘米互换。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">英制单位英寸和公制单位厘米互换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">value = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入长度: &#x27;</span>))</span><br><span class="line">unit = <span class="built_in">input</span>(<span class="string">&#x27;请输入单位: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> unit == <span class="string">&#x27;in&#x27;</span> <span class="keyword">or</span> unit == <span class="string">&#x27;英寸&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f英寸 = %f厘米&#x27;</span> % (value, value * <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">elif</span> unit == <span class="string">&#x27;cm&#x27;</span> <span class="keyword">or</span> unit == <span class="string">&#x27;厘米&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f厘米 = %f英寸&#x27;</span> % (value, value / <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入有效的单位&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h4><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">百分制成绩转换为等级制成绩</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">score = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入成绩: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对应的等级是:&#x27;</span>, grade)</span><br></pre></td></tr></table></figure><h4 id="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#练习3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>练习3：输入三条边长，如果能构成三角形就计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;a = &#x27;</span>))</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;b = &#x27;</span>))</span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;c = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;周长: %f&#x27;</span> % (a + b + c))</span><br><span class="line">    p = (a + b + c) / <span class="number">2</span></span><br><span class="line">    area = (p * (p - a) * (p - b) * (p - c)) ** <span class="number">0.5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;面积: %f&#x27;</span> % (area))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不能构成三角形&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://zh.wikipedia.org/zh-hans/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F">海伦公式</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言元素</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h4 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。</p></blockquote><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用变量保存数据并进行加减乘除运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(a - b)    <span class="comment"># 309</span></span><br><span class="line"><span class="built_in">print</span>(a * b)    <span class="comment"># 3852</span></span><br><span class="line"><span class="built_in">print</span>(a / b)    <span class="comment"># 26.75</span></span><br></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用type()检查变量的类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;a = &#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;b = &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="comment"># flag0 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="comment"># flag1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="comment"># flag2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="comment"># flag3 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="comment"># flag4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="comment"># flag5 = False</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C&#x3D;(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将华氏温度转换为摄氏温度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入华氏温度: &#x27;</span>))</span><br><span class="line">c = (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.1f华氏度 = %.1f摄氏度&#x27;</span> % (f, c))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f:<span class="number">.1</span>f&#125;</span>华氏度 = <span class="subst">&#123;c:<span class="number">.1</span>f&#125;</span>摄氏度&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h4 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入半径计算圆的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径: &#x27;</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * <span class="number">3.1416</span> * radius</span><br><span class="line">area = <span class="number">3.1416</span> * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;周长: %.2f&#x27;</span> % perimeter)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积: %.2f&#x27;</span> % area)</span><br></pre></td></tr></table></figure><h4 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入年份 如果是闰年输出True 否则输出False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年份: &#x27;</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span></span><br><span class="line">is_leap = year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">          year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(is_leap)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Python</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/06/01/01.%E5%88%9D%E8%AF%86Python/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/06/01/01.%E5%88%9D%E8%AF%86Python/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h2><h3 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h3><h4 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h4><ol><li>1989年圣诞节：Guido von Rossum开始写Python语言的编译器。</li><li>1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li><li>1994年1月：Python 1.0正式发布。</li><li>2000年10月16日：Python 2.0发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li><li>2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6&#x2F;2.7版本中。</li></ol><p>目前我使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的网络文章。</p><h4 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h4><p>Python的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p>Python的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h4 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h4><p>目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h3 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h3><p>想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。</p><h4 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h4><p>可以在<a href="https://www.python.org/">Python官方网站</a>下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl&#x2F;tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示api-ms-win-crt*.dll文件缺失，可以参照<a href="https://zhuanlan.zhihu.com/p/32087135">《api-ms-win-crt*.dll缺失原因分析和解决方法》</a>一文讲解的方法进行处理或者直接在<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145">微软官网</a>下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个<a href="https://dl.pconline.com.cn/download/360074-1.html">DirectX修复工具</a>进行修复。</p><h4 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h4><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org/">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。</p><ol><li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><ol start="2"><li>下载Python源代码并解压缩到指定目录。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span><br><span class="line">xz -d Python-3.7.6.tar.xz</span><br><span class="line">tar -xvf Python-3.7.6.tar</span><br></pre></td></tr></table></figure><ol start="3"><li>切换至Python源代码目录并执行下面的命令进行配置和安装。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.6</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="4"><li>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 此处省略上面的代码 ...</span></span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure><ol start="5"><li>激活环境变量。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h4 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h4><p>macOS也自带了Python 2.x版本，可以通过<a href="https://www.python.org/">Python的官方网站</a>提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行<code>python</code>命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行<code>python3</code>命令。</p><h3 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h3><h4 id="确认Python的版本"><a href="#确认Python的版本" class="headerlink" title="确认Python的版本"></a>确认Python的版本</h4><p>可以Windows的命令行提示符中键入下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>在Linux或macOS系统的终端中键入下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>当然也可以先输入<code>python</code>或<code>python3</code>进入交互式环境，再执行以下的代码检查Python的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.version_info)</span><br><span class="line"><span class="built_in">print</span>(sys.version)</span><br></pre></td></tr></table></figure><h4 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h4><p>可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/">Sublime</a>、<a href="https://code.visualstudio.com/">Visual Studio Code</a>等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以#和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一个Python程序 - hello, world!</span></span><br><span class="line"><span class="string">向伟大的Dennis M. Ritchie先生致敬</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;你好, 世界！&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h3><h4 id="IDLE-自带的集成开发工具"><a href="#IDLE-自带的集成开发工具" class="headerlink" title="IDLE - 自带的集成开发工具"></a>IDLE - 自带的集成开发工具</h4><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258805.png"></p><h4 id="IPython-更好的交互式编程工具"><a href="#IPython-更好的交互式编程工具" class="headerlink" title="IPython - 更好的交互式编程工具"></a>IPython - 更好的交互式编程工具</h4><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ipython</span><br></pre></td></tr></table></figure><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258807.png"></p><h4 id="Sublime-Text-高级文本编辑器"><a href="#Sublime-Text-高级文本编辑器" class="headerlink" title="Sublime Text - 高级文本编辑器"></a>Sublime Text - 高级文本编辑器</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258808.png"></p><ul><li><p>首先可以通过<a href="https://www.sublimetext.com/">官方网站</a>下载安装程序安装Sublime Text 3或Sublime Text 2。</p></li><li><p>安装包管理工具。</p><ol><li>通过快捷键Ctrl+&#96;或者在View菜单中选择Show Console打开控制台，输入下面的代码。</li></ol><ul><li>Sublime 3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request,os;pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">&#x27;wb&#x27;</span>).write(urllib.request.urlopen(<span class="string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><ul><li>Sublime 2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib2,os;pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">&#x27;wb&#x27;</span>).write(urllib2.urlopen(<span class="string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).read());<span class="built_in">print</span>(<span class="string">&#x27;Please restart Sublime Text to finish installation&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>在浏览器中输入  <a href="https://sublime.wbond.net/Package%20Control.sublime-package">https://sublime.wbond.net/Package%20Control.sublime-package</a> 下载包管理工具的安装包，并找到安装Sublime目录下名为&quot;Installed Packages&quot;的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。</li></ol></li><li><p>安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><ul><li>SublimeCodeIntel - 代码自动补全工具插件。</li><li>Emmet - 前端开发代码模板插件。</li><li>Git - 版本控制工具插件。</li><li>Python PEP8 Autoformat - PEP8规范自动格式化插件。</li><li>ConvertToUTF8 - 将本地编码转换为UTF-8。</li></ul></li></ul><blockquote><p><strong>说明</strong>：事实上<a href="https://code.visualstudio.com/">Visual Studio Code</a>可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p></blockquote><h4 id="PyCharm-Python开发神器"><a href="#PyCharm-Python开发神器" class="headerlink" title="PyCharm - Python开发神器"></a>PyCharm - Python开发神器</h4><p>PyCharm的安装、配置和使用在<a href="../%E7%95%AA%E5%A4%96%E7%AF%87/%E7%8E%A9%E8%BD%ACPyCharm.md">《玩转PyCharm》</a>进行了介绍，有兴趣的读者可以选择阅读。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258809.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li><p>在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的<a href="../Python%E4%B9%8B%E7%A6%85.md">“Python之禅”</a>，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p></blockquote></li><li><p>学习使用turtle在屏幕上绘制图形。</p><blockquote><p><strong>说明</strong>：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">4</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/05/31/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/05/31/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p><strong>定义</strong></p><pre><code>斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368........这个数列从第3项开始，每一项都等于前两项之和.</code></pre><p><strong>公式</strong><br>$$<br>a_n&#x3D;a_{(n-1)}+a_{(n-2)}<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> <span class="built_in">array</span>[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> arraysize = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">1</span>]=<span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>;i&lt;arraysize;i++)&#123;</span><br><span class="line">        <span class="built_in">array</span>[i]=<span class="built_in">array</span>[i<span class="number">-1</span>]+<span class="built_in">array</span>[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; arraysize; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/05/31/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/05/31/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><h2 id="算法实现过程"><a href="#算法实现过程" class="headerlink" title="算法实现过程"></a>算法实现过程</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<blockquote><p>人类语言：😜从第一个开始依次比较相邻的两个元素 如果后面的数字小于前面的 交换两数的位置，在使用交换后的数据比较，直到最后一个。每次把最大的数字放到后面。</p></blockquote></li></ol><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="动态图片" title="动态显示"></p><p>每次确定一位最大的数字。每次循环次数比上一次少一位</p><blockquote><p>如果一个数组长度是5 <strong>长度记为 len</strong><br>则比较轮数就是 <strong>数组长度减一</strong> 记作 <strong>i &lt; len -1</strong><br>每次的轮数记为 <strong>j &lt; len-i-1</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">5</span>]; <span class="comment">//声明数组</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//计算数组的长度</span></span><br><span class="line">    <span class="type">int</span> cnt;<span class="comment">//定义交换变量</span></span><br><span class="line">    <span class="type">int</span> i,j;<span class="comment">//定义循环变量</span></span><br><span class="line">    <span class="keyword">for</span>( i =<span class="number">0</span> ; i&lt;len;i++)&#123; <span class="comment">//数组初始化</span></span><br><span class="line">        <span class="type">int</span> a = rand() % <span class="number">100</span> ;<span class="comment">//随机数 0~100</span></span><br><span class="line">        <span class="built_in">array</span>[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]); <span class="comment">// 输出原始数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (  i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)&#123;  <span class="comment">//外侧i 控制比较轮数 数组长度-1</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++)&#123; <span class="comment">//每次的比较次数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j+<span class="number">1</span>])&#123; <span class="comment">//相邻的两个数比较大小</span></span><br><span class="line">                cnt =  <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j+<span class="number">1</span>]; <span class="comment">// 交换两个为主的数据</span></span><br><span class="line">                <span class="built_in">array</span>[j+<span class="number">1</span>] = cnt;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/Aubuty/Aubuty.github.io.git/2022/05/31/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/Aubuty/Aubuty.github.io.git/2022/05/31/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h2 id="算法实现过程"><a href="#算法实现过程" class="headerlink" title="算法实现过程"></a>算法实现过程</h2><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。<blockquote><p>人类语言：😜从第一个开始依次比较后面所有位置的数据。每次确定一个位置的数据</p></blockquote></li></ol><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><blockquote><p>图片来自菜鸟教程。<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="动态图片" title="动态显示"><br>每次确定一位的数字。每次循环次数比上一次少一位<br>如果一个数组长度是5 <strong>长度记为 len</strong><br>则比较轮数就是 <strong>数组长度减一</strong> 记作 <strong>i &#x3D; 0; i &lt; len-1; i++</strong><br>后面位数据的位置记为 <strong>j &#x3D; i+1 ; j &lt; len;j++</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">5</span>]; <span class="comment">//声明数组</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//计算数组的长度</span></span><br><span class="line">    <span class="type">int</span> cnt;<span class="comment">//定义交换变量</span></span><br><span class="line">    <span class="type">int</span> i,j;<span class="comment">//定义循环变量</span></span><br><span class="line">    <span class="keyword">for</span>( i =<span class="number">0</span> ; i&lt;len;i++)&#123; <span class="comment">//数组初始化</span></span><br><span class="line">        <span class="type">int</span> a = rand() % <span class="number">100</span> ;<span class="comment">//随机数 0~100</span></span><br><span class="line">        <span class="built_in">array</span>[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]); <span class="comment">// 输出原始数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (  i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)&#123; <span class="comment">//外侧的一个数据</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; len; j++)&#123;<span class="comment">//后面的每一个位置的数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[j])&#123;</span><br><span class="line">                cnt =  <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[i];<span class="comment">//交换数据</span></span><br><span class="line">                <span class="built_in">array</span>[i] = cnt;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
