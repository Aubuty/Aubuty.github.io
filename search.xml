<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32学习笔记五</title>
      <link href="/posts/54921.html"/>
      <url>/posts/54921.html</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-DMA"><a href="#STM32-DMA" class="headerlink" title="STM32 DMA"></a>STM32 DMA</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="DMA的概念"><a href="#DMA的概念" class="headerlink" title="DMA的概念"></a>DMA的概念</h3><p>​直接存储器访问 (DMA) ：用于在外设与存储器之间以及存储器与存储器之间进行高速数据传输。DMA传输过程的初始化和启动由CPU完成，传输过程由DMA控制器来执行，无需CPU参与，从而节省CPU资源，提高利用率。</p><h3 id="DMA数据传输的四个要素："><a href="#DMA数据传输的四个要素：" class="headerlink" title="DMA数据传输的四个要素："></a><strong>DMA数据传输的四个要素：</strong></h3><ol><li>传输源 ：DMA数据传输的来源</li><li>传输目标：DMA数据传输的目的</li><li>传输数量：DMA传输数据的数量</li><li>触发信号：启动一次DMA数据传输的动作</li></ol><p>​DMA在很多情况下都能够帮助提高系统的性能，尤其是在处理大量数据传输时。它可以用来传输数据到&#x2F;从外设，例如ADC、DAC、SPI和UART等，也可以用来进行内存间的数据传输。</p><h3 id="DMA传输方式"><a href="#DMA传输方式" class="headerlink" title="DMA传输方式"></a>DMA传输方式</h3><ul><li>外设到内存</li><li>内存到外设</li><li>内存到内存</li><li>外设到外设</li></ul><h3 id="DMA的循环模式和正常模式"><a href="#DMA的循环模式和正常模式" class="headerlink" title="DMA的循环模式和正常模式"></a>DMA的循环模式和正常模式</h3><p>​BDMA主要有两种模式，一个是Normal正常模式，传输一次后就停止传输；另一种是Circular循环模式，会一直循环的传输下去，即使有DMA中断，传输也是一直在进行的。</p><p>这两种模式各有用途。</p><h4 id="Normal正常模式"><a href="#Normal正常模式" class="headerlink" title="Normal正常模式"></a>Normal正常模式</h4><p>​适合用于单次传输，比如存储器到存储器的数据复制粘贴，又比如串口的数据单次发送，下次还需要发送的时候，使能下即可。</p><h4 id="Circular循环模式"><a href="#Circular循环模式" class="headerlink" title="Circular循环模式"></a>Circular循环模式</h4><p>​适合用于需要连续传输的场合，比如定时器触发BDMA实现任意IO的PWM输出。</p><h3 id="指针递增模式"><a href="#指针递增模式" class="headerlink" title="指针递增模式"></a>指针递增模式</h3><p>源地址指针递增 目标地址指针同步递增 </p><p>适用于：内存到内存 外设到内存</p><p>源地址递增 目标指针不动</p><p>适用于 内存到外设 如 串口</p><h2 id="HAL库函数介绍"><a href="#HAL库函数介绍" class="headerlink" title="HAL库函数介绍"></a>HAL库函数介绍</h2><h3 id="HAL-DMA-Start-开始DMA传输"><a href="#HAL-DMA-Start-开始DMA传输" class="headerlink" title="HAL_DMA_Start : 开始DMA传输"></a>HAL_DMA_Start : 开始DMA传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_DMA_Start</span><span class="params">(DMA_HandleTypeDef *hdma, <span class="type">uint32_t</span> SrcAddress, <span class="type">uint32_t</span> DstAddress, <span class="type">uint32_t</span> DataLength)</span></span><br></pre></td></tr></table></figure><p>第一个参数： DMA句柄</p><p>第二个参数： 源内存地址</p><p>第三个参数： 目标内存地址</p><p>第四个参数： 传输数据的长度 <code>需要乘以siezof（uint32_t）</code></p><h3 id="HAL-DMA-GET-FLAG-判断DMA状态"><a href="#HAL-DMA-GET-FLAG-判断DMA状态" class="headerlink" title="__HAL_DMA_GET_FLAG:  判断DMA状态"></a>__HAL_DMA_GET_FLAG:  判断DMA状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)</span></span><br></pre></td></tr></table></figure><p>参数一： DMA句柄</p><p>参数二：要查看的状态</p><p>有以下几种状态：</p><p>DMA_FLAG_TCIFx：传输完成标志。</p><p>DMA_FLAG_TIFx：半传输完成标志。</p><p>DMA_FLAG_EIFx：传输错误标志。</p><p>DMA_FLAG_DMEIFx：直接模式错误标志。</p><p>DMA_FLAG_FEIFx:FIFO错误标志。</p><p>这里的X需要换成DMA对应的通道</p><h2 id="任务1：内存到内存"><a href="#任务1：内存到内存" class="headerlink" title="任务1：内存到内存"></a>任务1：内存到内存</h2><p>​任务要求：将数组A的内容 通过DMA搬运到数组B 并在串口打印数组B</p><h3 id="配置DMA"><a href="#配置DMA" class="headerlink" title="配置DMA"></a>配置DMA</h3><blockquote><p>选择第二个选项卡 MenToMem （内存到内存）</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230109223949403.png" alt="image-20230109223949403"></p><p>点击Add</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225817635.png" alt="image-20230118225817635"></p><p>配置模式为 正常模式 </p><p>使用DMA1 通道0</p><p>选择指针的递增模式 同步递增</p><p>Data Width 为数据宽度 这里使用word 字 </p><p>其他 暂时不要管 </p><blockquote><p>在 STM32F103 系列没有 Fifo阈值的设置</p></blockquote><h3 id="代码编写："><a href="#代码编写：" class="headerlink" title="代码编写："></a>代码编写：</h3><blockquote><p>以下操作仅在H7系列需要操作</p><p>F1 F4 系列不需要</p><p><strong>attribute</strong>((section(“.DisplayBuffer”))) 这段话只在H7 需要加</p><p>H7 使用的时候可以在DMA.c 文件里 将Filo 关闭</p><p> <code>hdma_memtomem_dma1_stream0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;</code></p></blockquote><p>我使用的是 H7 系列 DMA比较复杂 需要额外设置 如下： 其他系列 F1 F4 不需要做 </p><p>这是总线访问权限的图</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191212561.png" alt="image-20230117191212561"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191224657.png" alt="image-20230117191224657"></p><p>可以看到 DMA1 DMA2 可以访问SRAM1 -SRAM3 的内容 </p><p>所以需要 指定内存 </p><p>我使用的是Clion+CubaMX 需要做如下设置 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191244044.png" alt="image-20230117191244044"></p><p>首先找到xxx.Id添加如下代码 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117191256242.png" alt="image-20230117191256242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">._User_data :</span><br><span class="line">   &#123;</span><br><span class="line">     . = ALIGN(32);</span><br><span class="line">     . = ALIGN(32);</span><br><span class="line">   &#125; &gt;RAM_D2</span><br></pre></td></tr></table></figure><p>准备工作完成  指定变量存储去见下方</p><h4 id="准备原始数据"><a href="#准备原始数据" class="headerlink" title="准备原始数据"></a>准备原始数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 1024 <span class="comment">//数组大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PFP */</span></span><br><span class="line">count <span class="type">uint32_t</span> srcBuf[BUF_SIZE] =&#123;  <span class="comment">//原始数据</span></span><br><span class="line">        <span class="number">0x01020304</span>,<span class="number">0x05060708</span>,<span class="number">0x090A0B0C</span>,<span class="number">0x0D0E0F10</span>,</span><br><span class="line">        <span class="number">0x11121314</span>,<span class="number">0x15161718</span>,<span class="number">0x191A1B1C</span>,<span class="number">0x1D1E1F20</span>,</span><br><span class="line">        <span class="number">0x21222324</span>,<span class="number">0x25262728</span>,<span class="number">0x292A2B2C</span>,<span class="number">0x2D2E2F30</span>,</span><br><span class="line">        <span class="number">0x31323334</span>,<span class="number">0x35363738</span>,<span class="number">0x393A3B3C</span>,<span class="number">0x3D3E3F40</span>,</span><br><span class="line">        <span class="number">0x41424344</span>,<span class="number">0x44564748</span>,<span class="number">0x494A4B4C</span>,<span class="number">0x4D4E4F50</span>,</span><br><span class="line">        <span class="number">0x51525345</span>,<span class="number">0x55565758</span>,<span class="number">0x595A5B5C</span>,<span class="number">0x5D5E5F60</span>,</span><br><span class="line">        <span class="number">0x61626364</span>,<span class="number">0x65666768</span>,<span class="number">0x696A6B6C</span>,<span class="number">0x6D6E6F70</span>,</span><br><span class="line">        <span class="number">0x71727374</span>,<span class="number">0x75767778</span>,<span class="number">0x797A7B7C</span>,<span class="number">0x7D7E7F80</span></span><br><span class="line">&#125;;</span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint32_t</span> desBuf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 目标数组</span></span><br><span class="line"><span class="comment">/* USER CODE END PFP */</span></span><br></pre></td></tr></table></figure><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DMA M to M Test \r\n &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (HAL_DMA_Start(&amp;hdma_memtomem_dma1_stream0, (<span class="type">uint32_t</span>) srcBuf, (<span class="type">uint32_t</span>) desBuf, BUF_SIZE) == HAL_OK)&#123; <span class="comment">//dma开始搬运数据</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;OK\r\n&quot;</span>); <span class="comment">// 正常串口显示 OK 反之 显示no</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;no\r\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (__HAL_DMA_GET_FLAG(&amp;hdma_memtomem_dma1_stream0,DMA_FLAG_TCIF0_4) == ENABLE); <span class="comment">// 等待发送完毕 </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(srcBuf) / <span class="keyword">sizeof</span>(srcBuf[<span class="number">0</span>]); ++i)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;srcBuf[%d] = %lX\r\n&quot;</span>,i,desBuf[i]);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><h3 id="程序结果："><a href="#程序结果：" class="headerlink" title="程序结果："></a>程序结果：</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192215142.png" alt="image-20230117192215142"></p><h2 id="任务2：内存到外设"><a href="#任务2：内存到外设" class="headerlink" title="任务2：内存到外设"></a>任务2：内存到外设</h2><p>使用DMA 将内存的数据发送到串口</p><h3 id="使用到的库函数"><a href="#使用到的库函数" class="headerlink" title="使用到的库函数"></a>使用到的库函数</h3><h4 id="串口DMA方式发送函数：HAL-UART-Transmit-DMA"><a href="#串口DMA方式发送函数：HAL-UART-Transmit-DMA" class="headerlink" title="串口DMA方式发送函数：HAL_UART_Transmit_DMA"></a>串口DMA方式发送函数：HAL_UART_Transmit_DMA</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192252949.png" alt="image-20230117192252949"></p><h3 id="Cuba-MX的设置"><a href="#Cuba-MX的设置" class="headerlink" title="Cuba MX的设置"></a>Cuba MX的设置</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230117192413741.png" alt="image-20230117192413741"></p><p>打开Usart1 的DMA 所有参数默认即可 这里 Mode 选择单次  只发送一次 </p><p>最后的效果图 可以看出两种 mode的区别  这里 像是串口类型的只需要发送一次选择Normal 就可以  </p><p>像adc需要持续采集数据的需要设置为循环 Circular  </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225333796.png" alt="image-20230118225333796"></p><p>检测NVIC的 DMA1 的中断是否打开 </p><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 50 <span class="comment">//数组大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>)))<span class="type">uint8_t</span> SendBuf[BUF_SIZE] = &#123;<span class="number">0</span>&#125;; <span class="comment">//因为H7的DMA只能访问 ASRM的数据 需要将发送数据的变量放到ASRM的区域 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h4 id="发送数据-1"><a href="#发送数据-1" class="headerlink" title="发送数据"></a>发送数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;DMA M to P Test \r\n &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(SendBuf) / <span class="keyword">sizeof</span>(SendBuf[<span class="number">0</span>]); ++i)&#123; <span class="comment">//填充数据</span></span><br><span class="line">        SendBuf[i] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HAL_UART_Transmit_DMA(&amp;huart2,SendBuf,BUF_SIZE);<span class="comment">//发送数据 </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><h4 id="程序效果"><a href="#程序效果" class="headerlink" title="程序效果"></a>程序效果</h4><h5 id="Mode-为单次"><a href="#Mode-为单次" class="headerlink" title="Mode 为单次"></a>Mode 为单次</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223101377.png" alt="image-20230118223101377"></p><h5 id="Mode-为循环"><a href="#Mode-为循环" class="headerlink" title="Mode 为循环"></a>Mode 为循环</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223312438.png" alt="image-20230118223312438"></p><h2 id="任务3：-外设到内存"><a href="#任务3：-外设到内存" class="headerlink" title="任务3： 外设到内存"></a>任务3： 外设到内存</h2><h3 id="使用到的库函数-1"><a href="#使用到的库函数-1" class="headerlink" title="使用到的库函数"></a>使用到的库函数</h3><h4 id="串口DMA方式接收函数：HAL-UART-Receive-DMA"><a href="#串口DMA方式接收函数：HAL-UART-Receive-DMA" class="headerlink" title="串口DMA方式接收函数：HAL_UART_Receive_DMA"></a><strong>串口DMA方式接收函数：HAL_UART_Receive_DMA</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223447023.png" alt="image-20230118223447023"></p><h4 id="获取未传输数据个数函数：-HAL-DMA-GET-COUNTER"><a href="#获取未传输数据个数函数：-HAL-DMA-GET-COUNTER" class="headerlink" title="获取未传输数据个数函数：__HAL_DMA_GET_COUNTER"></a><strong>获取未传输数据个数函数：__HAL_DMA_GET_COUNTER</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223459503.png" alt="image-20230118223459503"></p><h4 id="关闭DMA数据流：-HAL-DMA-DISABLE"><a href="#关闭DMA数据流：-HAL-DMA-DISABLE" class="headerlink" title="关闭DMA数据流：__HAL_DMA_DISABLE"></a><strong>关闭DMA数据流：__HAL_DMA_DISABLE</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223508600.png" alt="image-20230118223508600"></p><h3 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a><strong>任务目标</strong></h3><p><strong>实现不定长数据的收发</strong></p><h3 id="任务内容"><a href="#任务内容" class="headerlink" title="任务内容"></a><strong>任务内容</strong></h3><p>利用串口调试助手，从PC上发送任意长度的字符到开发板，开发板收到后原样发回到PC。</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>使能IDLE中断</p><p>在串口1的中断服务程序USART1_IRQHandler中添加对IDLE中断的判断，该函数位于stm32h7xx_it.c文件；</p><p>设置传输模式为普通模式，启动DMA传输。串口一旦接收到数据，则触发DMA操作，将数据存放到用户定义的接收缓冲区；</p><p>当一帧数据发送完成后，线路处于IDLE状态，将触发IDLE中断，调用IDLE中断回调函数，设置数据接收完成标志；</p><p>主程序检测到接收完成标志置位后，将接收的一帧数据原样发回到PC，并禁能DMA，以触发DMA中断。DMA中断将调用接收中断回<br>调函数，在回调函数中重新启动DMA传输</p><h3 id="CubaMx-的-配置"><a href="#CubaMx-的-配置" class="headerlink" title="CubaMx 的 配置"></a>CubaMx 的 配置</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223520009.png" alt="image-20230118223520009"></p><p>添加接收的DMA</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118223532827.png" alt="image-20230118223532827"></p><p>检查中断 将 串口中断 和 DMA的中断打开</p><h3 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h3><h4 id="准备数据接收区"><a href="#准备数据接收区" class="headerlink" title="准备数据接收区"></a>准备数据接收区</h4><p>在main.c下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint8_t</span> rcvBuf[BUF_SIZE]; <span class="comment">// 定义接受数组</span></span><br><span class="line"><span class="type">uint8_t</span> rcvLen; <span class="comment">// 定义接受数据长度</span></span><br><span class="line"><span class="type">uint8_t</span> Rx_Flag; <span class="comment">//接受标志</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><p>在 main.h 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 256 <span class="comment">//数组大小</span></span></span><br></pre></td></tr></table></figure><p>在stm32h7xx_it.c 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="keyword">extern</span> __attribute__((section(<span class="string">&quot;._User_data&quot;</span>))) <span class="type">uint8_t</span> rcvBuf[BUF_SIZE]; <span class="comment">// 定义接受数组</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> rcvLen; <span class="comment">// 定义接受数据长度</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Rx_Flag; <span class="comment">//接受标志</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h4 id="准备接受数据"><a href="#准备接受数据" class="headerlink" title="准备接受数据"></a>准备接受数据</h4><p>开启空闲中断  在main.c 文件下 </p><blockquote><p>H750 上电就进入空闲中断 就会打印一次 长度为0 的数据 一下两种方法可以解决 </p><p><code>while(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE)==RESET)</code></p><p>或</p><pre><code>__HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);</code></pre></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">   <span class="built_in">memset</span>(rcvBuf,<span class="number">0</span>,BUF_SIZE);</span><br><span class="line">   __HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);<span class="comment">//开启IDLE中断</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;DMA P to M Test \r\n &quot;</span>);</span><br><span class="line">   HAL_UART_Receive_DMA(&amp;huart1,rcvBuf,BUF_SIZE);<span class="comment">//开启DMA接收</span></span><br><span class="line">__HAL_UART_CLEAR_IDLEFLAG(&amp;huart1);<span class="comment">//防止单片机上电就进入空闲中断 </span></span><br><span class="line">   __HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);<span class="comment">//防止单片机上电就进入空闲中断 </span></span><br><span class="line">   Rx_Flag = <span class="number">0</span>;<span class="comment">//传输完成 标志置零</span></span><br><span class="line"> <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><p>开始数据接受  在stm32h7xx_it.c 下编写 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">    <span class="keyword">if</span>(__HAL_UART_GET_FLAG(&amp;huart1,UART_FLAG_IDLE) == SET)&#123; <span class="comment">//判断IDLE的标志位</span></span><br><span class="line">        __HAL_UART_CLEAR_IDLEFLAG(&amp;huart1); <span class="comment">//清除IDLE标志位置</span></span><br><span class="line">        <span class="comment">//计算获得了多少数据</span></span><br><span class="line">        <span class="type">uint8_t</span> temp_len = __HAL_DMA_GET_COUNTER(&amp;hdma_usart1_rx); <span class="comment">// 获取 剩余的位数</span></span><br><span class="line">        HAL_UART_DMAStop(&amp;huart1); <span class="comment">//停止DMA传输 防止干扰</span></span><br><span class="line">        rcvLen = BUF_SIZE - temp_len ; <span class="comment">//总位数减去剩余位数 得到接收位数</span></span><br><span class="line">        <span class="comment">//HAL_UART_Transmit_DMA(&amp;huart1,rcvBuf,rcvLen); //原样发回串口</span></span><br><span class="line">        Rx_Flag = <span class="number">1</span> ;<span class="comment">//传输完成标志 置为1 表示接受完毕 </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">  HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END U SART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p> 在main.c 编写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">   <span class="keyword">if</span>(Rx_Flag == <span class="number">1</span> )&#123;</span><br><span class="line">       Rx_Flag = <span class="number">0</span>;<span class="comment">//接受标志 置零</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;data is %s\r\n&quot;</span>,rcvBuf);<span class="comment">//原样输出串口 </span></span><br><span class="line">       <span class="built_in">memset</span>(rcvBuf,<span class="number">0</span>,BUF_SIZE);<span class="comment">//清空接收区</span></span><br><span class="line">       HAL_UART_Receive_DMA(&amp;huart1,rcvBuf,BUF_SIZE);<span class="comment">//重新开启串口DMA接收</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h4 id="程序效果-1"><a href="#程序效果-1" class="headerlink" title="程序效果"></a>程序效果</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230118225031500.png" alt="image-20230118225031500"></p><p>参考文献：</p><p><a href="https://blog.csdn.net/wallace89/article/details/117001405">https://blog.csdn.net/wallace89/article/details/117001405</a> </p><p><a href="https://blog.csdn.net/Jaken5213/article/details/110494543">(132条消息) STM32H743不能使用DMA的问题_Jaken5213的博客-CSDN博客_stm32h743dma指定地址</a></p><p><a href="https://blog.csdn.net/hqy450665101/article/details/110149311">(132条消息) STM32_H750串口接收不定长数据（IDLE+DMA）及初始化之后便进入idle中断的解决方法_MY_QuinTA的博客-CSDN博客_h750 串口空闲+dma 一直进接收中断</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> DMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记四</title>
      <link href="/posts/17024.html"/>
      <url>/posts/17024.html</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-学习笔记-串口"><a href="#STM32-学习笔记-串口" class="headerlink" title="STM32 学习笔记 串口"></a>STM32 学习笔记 串口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="计算机通信的概念"><a href="#计算机通信的概念" class="headerlink" title="计算机通信的概念"></a><strong>计算机通信的概念</strong></h3><p>​将计算机技术和通信技术相结合，完成计算机与外部设备或计算机与计算机之间的信息交换。按照数据传输方式的不同，可以分为串行通信和并行通信两类</p><ul><li><p><input disabled type="checkbox"> <strong>串行通信：数据逐位传输</strong></p></li><li><p><input disabled type="checkbox"> <strong>并行通信：多位数据同时传输</strong></p></li></ul><h4 id="并行通信的特点"><a href="#并行通信的特点" class="headerlink" title="并行通信的特点"></a><strong>并行通信的特点</strong></h4><blockquote><p>多位数据同时传输，传输控制简单，传输速度快，但是在长距离传输时硬件成本较高。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107185616094.png" alt="image-20230107185616094"></p><h4 id="串行通信的特点"><a href="#串行通信的特点" class="headerlink" title="串行通信的特点"></a><strong>串行通信的特点</strong></h4><blockquote><p>数据逐位传输，传输线少，长距离传输时成本低，但数据的传输控制较复杂。按照实现数据同步的方式，可以分为同步串行和异步串行两种。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107185701153.png" alt="image-20230107185701153"></p><h4 id="同步串行通信的特点"><a href="#同步串行通信的特点" class="headerlink" title="同步串行通信的特点"></a><strong>同步串行通信的特点</strong></h4><blockquote><p><strong>数据传输以数据块（一组字符）为单位，在一个数据块内，字符与字符间无间隔，收发双方依靠独立的时钟线进行信号的同步.适用于大批量的数据传输。</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190042897.png" alt="image-20230107190042897"></p><h4 id="异步串行通信的特点"><a href="#异步串行通信的特点" class="headerlink" title="异步串行通信的特点"></a><strong>异步串行通信的特点</strong></h4><blockquote><p><strong>数据传输以单个字符为单位，字符和字符之间的间隙任意，字符内部每一位持续的时间相同。收发双方没有专门的时钟信号，而是依靠事先约定的字符格式和通信速率来完成通信。</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190136387.png" alt="image-20230107190136387"></p><h4 id="异步串行通信的字符格式"><a href="#异步串行通信的字符格式" class="headerlink" title="异步串行通信的字符格式"></a><strong>异步串行通信的字符格式</strong></h4><blockquote><p><strong>常用字符格式：1位起始位 8位数据位 无奇偶校验 1位停止位</strong></p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107190213226.png" alt="image-20230107190213226"></p><h5 id="异步串行通信的通信速率"><a href="#异步串行通信的通信速率" class="headerlink" title="异步串行通信的通信速率"></a><strong>异步串行通信的通信速率</strong></h5><h6 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a><strong>波特率</strong></h6><p>​每秒钟传送二进制数码的位数，以bit&#x2F;s（bps）为单位。</p><ul><li>常用的波特率有：9600、19200、38400、57600和115200；</li><li>波特率为115200，表示每秒传输115200位，且每一位数据在数据线上持续时间为Tbit &#x3D; 1&#x2F;115200 ≈ 8.68us。</li></ul><h4 id="异步串行通信的数据接收过程"><a href="#异步串行通信的数据接收过程" class="headerlink" title="异步串行通信的数据接收过程"></a><strong>异步串行通信的数据接收过程</strong></h4><ol><li>接收过程由起始位的下降沿启动；</li><li>接收端等待8个时钟周期，以便建立一个接近比特周期中间的采样点；</li><li>接收端等待16个时钟周期，使其进入第一个数据位周期的中点；</li><li>第一个数据位被采样并存储在接收寄存器中；</li><li>串口模块在采样第二个数据位之前等待另外16个时钟周期；</li><li>重复此过程，直到所有数据位都被采样和存储；</li><li>由停止位的上升沿使数据线返回到空闲状态。</li></ol><h3 id="三种常用的错误校验方式"><a href="#三种常用的错误校验方式" class="headerlink" title="三种常用的错误校验方式"></a><strong>三种常用的错误校验方式</strong></h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>​奇校验表示数据中“1”的个数与校验位“1”的个数之和为奇数；偶校验表示数据中“1”的个数与校验位“1”的个数之和为偶数。</p><h4 id="代码和校验"><a href="#代码和校验" class="headerlink" title="代码和校验"></a>代码和校验</h4><p>​发送方将所发数据块求和，产生一个字节的校验字符附加到数据块末尾。接收方采用同样方式进行检测。</p><h4 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h4><p>​通过某种数学运算实现有效信息与校验位之间的循环校验，常用于磁盘信息的传输、存储区的完整性校验等。</p><h2 id="STM32串口通信"><a href="#STM32串口通信" class="headerlink" title="STM32串口通信"></a>STM32串口通信</h2><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107191214905.png" alt="image-20230107191214905"></p><blockquote><p>串口收发单元主要利用数据寄存器DR，发送引脚TX，接收引脚RX，以及三个通信状态位TXE、TC和RXNE来完成数据的接收和发送。</p></blockquote><p>STM32H750VBT6的串口引脚</p><table><thead><tr><th>串口号</th><th>RX</th><th>TX</th></tr></thead><tbody><tr><td>USART1</td><td>PB15</td><td>PB14</td></tr><tr><td>USART2</td><td>PA3</td><td>PA2</td></tr><tr><td>USART3</td><td>PB11</td><td>PB10</td></tr><tr><td>USART6</td><td>PC7</td><td>PC6</td></tr><tr><td>UART4</td><td>PA1</td><td>PA0</td></tr><tr><td>UART5</td><td>PB12</td><td>PB13</td></tr><tr><td>UART7</td><td>PE7</td><td>PE8</td></tr><tr><td>UART8</td><td>PE0</td><td>PE1</td></tr></tbody></table><h3 id="串口初始化数据类型"><a href="#串口初始化数据类型" class="headerlink" title="串口初始化数据类型"></a><strong>串口初始化数据类型</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107192804209.png" alt="image-20230107192804209"></p><h3 id="STM32H750-微控制器-HAL-库中常用的串口函数："><a href="#STM32H750-微控制器-HAL-库中常用的串口函数：" class="headerlink" title="STM32H750 微控制器 HAL 库中常用的串口函数："></a>STM32H750 微控制器 HAL 库中常用的串口函数：</h3><h4 id="HAL-UART-Init-：初始化串口设备。"><a href="#HAL-UART-Init-：初始化串口设备。" class="headerlink" title="HAL_UART_Init()：初始化串口设备。"></a>HAL_UART_Init()：初始化串口设备。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107192942341.png" alt="image-20230107192942341"></p><h4 id="HAL-UART-Transmit-：向串口发送数据。"><a href="#HAL-UART-Transmit-：向串口发送数据。" class="headerlink" title="HAL_UART_Transmit()：向串口发送数据。"></a>HAL_UART_Transmit()：向串口发送数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193017730.png" alt="image-20230107193017730"></p><h4 id="HAL-UART-Receive-：从串口接收数据。"><a href="#HAL-UART-Receive-：从串口接收数据。" class="headerlink" title="HAL_UART_Receive()：从串口接收数据。"></a>HAL_UART_Receive()：从串口接收数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193037943.png" alt="image-20230107193037943"></p><h4 id="HAL-UART-Transmit-IT-：启用中断方式向串口发送数据。"><a href="#HAL-UART-Transmit-IT-：启用中断方式向串口发送数据。" class="headerlink" title="HAL_UART_Transmit_IT()：启用中断方式向串口发送数据。"></a>HAL_UART_Transmit_IT()：启用中断方式向串口发送数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193110573.png" alt="image-20230107193110573"></p><h4 id="HAL-UART-Receive-IT-：启用中断方式从串口接收数据。"><a href="#HAL-UART-Receive-IT-：启用中断方式从串口接收数据。" class="headerlink" title="HAL_UART_Receive_IT()：启用中断方式从串口接收数据。"></a>HAL_UART_Receive_IT()：启用中断方式从串口接收数据。</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193131370.png" alt="image-20230107193131370"></p><h4 id="HAL-UART-IRQHandle-r串口中断通用处理函数"><a href="#HAL-UART-IRQHandle-r串口中断通用处理函数" class="headerlink" title="HAL_UART_IRQHandle: r串口中断通用处理函数"></a>HAL_UART_IRQHandle: r串口中断通用处理函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193211185.png" alt="image-20230107193211185"></p><h4 id="HAL-UART-TxCpltCallback-串口发送中断回调函数"><a href="#HAL-UART-TxCpltCallback-串口发送中断回调函数" class="headerlink" title="HAL_UART_TxCpltCallback: 串口发送中断回调函数"></a>HAL_UART_TxCpltCallback: 串口发送中断回调函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193242696.png" alt="image-20230107193242696"></p><h4 id="HAL-UART-RxCpltCallback-串口接收中断回调函数"><a href="#HAL-UART-RxCpltCallback-串口接收中断回调函数" class="headerlink" title="HAL_UART_RxCpltCallback: 串口接收中断回调函数"></a>HAL_UART_RxCpltCallback: <strong>串口接收中断回调函数</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193327081.png" alt="image-20230107193327081"></p><h4 id="HAL-UART-ENABLE-IT-串口中断使能函数"><a href="#HAL-UART-ENABLE-IT-串口中断使能函数" class="headerlink" title="__HAL_UART_ENABLE_IT: 串口中断使能函数"></a>__HAL_UART_ENABLE_IT: 串口中断使能函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193610203.png" alt="image-20230107193610203"></p><h4 id="HAL-UART-GET-FLAG-串口中断标志查询函数"><a href="#HAL-UART-GET-FLAG-串口中断标志查询函数" class="headerlink" title="__HAL_UART_GET_FLAG: 串口中断标志查询函数"></a>__HAL_UART_GET_FLAG: 串口中断标志查询函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193553138.png" alt="image-20230107193553138"></p><h4 id="HAL-UART-CLEAR-IDLEFLAG-空闲中断标志清除函数"><a href="#HAL-UART-CLEAR-IDLEFLAG-空闲中断标志清除函数" class="headerlink" title="__HAL_UART_CLEAR_IDLEFLAG : 空闲中断标志清除函数"></a>__HAL_UART_CLEAR_IDLEFLAG : 空闲中断标志清除函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107193532379.png" alt="image-20230107193532379"></p><h4 id="USART-RX-STA-状态标记变量"><a href="#USART-RX-STA-状态标记变量" class="headerlink" title="USART_RX_STA 状态标记变量"></a>USART_RX_STA 状态标记变量</h4><blockquote><p>从零开始，串口中断接收到一个数据(一个字节)自增1,当数据读取全部OK时候,（也就是回车换行符\r\n的时候）,那么USART_RX_STA的最高位置1 表示串口数据全部接收完毕,然后就可以在main函数里处理数据.</p></blockquote><p>uint16_t USART_RX_STA</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107194302211.png" alt="image-20230107194302211"></p><h2 id="任务1：非中断发送接收"><a href="#任务1：非中断发送接收" class="headerlink" title="任务1：非中断发送接收"></a>任务1：非中断发送接收</h2><h3 id="要求：-从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。"><a href="#要求：-从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。" class="headerlink" title="要求： 从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。"></a>要求： 从PC上发送5个字符到开发板，开发板收到后将字符原样发回到PC。</h3><h3 id="配置串口"><a href="#配置串口" class="headerlink" title="配置串口"></a>配置串口</h3><p>使用USART2： </p><p>mode为<strong>异步模式，无硬件流控</strong></p><p>设置通信参数：<br>波特率115200<br>8位数据位<br>无奇偶校验<br>1位停止位<br>使能接收和发送<br>16倍过采样</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107195129799.png" alt="image-20230107195129799"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收数组定义</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="type">uint8_t</span> Buf[<span class="number">10</span>] ;</span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  <span class="keyword">if</span>(HAL_UART_Receive(&amp;huart2,Buf,<span class="number">5</span>,<span class="number">0xffff</span>) == HAL_OK)&#123; <span class="comment">// 接收数据</span></span><br><span class="line">      HAL_UART_Transmit(&amp;huart2,Buf,<span class="number">5</span>,<span class="number">0xffff</span>);<span class="comment">//原样发回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h3 id="程序效果"><a href="#程序效果" class="headerlink" title="程序效果"></a>程序效果</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107210143947.png" alt="image-20230107210143947"></p><h2 id="任务2：中断方式发送接收"><a href="#任务2：中断方式发送接收" class="headerlink" title="任务2：中断方式发送接收"></a>任务2：中断方式发送接收</h2><p>其他设置和上面一样 </p><h3 id="需要打开串口中断"><a href="#需要打开串口中断" class="headerlink" title="需要打开串口中断"></a>需要打开串口中断</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230107211624630.png" alt="image-20230107211624630"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接收区的大小 使用宏定义方便后续更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BuffSize  7 <span class="comment">//接受区大小</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量声明</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PM */</span></span><br><span class="line"><span class="type">uint8_t</span> Buf[BuffSize] ; <span class="comment">//接收区</span></span><br><span class="line"><span class="type">uint8_t</span> Rx_Flag = <span class="number">0</span>; <span class="comment">// 接收状态定义</span></span><br><span class="line"><span class="comment">/* USER CODE END PM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart2,(<span class="type">uint8_t</span>*)<span class="string">&quot;Hello word\r\n&quot;</span>,<span class="keyword">sizeof</span> (<span class="string">&quot;Hello word\r\n&quot;</span>),<span class="number">0xffff</span>);<span class="comment">//单片机上电初始化 输出Helo word</span></span><br><span class="line"></span><br><span class="line">    HAL_UART_Receive_IT(&amp;huart2,(<span class="type">uint8_t</span>*)Buf,BuffSize);<span class="comment">//使能串口接收中断</span></span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">//主函数</span></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    <span class="keyword">if</span>(Rx_Flag == <span class="number">1</span>)&#123;</span><br><span class="line">        Rx_Flag =<span class="number">0</span>;</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart2,(<span class="type">uint8_t</span>*)<span class="string">&quot;Input data:\r\n&quot;</span>,<span class="keyword">sizeof</span> (<span class="string">&quot;Input data:\r\n&quot;</span>));</span><br><span class="line">        HAL_UART_Transmit_IT(&amp;huart2,Buf,BuffSize);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收回调函数</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(huart-&gt;Instance == USART2)&#123;</span><br><span class="line">        Rx_Flag = <span class="number">1</span>;</span><br><span class="line">        HAL_UART_Receive_IT(&amp;huart2,Buf,BuffSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> UART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记三</title>
      <link href="/posts/48968.html"/>
      <url>/posts/48968.html</url>
      
        <content type="html"><![CDATA[<h1 id="STM32定时器"><a href="#STM32定时器" class="headerlink" title="STM32定时器"></a>STM32定时器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>STM32的定时器可用于不同的目的，包括生成PWM信号、测量时间间隔、生成中断和控制外设等。它有几种不同类型的定时器，包括通用定时器、高级控制定时器、低功耗定时器和系统滴答定时器。</p><p>​定时器是对周期固定的脉冲信号进行计数，如MCU内部的外设时钟(APB)。</p><p>​计数器是对周期不确定的脉冲信号进行计数，如MCU的I&#x2F;O引脚所引入的外部脉冲信号。</p><p>​结论：定时器和计数器本质上都是计数器，定时器是计数器的一种特例。</p><h3 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a><strong>定时器分类</strong></h3><table><thead><tr><th align="center">种类</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">基本定时器</td><td align="center">几乎没有任何输入&#x2F;输出通道，常用作时基，实现基本的定时&#x2F;计数功能</td></tr><tr><td align="center">通用定时器</td><td align="center">具备多路独立的捕获和比较通道，可以完成定时计数、输入捕获、输出比较等功能</td></tr><tr><td align="center">高级定时器</td><td align="center">除具备通用定时器的功能外，还具备带死区控制的互补信号输出、紧急刹车关断输入等功能，可用于电机控制和数字电源设计</td></tr></tbody></table><h3 id="定时器的时钟频率"><a href="#定时器的时钟频率" class="headerlink" title="定时器的时钟频率"></a><strong>定时器的时钟频率</strong></h3><p>外设总线挂在TIM外设</p><table><thead><tr><th></th><th align="center"><strong>外设总线时钟APB1</strong>-AHB1</th><th align="center"><strong>外设总线时钟APB2</strong>-AHB2</th></tr></thead><tbody><tr><td></td><td align="center">LPTIM1（低功耗定时器）</td><td align="center"></td></tr><tr><td>基本定时器</td><td align="center">TIM6-TIM7</td><td align="center"></td></tr><tr><td>通用定时器</td><td align="center">TIM2-TIM3-TIM4-TIM5-TIM12-TIM13-TIM14</td><td align="center">TIM15-TIM16-TIM17</td></tr><tr><td>高级定时器</td><td align="center"></td><td align="center">TIM1-TIM8</td></tr></tbody></table><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231132006932.png" alt="image-20221231132006932"></p><p>由上图看出AHB1,2 和APB1,2 的总线频率为240Mhz 挂在在APB1，2和AHB1，2 上的定时器的频率为120Mhz</p><h3 id="定时器的三种计数模式"><a href="#定时器的三种计数模式" class="headerlink" title="定时器的三种计数模式"></a><strong>定时器的三种计数模式</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231132738219.png" alt="image-20221231132738219"></p><h3 id="溢出值CNT与自动重载值ARR的关系列表"><a href="#溢出值CNT与自动重载值ARR的关系列表" class="headerlink" title="溢出值CNT与自动重载值ARR的关系列表"></a><strong>溢出值CNT与自动重载值ARR的关系列表</strong></h3><table><thead><tr><th align="center">计数模式</th><th align="center">计数器溢出值</th><th align="center">计数器重载值</th></tr></thead><tbody><tr><td align="center"><strong>递增计数</strong></td><td align="center"><strong>CNT &#x3D; ARR</strong></td><td align="center"><strong>CNT &#x3D; 0</strong></td></tr><tr><td align="center"><strong>递减计数</strong></td><td align="center"><strong>CNT &#x3D; 0</strong></td><td align="center"><strong>CNT &#x3D; ARR</strong></td></tr><tr><td align="center"><strong>中心对齐计数</strong></td><td align="center"><strong>CNT &#x3D; ARR-1</strong> <br><strong>CNT &#x3D; 1</strong><br></td><td align="center"><strong>CNT &#x3D; ARR</strong><br><strong>CNT &#x3D; 0</strong><br></td></tr></tbody></table><h3 id="定时器的定时时间计算公式"><a href="#定时器的定时时间计算公式" class="headerlink" title="定时器的定时时间计算公式"></a><strong>定时器的定时时间计算公式</strong></h3><p><strong>定时时间 &#x3D; 计数值*计数时间</strong></p><p><strong>定时时间 &#x3D; 计数值&#x2F;时钟频率</strong><br>$$<br>T_{(s)}&#x3D;\frac{(ARR+1)*(PSC+1)}{𝐓𝐈𝐌_𝐂𝐋_{Hz}}<br>$$<br>例如:</p><p>即时500ms 使用tim2 </p><p>因为tim2 挂载在APB2 TIM2的时钟频率为240Mhz PSC为2399<br>$$<br>500_{ms}&#x3D;\frac{(ARR+1)*(23999+1)}{240000}<br>$$<br>通过计算Arr&#x3D;4999</p><h3 id="HAL库函数解析"><a href="#HAL库函数解析" class="headerlink" title="HAL库函数解析"></a>HAL库函数解析</h3><h4 id="HAL-TIM-Base-Start-IT"><a href="#HAL-TIM-Base-Start-IT" class="headerlink" title="HAL_TIM_Base_Start_IT"></a><strong>HAL_TIM_Base_Start_IT</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231141044345.png" alt="image-20221231141044345"></p><h4 id="回调函数HAL-TIM-PeriodElapsedCallback"><a href="#回调函数HAL-TIM-PeriodElapsedCallback" class="headerlink" title="回调函数HAL_TIM_PeriodElapsedCallback"></a><strong>回调函数HAL_TIM_PeriodElapsedCallback</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231141223889.png" alt="image-20221231141223889"></p><h2 id="任务1定时闪烁指示灯"><a href="#任务1定时闪烁指示灯" class="headerlink" title="任务1定时闪烁指示灯"></a>任务1<strong>定时闪烁指示灯</strong></h2><p>时钟的配置和之前的一样 并且将LED小灯打开 </p><h3 id="配置TIM2"><a href="#配置TIM2" class="headerlink" title="配置TIM2"></a>配置TIM2</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231162909317.png" alt="image-20221231162909317"></p><p>在Clock Source（中断来源） 使用Internal Clock </p><h3 id="使能定时器2的中断中断优先级使用默认值"><a href="#使能定时器2的中断中断优先级使用默认值" class="headerlink" title="使能定时器2的中断中断优先级使用默认值"></a><strong>使能定时器2的中断中断优先级使用默认值</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231163212877.png" alt="image-20221231163212877"></p><p>配置定时时间 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231163359779.png" alt="image-20221231163359779"></p><p>这里我配置的为： </p><p>Prtscaler (定时器分频系数)  : 23999</p><p>Counter Mode(计数模式)    Up(向上计数模式)                    </p><p>Counter Period(自动重装载值) :    4999     </p><p>CKD(时钟分频因子) ：       No Division 不分频                       </p><p>auto-reload-preload(自动重装载)  :    Enable 使能</p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>初始化使能定时器2</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231170317204.png" alt="image-20221231170317204"></p><p>添加定时器溢出的中断回调函数</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231170409617.png" alt="image-20221231170409617"></p><h2 id="任务2-PWM"><a href="#任务2-PWM" class="headerlink" title="任务2 PWM"></a>任务2 PWM</h2><h3 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a><strong>基本特性</strong></h3><p>脉冲宽度调制（PWM）是一种对模拟信号电平进行数字编码的方法。广泛应用于电机控制、灯光的亮度调节、功率控制等领域</p><h3 id="PWM信号的两个基本参数"><a href="#PWM信号的两个基本参数" class="headerlink" title="PWM信号的两个基本参数"></a><strong>PWM信号的两个基本参数</strong></h3><ul><li><strong>周期（Period）</strong></li></ul><p>​<strong>一个完整PWM波形所持续的时间</strong></p><ul><li><strong>占空比（Duty）</strong></li></ul><p>​<strong>高电平持续时间（Ton）与周期时间（Period）的比值</strong></p><h4 id="周期计算公式"><a href="#周期计算公式" class="headerlink" title="周期计算公式"></a>周期计算公式</h4><p>$$<br>Period(ms) &#x3D; {( ARR + 1 ) * ( PSC + 1 )\over  TIMx_CLK_{(KHz)}}<br>$$</p><blockquote><p>TIMx_CLK：定时器X挂在总线的频率</p></blockquote><h4 id="占空比计算公式"><a href="#占空比计算公式" class="headerlink" title="占空比计算公式"></a><strong>占空比计算公式</strong></h4><p>$$<br>Duty &#x3D; （(TIMx-&gt;CCR1) &#x2F; (ARR+1) ）* 100%<br>$$</p><p>使用的TIM几 就是TIM几的CRR</p><h4 id="频率计算公式"><a href="#频率计算公式" class="headerlink" title="频率计算公式"></a>频率计算公式</h4><p>周期的到倒数<br>$$<br>F_{KHz}&#x3D;{TIMx_CLK_{(KHz)}\over (ARR+1)∗(PSC+1)}<br>$$<br>例如： </p><blockquote><p>我要设置一个频率为2Khz的PWM信号 周期为 2Ms 占空比为 47.5% 的信号</p><p>使用TIM2 挂在在APB1 频率为 240Mhz</p><p>PSC 为 239 </p><p>ARR通过计算&#x3D; 1999</p><p>CCR 通过计算为 950</p></blockquote><h3 id="PWM信号的电压调节原理"><a href="#PWM信号的电压调节原理" class="headerlink" title="PWM信号的电压调节原理"></a><strong>PWM信号的电压调节原理</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171151053.png" alt="image-20221231171151053"></p><h3 id="PWM输出的工作原理"><a href="#PWM输出的工作原理" class="headerlink" title="PWM输出的工作原理"></a><strong>PWM输出的工作原理</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171245742.png" alt="image-20221231171245742"></p><h4 id="参数计算公式"><a href="#参数计算公式" class="headerlink" title="参数计算公式"></a>参数计算公式</h4><p>$$<br>Period(s) &#x3D; ( ARR + 1 ) * ( PSC + 1 ) &#x2F; TIMx_CLK<br>$$</p><p>$$<br>Duty &#x3D; ( CRR &#x2F; ( ARR + 1 ) ) * 100%<br>$$</p><p><strong>假设预分频时钟CK_PSC为100MHz，产生周期为1ms，占空比为47.5%的PWM信号</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171451379.png" alt="image-20221231171451379"></p><h4 id="多通道输出"><a href="#多通道输出" class="headerlink" title="多通道输出"></a><strong>多通道输出</strong></h4><p>​定时器的每个通道都可以输出PWM信号，对于同一个定时器而言，它的多个通道共享同一个自动重载寄存器，因此可以输出占空比不同，但周期相同的PWM信号。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231171712932.png" alt="image-20221231171712932"></p><h3 id="PWM输出的两种模式"><a href="#PWM输出的两种模式" class="headerlink" title="PWM输出的两种模式"></a><strong>PWM输出的两种模式</strong></h3><h4 id="PWM模式1"><a href="#PWM模式1" class="headerlink" title="PWM模式1"></a><strong>PWM模式1</strong></h4><p>​递增计数时，当TIMx_CNT（当前计数值）&lt;TIMx_CCR（捕获&#x2F;比较值）时，通道输出为有效电平，否则为无效电平。递减计数模式则刚好相反。</p><p><strong>PWM模式2</strong></p><p>​递增计数时，当TIMx_CNT（当前计数值）&lt;TIMx_CCR（捕获&#x2F;比较值）时，通道输出为无效电平，否则为有效电平。递减计数模式则刚好相反。</p><blockquote><p><strong>递增计数，高电平有效时：</strong></p><ul><li><p><strong>PWM1模式下的CCR用于控制高电平持续的时间</strong></p></li><li><p><strong>PWM2模式下的CCR用于控制低电平持续的时间</strong></p></li></ul><p><strong>总结：互补输出</strong></p></blockquote><h3 id="HAL库函数介绍"><a href="#HAL库函数介绍" class="headerlink" title="HAL库函数介绍"></a>HAL库函数介绍</h3><h4 id="定时器PWM输出启动函数：HAL-TIM-PWM-Start"><a href="#定时器PWM输出启动函数：HAL-TIM-PWM-Start" class="headerlink" title="定时器PWM输出启动函数：HAL_TIM_PWM_Start"></a><strong>定时器PWM输出启动函数：HAL_TIM_PWM_Start</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231172727456.png" alt="image-20221231172727456"></p><h4 id="定时器比较-x2F-捕获寄存器设置函数：-HAL-TIM-SET-COMPARE"><a href="#定时器比较-x2F-捕获寄存器设置函数：-HAL-TIM-SET-COMPARE" class="headerlink" title="定时器比较&#x2F;捕获寄存器设置函数：__HAL_TIM_SET_COMPARE"></a><strong>定时器比较&#x2F;捕获寄存器设置函数：__HAL_TIM_SET_COMPARE</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231172745910.png" alt="image-20221231172745910"></p><h3 id="输出PWM信号"><a href="#输出PWM信号" class="headerlink" title="输出PWM信号"></a>输出PWM信号</h3><blockquote><p>输出一个频率为2Khz的PWM信号 周期为 2Ms 占空比从0到100的PWM信号</p></blockquote><h4 id="PWM设置"><a href="#PWM设置" class="headerlink" title="PWM设置"></a>PWM设置</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231215916189.png" alt="image-20221231215916189"></p><p>配置频率与周期</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231220005448.png" alt="image-20221231220005448"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231220356202.png" alt="image-20221231220356202"></p><h4 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a><strong>程序编写</strong></h4><p>在主程序中 启用TIM2计时器通道一的PWM输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* USER CODE BEGIN 2 */</span>  </span><br><span class="line"><span class="comment">//启动定时器Tim2 通道1输出为2ms  pwm信号</span></span><br><span class="line">    HAL_TIM_PWM_Start(&amp;htim2,TIM_CHANNEL_1);</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br></pre></td></tr></table></figure><p>在while循环中改变占空比</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Infinite loop */</span></span><br><span class="line"> <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>;i+=<span class="number">200</span>) &#123;</span><br><span class="line">                 __HAL_TIM_SetCompare(&amp;htim2,TIM_CHANNEL_1,i);</span><br><span class="line">         HAL_Delay(<span class="number">4</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><p>下图为使用逻辑分析仪测得的波形</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221231223311979.png" alt="image-20221231223311979"></p><h2 id="任务3-使用超声波模块测距"><a href="#任务3-使用超声波模块测距" class="headerlink" title="任务3 使用超声波模块测距"></a>任务3 使用超声波模块测距</h2><blockquote><p>使用超声波模块测距 距离小于5cm LED灯亮</p></blockquote><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>型号：HC-SR04</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291811453.png" alt="image-20220629181110841"></p><p>超声波测距模块是用来测量距离的一种产品，通过发送和收超声波，利用时间差和声音传播速度，计算出模块到前方障碍物的距离。</p><ul><li>怎么让它发送波</li></ul><p>​Trig ，给Trig端口至少10us的高电平</p><ul><li>怎么知道它开始发了</li></ul><p>​Echo信号，由低电平跳转到高电平，表示开始发送波</p><ul><li>怎么知道接收了返回波</li></ul><p>​Echo，由高电平跳转回低电平，表示波回来了</p><ul><li>怎么算时间</li></ul><p>​Echo引脚维持高电平的时间！</p><p>​波发出去的那一下，开始启动定时器</p><p>​波回来的拿一下，我们开始停止定时器，计算出中间经过多少时间</p><ul><li>怎么算距离</li></ul><p>​距离 &#x3D; 速度 （340m&#x2F;s）* 时间&#x2F;2</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126619.png" alt="image-20220629181318917"></p><h3 id="编写一个微秒的延迟程序"><a href="#编写一个微秒的延迟程序" class="headerlink" title="编写一个微秒的延迟程序"></a>编写一个微秒的延迟程序</h3><p>配置Tim2每计数一次 花费1微秒</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101121931318.png" alt="image-20230101121931318"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_Delay_us</span><span class="params">(<span class="type">uint16_t</span> n_us)</span>&#123;</span><br><span class="line">    <span class="comment">//使能定时器2计数</span></span><br><span class="line">    __HAL_TIM_ENABLE(&amp;htim2);</span><br><span class="line">    __HAL_TIM_SetCounter(&amp;htim2,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (__HAL_TIM_GetCounter(&amp;htim2)&lt; ((<span class="number">1</span>*n_us)<span class="number">-1</span>));</span><br><span class="line">    <span class="comment">//关闭定时器2计数</span></span><br><span class="line">    __HAL_TIM_DISABLE(&amp;htim2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br></pre></td></tr></table></figure><h3 id="配置GPIO口"><a href="#配置GPIO口" class="headerlink" title="配置GPIO口"></a>配置GPIO口</h3><p>Trig 需要发波 所以是output模式 连接到 PA0号GPIO口</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101122013745.png" alt="image-20230101122013745"></p><p>Echo 需要接受返回来的波 是Input模式 连接到 PA1号GPIO口</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20230101122039881.png" alt="image-20230101122039881"></p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">   <span class="comment">//1.先给Trig一个最少10us的高电平</span></span><br><span class="line">     HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_SET);<span class="comment">//拉高</span></span><br><span class="line">     TIM2_Delay_us(<span class="number">20</span>);</span><br><span class="line">     HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET);<span class="comment">//拉低</span></span><br><span class="line">     <span class="comment">//echo 由底电平转为高电平 表示发波完成 启动定时器计数</span></span><br><span class="line">     <span class="keyword">while</span> (HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_RESET);</span><br><span class="line">     HAL_TIM_Base_Start(&amp;htim2); <span class="comment">//开启定时器</span></span><br><span class="line">     <span class="comment">//由高电平转为低电平 表示波回来了 停止定时器计数</span></span><br><span class="line">     <span class="keyword">while</span> (HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin) == GPIO_PIN_SET);</span><br><span class="line">     HAL_TIM_Base_Stop(&amp;htim2);<span class="comment">//关闭计时器</span></span><br><span class="line">     cnt = __HAL_TIM_GetCounter(&amp;htim2); <span class="comment">//获取计数值</span></span><br><span class="line">     distance = cnt *<span class="number">340</span>/<span class="number">2</span>*<span class="number">0.000001</span>*<span class="number">100</span>; <span class="comment">//单位 cm</span></span><br><span class="line">     <span class="keyword">if</span> (distance &lt; <span class="number">5</span>)&#123; <span class="comment">//判断如果小于5cm LED点亮 反之熄灭</span></span><br><span class="line">         </span><br><span class="line">         HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);</span><br><span class="line">     &#125;</span><br><span class="line">     HAL_Delay(<span class="number">100</span>);<span class="comment">//防止系统卡死</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> STM32定时器 </tag>
            
            <tag> STM32H750VBT6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记二</title>
      <link href="/posts/56457.html"/>
      <url>/posts/56457.html</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-中断"><a href="#STM32-中断" class="headerlink" title="STM32 中断"></a>STM32 中断</h1><h2 id="上节补充："><a href="#上节补充：" class="headerlink" title="上节补充："></a>上节补充：</h2><h3 id="头文件、数据类型及函数声明的添加位置"><a href="#头文件、数据类型及函数声明的添加位置" class="headerlink" title="头文件、数据类型及函数声明的添加位置"></a><strong>头文件、数据类型及函数声明的添加位置</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225122205578.png" alt="image-20221225122205578"></p><h3 id="变量及函数的命名规则"><a href="#变量及函数的命名规则" class="headerlink" title="变量及函数的命名规则"></a><strong>变量及函数的命名规则</strong></h3><p><strong>见名知意：利用英文单词或者其缩写形式定义变量或函数，名称要体现变量的作用或函数的功能，切记不要使用拼音来命名。</strong></p><p><strong>2. 变量一般采用名词形式命名，多个单词间利用大小写字母作为间隔。全局变量的首字母大写，如KeyFlag；局部变量的首字母小写，如keyFlag，便于区分全局变量和局部变量。</strong></p><p><strong>3. 函数一般采用动宾结构命名，首字母大写，也是利用大小写字母作为间隔，如GetValue等。</strong></p><p><strong>4. 宏定义和用户自定义数据类型全部采用大写字母，利用下划线作为间隔，如KEY_STATE等。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a>什么是中断</h3><p>​STM32中断是一种电子设备中的功能，它允许设备在执行主程序时暂停执行，以便处理来自外部设备或系统事件的信息。中断是通过向设备发送特殊的信号（称为中断请求）来触发的，该信号会使设备暂停当前的执行流程，转而执行一段特定的代码，称为中断服务程序（ISR）。在中断服务程序执行完毕后，设备会返回到原来的执行流程。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219205550471.png" alt="image-20221219205550471"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219205623688.png" alt="image-20221219205623688"></p><p>在STM32H750芯片中，你可以使用以下中断源：</p><ul><li>外部中断：外部中断可以由芯片的外部中断线触发，支持软件触发、硬件触发和唤醒功能。</li><li>定时器中断：STM32H750芯片支持多种定时器，可以用于产生周期性中断。</li><li>串口中断：串口中断可以用于响应串口接收到的数据。</li><li>ADC中断：ADC中断可以用于响应ADC转换完成的信息。</li></ul><p>具体的步骤包括：</p><ol><li>配置中断源：在芯片的外设模块（如定时器、串口）中启用中断功能。</li><li>定义中断服务程序：编写中断服务程序，该程序在中断触发时会被执行。</li><li>配置中断优先级：设置中断优先级，以便在多个中断同时发生时能够正确处理。</li><li>启用中断：在主程序中启用中断功能，使得芯片能够响应中断请求。</li><li>开启总中断：在主程序的最后开启总中断，使得芯片开始响应中断请求。</li></ol><h3 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h3><p>​中断优先级是指在微控制器中，在多个中断之间进行调度时，规定哪个中断优先级更高。当微控制器处理多个中断时，优先级较高的中断会优先被处理，优先级较低的中断则要等待优先级较高的中断处理完毕之后才能被处理。</p><p>​在微控制器中，中断优先级可以分为若干个级别，每个级别都有一个对应的数值。通常，数值越小，优先级越高。例如，在 STM32H750 微控制器中，中断优先级可以分为 0 到 15 共 16 个级别，数值为 0 的优先级最高，数值为 15 的优先级最低。</p><hr><h2 id="HAL库的中断封装"><a href="#HAL库的中断封装" class="headerlink" title="HAL库的中断封装"></a>HAL库的中断封装</h2><h3 id="HAL库的中断封装-1"><a href="#HAL库的中断封装-1" class="headerlink" title="HAL库的中断封装"></a>HAL库的中断封装</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220200649608.png" alt="image-20221220200649608"></p><h3 id="HAL库对中断的封装处理"><a href="#HAL库对中断的封装处理" class="headerlink" title="HAL库对中断的封装处理"></a>HAL库对中断的封装处理</h3><p>一：统一规定处理各个外设的中断服务程序HAL_PPP_IRQHandler</p><blockquote><p>PPP代表外设名称</p></blockquote><p>二：在中断服务程序HAL_PPP_IRQHandler完成了中断标志的判断和清除</p><p>三：将中断中需要执行的操作以回调函数的形式提供给用户</p><blockquote><p>由外设初始化、中断、处 理完成&#x2F;出错触发的函数</p></blockquote><h3 id="由CubeMX生成的工程中与中断相关的编程文件"><a href="#由CubeMX生成的工程中与中断相关的编程文件" class="headerlink" title="由CubeMX生成的工程中与中断相关的编程文件"></a>由CubeMX生成的工程中与中断相关的编程文件</h3><h4 id="启动文件：-startup-stm32fxxx-或-startup-stm32hxxx"><a href="#启动文件：-startup-stm32fxxx-或-startup-stm32hxxx" class="headerlink" title="启动文件：  startup_stm32fxxx 或 startup_stm32hxxx"></a>启动文件：  startup_stm32fxxx 或 startup_stm32hxxx</h4><ol><li>在该文件中，预先为每个中断编写了一个中断服务程序，只是这些中断服务程序都是死循环，目的只是初始化中断向量表；</li><li>中断服务程序的属性定义为“weak”。weak属性的函数表示：如果该函数没有在其他文件中定义，则使用该函数；如果用户在其他地方定义<br>了该函数，则使用用户定义的函数</li></ol><h4 id="中断服务程序文件：stm32fxxx-it-c-或-startup-stm32hxxx-it-c"><a href="#中断服务程序文件：stm32fxxx-it-c-或-startup-stm32hxxx-it-c" class="headerlink" title="中断服务程序文件：stm32fxxx_it.c  或 startup_stm32hxxx_it.c"></a>中断服务程序文件：stm32fxxx_it.c  或 startup_stm32hxxx_it.c</h4><ol><li><p>用于存放各个中断的中断服务程序；</p></li><li><p>在使用CubeMX软件进行初始化配置时，如果使能了某一个外设的中断功能，那么在生成代码时，相对应的外设中断服务程序HAL_PPP_IRQHandler就会自动添加到该文件中，用户只需要在该函数中添加相应的中断处理代码即可。</p></li></ol><h4 id="外部中断所对应的中断服务程序"><a href="#外部中断所对应的中断服务程序" class="headerlink" title="外部中断所对应的中断服务程序"></a><strong>外部中断所对应的中断服务程序</strong></h4><table><thead><tr><th align="center">外部中断线</th><th align="center">中断服务程序的函数名称</th></tr></thead><tbody><tr><td align="center">外部中断线1(EXTI Line 1)</td><td align="center">EXTI1_IRQHandler</td></tr><tr><td align="center">外部中断线2(EXTI Line 2)</td><td align="center">EXTI2_IRQHandler</td></tr><tr><td align="center">外部中断线3(EXTI Line 3)</td><td align="center">EXTI3_IRQHandler</td></tr><tr><td align="center">外部中断线4(EXTI Line 4)</td><td align="center">EXTI4_IRQHandler</td></tr><tr><td align="center">外部中断线5~9(EXTI Line[9:5] )</td><td align="center">EXTI9_5_IRQHandler</td></tr><tr><td align="center">外部中断线10~ 15(EXTI Line[15:10] )</td><td align="center">EXTI15_10_IRQHandler</td></tr></tbody></table><h4 id="stm32h7xx-it-c文件中的外部中断服务程序"><a href="#stm32h7xx-it-c文件中的外部中断服务程序" class="headerlink" title="stm32h7xx_it.c文件中的外部中断服务程序"></a><strong>stm32h7xx_it.c文件中的外部中断服务程序</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220201510816.png" alt="image-20221220201510816"></p><h4 id="HAL库的外部中断处理流程"><a href="#HAL库的外部中断处理流程" class="headerlink" title="HAL库的外部中断处理流程"></a><strong>HAL库的外部中断处理流程</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202231156.png" alt="image-20221220202231156"></p><h4 id="引脚初始化数据类型"><a href="#引脚初始化数据类型" class="headerlink" title="引脚初始化数据类型"></a><strong>引脚初始化数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202435635.png" alt="image-20221220202435635"></p><h5 id="成员变量Mode的取值范围"><a href="#成员变量Mode的取值范围" class="headerlink" title="成员变量Mode的取值范围"></a>成员变量Mode的取值范围</h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GPIO_MODE_IT_RISING</td><td align="center">上升沿触发</td></tr><tr><td align="center">GPIO_MODE_IT_FALLING</td><td align="center">下降沿触发</td></tr><tr><td align="center">GPIO_MODE_IT_RISING_FALLING</td><td align="center">双边沿触发</td></tr></tbody></table><h4 id="外部中断通用处理函"><a href="#外部中断通用处理函" class="headerlink" title="外部中断通用处理函"></a>外部中断通用处理函</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202701381.png" alt="image-20221220202701381"></p><h4 id="外部中断回调函数"><a href="#外部中断回调函数" class="headerlink" title="外部中断回调函数"></a>外部中断回调函数</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221220202742739.png" alt="image-20221220202742739"></p><h2 id="任务1：按键中断的方式-控制LED"><a href="#任务1：按键中断的方式-控制LED" class="headerlink" title="任务1：按键中断的方式 控制LED"></a>任务1：按键中断的方式 控制LED</h2><h3 id="配置GPIO口"><a href="#配置GPIO口" class="headerlink" title="配置GPIO口"></a>配置GPIO口</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115738703.png" alt="image-20221225115738703"></p><p>电路图</p><p>PC13 为按键有下拉电阻</p><p>PE3 为输出的LED灯</p><p>设置输出LED</p><blockquote><p>设置为 output </p><p>用户标签为LED</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115837063.png" alt="image-20221225115837063"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120304510.png" alt="image-20221225120304510"></p><p>设置按键</p><blockquote><p>选择GPIO_EXTI13</p><p>引脚为外部中断 功能，与外部中 断线EXTI13连接</p><p>用户标签为KEY</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225115935019.png" alt="image-20221225115935019"></p><p>在出现的引脚列表中单 击需要配置的引脚PC13</p><blockquote><p>我的PC13 当按下为高电平 松开为低电平 所以我设置为上升沿触发</p></blockquote><p>GPIO mode 为触发模式</p><p>常用的 就是前三个 分别是：</p><p>依次是 上升沿触发 下降沿触发 双边沿触发（上升下降触发）</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120903522.png" alt="image-20221225120903522"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225120648026.png" alt="image-20221225120648026"></p><h3 id="使能中断"><a href="#使能中断" class="headerlink" title="使能中断"></a>使能中断</h3><p>还是在刚才的窗口中 点击NVIC </p><p>使能引脚对应的外部中断线EXTI Line[15:10]</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225121244284.png" alt="image-20221225121244284"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225121219230.png"></p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><ol><li>编写回调函数</li></ol><blockquote><p>尽量将直接写的代码函数等写在 code Begin下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == KEY_Pin)&#123;</span><br><span class="line">        HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="任务2：改变指示灯闪烁频率"><a href="#任务2：改变指示灯闪烁频率" class="headerlink" title="任务2：改变指示灯闪烁频率"></a>任务2：改变指示灯闪烁频率</h2><h3 id="声明表示闪烁速度的变量"><a href="#声明表示闪烁速度的变量" class="headerlink" title="声明表示闪烁速度的变量"></a>声明表示闪烁速度的变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> Speed = <span class="number">0</span> ; <span class="comment">//声明表示速度的变量</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br></pre></td></tr></table></figure><h3 id="在主函数while循环中-判断Speed的速度"><a href="#在主函数while循环中-判断Speed的速度" class="headerlink" title="在主函数while循环中 判断Speed的速度"></a>在主函数while循环中 判断Speed的速度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    <span class="keyword">switch</span> (Speed) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//当速度为 0  LED每隔100ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//当速度为 1  LED每隔500ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//当速度为 2  LED每隔1000ms 闪烁</span></span><br><span class="line">            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">            HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><p>在中断的回调函数中修改Speed变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (GPIO_Pin == KEY_Pin)&#123;</span><br><span class="line">        Speed++; <span class="comment">//修改Speed 的值</span></span><br><span class="line">        <span class="keyword">if</span>(Speed == <span class="number">3</span>) Speed =<span class="number">0</span>; <span class="comment">//Speed 的取值范围为0 ~2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32学习笔记一</title>
      <link href="/posts/47496.html"/>
      <url>/posts/47496.html</url>
      
        <content type="html"><![CDATA[<h1 id="Stm32-单片机学习笔记"><a href="#Stm32-单片机学习笔记" class="headerlink" title="Stm32 单片机学习笔记"></a>Stm32 单片机学习笔记</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><table><thead><tr><th align="center">使用芯片型号</th><th align="center">开发环境</th><th align="center">开发方式</th></tr></thead><tbody><tr><td align="center">STM32H750VBT6</td><td align="center">CubaMX+CLion</td><td align="center">HAL库</td></tr></tbody></table><p>CubaMX的开发环境配置 可以参考这篇文章</p><blockquote><p><a href="http://www.aubuty.top/2022/08/25/Clion-STM32cubeMX-%E6%90%AD%E5%BB%BA%E8%88%92%E9%80%82%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/">Clion-STM32cubeMX-搭建舒适的STM32开发环境</a></p></blockquote><p>​大家最好要有一些单片机的基础知识比如说51单片机，C语言以及一些数电模电的知识，这样学起来会舒服很多哦！ </p><p>在这里说一下，为什么不讲标准库： </p><p>​首先的话，目前STM32开发方式有以下几种，我整理了一张表格</p><table><thead><tr><th align="center">开发方式</th><th>优点</th><th>缺点</th><th>建议</th></tr></thead><tbody><tr><td align="center">寄存器</td><td>代码效率高</td><td>学习难度大，移植性最低</td><td>了解</td></tr><tr><td align="center">标准库</td><td>开发流程便简单，开发周期缩短</td><td>代码执行效率稍低，移植性较低</td><td>熟悉</td></tr><tr><td align="center">HAL库</td><td>上手简单，移植方便</td><td>执行效率稍低</td><td>掌握</td></tr></tbody></table><p>​STM32已经应用的非常广泛了，并且在工业开发也具有挺高的地位了，所以我们只需要 学会HAL库就可以完成绝大多数的开发了，并且标准库，早在几年前就不再更新维护了，标准库的话，学习有余力的话可以学学，技多不压身嘛！</p><h3 id="STM32的简介"><a href="#STM32的简介" class="headerlink" title="STM32的简介"></a><strong>STM32的简介</strong></h3><h4 id="ARM与STM32的关系"><a href="#ARM与STM32的关系" class="headerlink" title="ARM与STM32的关系"></a><strong>ARM</strong>与<strong>STM32</strong>的关系</h4><p>ARM：Advanced RISC Machines(高级精简指令集机器)</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20220916173832375.png" alt="image-20220916173832375"></p><p>以上是百度百科的简单介绍，可以看出arm在半导体行业，已经是主导地位，全球超过 95%的智能设备都是采用的ARM架构，其公司的发展史也很有意思，小伙伴们感兴趣可以了解一下</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20220916175014412.png" alt="image-20220916175014412"></p><blockquote><p>这个是STM32 的命名规则 </p></blockquote><h4 id="STM32H750VBT6简介"><a href="#STM32H750VBT6简介" class="headerlink" title="STM32H750VBT6简介"></a>STM32H750VBT6简介</h4><table><thead><tr><th align="center">项目</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">内核</td><td align="center">Cortex—M7</td><td align="center"></td></tr><tr><td align="center">Falsh</td><td align="center">128KB</td><td align="center"></td></tr><tr><td align="center">ROM</td><td align="center">1024KB</td><td align="center"></td></tr><tr><td align="center">GPIO</td><td align="center">80个</td><td align="center">PA0<del>15、PB0</del>15、PC0<del>15、PD0</del>15、PE0~15</td></tr><tr><td align="center">ADC</td><td align="center">3个</td><td align="center">五条内部专用通道<br>– 内部参考电压 (VREFINT)，连接到 ADC3<br>– 内部温度传感器 (VSENSE)，连接到 ADC3<br>– VBAT 监测通道 (VBAT&#x2F;4)，连接到 ADC3 <br>– 内部 DAC 通道 1 和通道 2，连接到 ADC2</td></tr><tr><td align="center">DAC</td><td align="center">2个</td><td align="center">12 位模式</td></tr><tr><td align="center">定时器</td><td align="center">高级定时器<code>2个</code></td><td align="center">TIM1-TIM8</td></tr><tr><td align="center"></td><td align="center">通用定时器<code>10个</code></td><td align="center">TIM2-TIM3-TIM4-TIM5-TIM12-TIM13-TIM14-TIM15-TIM16-TIM17</td></tr><tr><td align="center"></td><td align="center">基本定时器<code>2个</code></td><td align="center">TIM6-TIM7</td></tr><tr><td align="center"></td><td align="center">看门狗定时器<code>2个</code></td><td align="center">系统窗口看门狗 (<code>WWDG</code>)，独立看门狗 (<code>IWDG</code>)</td></tr><tr><td align="center"></td><td align="center">滴答定时器</td><td align="center"></td></tr><tr><td align="center">工作电压</td><td align="center">工作电压范围 1.62V~3.6V</td><td align="center"></td></tr><tr><td align="center">通信端口</td><td align="center">CANbus，EBI&#x2F;EMI，以太网，I²C，IrDA，LINbus，MDIO，MMC&#x2F;SD&#x2F;SDIO，QSPI，SAI，SPDIF，SPI，SWPMI，UART&#x2F;USART，USB OTG</td><td align="center">CAN<code>*2</code><br>I2C<code>*4</code><br>SPI<code>*5</code><br>UART<code>*4</code><br>USART<code>*4</code><br>OYG<code>*2</code><br></td></tr><tr><td align="center">系统时钟</td><td align="center">HSE（高速外部振荡器）时钟</td><td align="center">4 MHz 到 48 MHz</td></tr></tbody></table><hr><blockquote><p>我开发板使用的外部晶振为<code>25MHz</code></p></blockquote><p>下图为我开发板的原理图</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/STM32H7xx%20SchDoc%20V11_00.png" alt="STM32H7xx SchDoc V11_00"></p><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><h4 id="什么是GPIO？"><a href="#什么是GPIO？" class="headerlink" title="什么是GPIO？"></a>什么是GPIO？</h4><blockquote><p><strong>GPIO是通用输入&#x2F;输出（General Purpose I&#x2F;O）的简称，主要用</strong></p><p><strong>于工业现场需要用到数字量输入&#x2F;输出的场合，例如：</strong></p></blockquote><ul><li><p><strong>输出功能：</strong>继电器、 LED、蜂鸣器等的控制</p></li><li><p><strong>输入功能：</strong>传感器状态、高低电平等信息的读取</p></li><li><p><strong>复用功能：</strong>片内外设的对外接口**</p></li><li><p><strong>时序模拟：</strong>模拟SPI、I2C和UART等常用接口的时序</p></li></ul><h4 id="电路结构"><a href="#电路结构" class="headerlink" title="电路结构"></a>电路结构</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215203902703.png" alt="image-20221215203902703"><br>$$</p><p>$$</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221216100541944.png" alt="image-20221216100541944"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215205623228.png" alt="image-20221215205623228"></p><h4 id="GPIO工作模式的用法总结"><a href="#GPIO工作模式的用法总结" class="headerlink" title="GPIO工作模式的用法总结"></a><strong>GPIO工作模式的用法总结</strong></h4><h5 id="1-输入模式"><a href="#1-输入模式" class="headerlink" title="1.输入模式"></a>1.<strong>输入模式</strong></h5><p>  <strong>浮空输入：按键识别</strong></p><p>  <strong>上拉输入：IO内部上拉电阻输入</strong></p><p>  <strong>下拉输入：IO内部下拉电阻输入</strong></p><h5 id="2-模拟模式"><a href="#2-模拟模式" class="headerlink" title="2.模拟模式"></a>2.<strong>模拟模式</strong></h5><p>  <strong>作为片内模拟外设的对外引脚</strong></p><p>  <strong>单纯作为低功耗使用</strong></p><hr><ul><li>输出模式<ul><li>推挽输出：可以输出高&#x2F;电平，主要用于连接数字器件，如指示灯和继电器等模块；</li><li>开漏输出：只能输出低电平，适合于电流型驱动，也可作为电平转换。</li></ul></li><li>复用模式<ul><li>复用推挽：片内外设功能（URAT的TX，RX，SPI的MOSI，MISO,SCK，SS ）；</li><li>复用开漏：片内外设功能（ I2C的SCL，SDA ）。</li></ul></li></ul><h4 id="引脚初始化数据类型"><a href="#引脚初始化数据类型" class="headerlink" title="引脚初始化数据类型"></a><strong>引脚初始化数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215210422481.png" alt="image-20221215210422481"></p><h5 id="成员变量Pin的取值范围"><a href="#成员变量Pin的取值范围" class="headerlink" title="成员变量Pin的取值范围"></a><strong>成员变量Pin的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_PIN_0</strong></td><td align="center"><strong>选择该端口的引脚0</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_1</strong></td><td align="center"><strong>选择该端口的引脚1</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_2</strong></td><td align="center"><strong>选择该端口的引脚2</strong></td></tr><tr><td align="center"><strong>GPIO_PIN_3</strong></td><td align="center"><strong>选择该端口的引脚3</strong></td></tr><tr><td align="center">***</td><td align="center">***</td></tr><tr><td align="center"><strong>GPIO_PIN_15</strong></td><td align="center"><strong>选择该端口的引脚15</strong></td></tr><tr><td align="center">**GPIO_PIN_All **</td><td align="center"><strong>选择该端口所有引脚</strong></td></tr></tbody></table><h5 id="成员变量Mode的取值范围"><a href="#成员变量Mode的取值范围" class="headerlink" title="成员变量Mode的取值范围"></a><strong>成员变量Mode的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">GPIO_MODE_INPUT</td><td align="center">浮空输入模式</td></tr><tr><td align="center">GPIO_MODE_OUTPUT_PP</td><td align="center">推挽输出模式</td></tr><tr><td align="center">GPIO_MODE_OUTPUT_OD</td><td align="center">开漏输出模式</td></tr><tr><td align="center">GPIO_MODE_AF_PP</td><td align="center">复用功能下的推挽模式</td></tr><tr><td align="center">GPIO_MODE_AF_OD</td><td align="center">复用功能下的开漏模式</td></tr><tr><td align="center">GPIO_MODE_ANALOG</td><td align="center">模拟模式</td></tr></tbody></table><p><strong>成员变量Pull的取值范围</strong></p><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_NOPULL</strong></td><td align="center"><strong>没有上拉或下拉电阻激活</strong></td></tr><tr><td align="center"><strong>GPIO_PULLUP</strong></td><td align="center"><strong>上拉电阻激活</strong></td></tr><tr><td align="center"><strong>GPIO_PULLDOWN</strong></td><td align="center"><strong>下拉电阻激活</strong></td></tr></tbody></table><h5 id="成员变量Speed的取值范围"><a href="#成员变量Speed的取值范围" class="headerlink" title="成员变量Speed的取值范围"></a><strong>成员变量Speed的取值范围</strong></h5><table><thead><tr><th align="center">宏常量定义</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>GPIO_SPEED_FREQ_LOW</strong></td><td align="center"><strong>引脚输出速度2MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_MEDIUM</strong></td><td align="center"><strong>引脚输出速度12.5MHz～50MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_HIGH</strong></td><td align="center"><strong>引脚输出速度25MHz～100MHz</strong></td></tr><tr><td align="center"><strong>GPIO_SPEED_FREQ_VERY_HIGH</strong></td><td align="center"><strong>引脚输出速度50MHz～200MHz</strong></td></tr></tbody></table><p><strong>成员变量Alternate的取值范围</strong></p><ul><li>Alternate表示引脚的复用功能；</li><li>由于不同型号的STM32微控制器片内集成的外设不同，因此该成员变量的取值范围由芯片型号决定。</li><li>以STM32F4系列芯片为例，通过查阅stm32H7xx_hal_gpio_ex.h文件可以了解Alternate的取值范围；</li><li>该成员变量的取值一般通过CubeMX软件分配，不需要用户手动设置；</li></ul><h4 id="引脚电平状态数据类型"><a href="#引脚电平状态数据类型" class="headerlink" title="引脚电平状态数据类型"></a><strong>引脚电平状态数据类型</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215211612934.png" alt="image-20221215211612934"></p><blockquote><p><strong>使用枚举类型的好处：提高了程序的可读性，并通过限定变量</strong> <strong>的取值范围，来确保变量的合法性</strong></p></blockquote><h4 id="使用HAL库的GPIO引脚初始化步骤"><a href="#使用HAL库的GPIO引脚初始化步骤" class="headerlink" title="使用HAL库的GPIO引脚初始化步骤"></a>使用HAL库的GPIO引脚初始化步骤</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213012641.png" alt="image-20221215213012641"></p><h4 id="GPIO外设接口函数的概述"><a href="#GPIO外设接口函数的概述" class="headerlink" title="GPIO外设接口函数的概述"></a><strong>GPIO外设接口函数的概述</strong></h4><h5 id="初始化函数"><a href="#初始化函数" class="headerlink" title="初始化函数"></a><strong>初始化函数</strong></h5><ul><li><h5 id="HAL-GPIO-Init-：用于完成引脚的初始化；"><a href="#HAL-GPIO-Init-：用于完成引脚的初始化；" class="headerlink" title="HAL_GPIO_Init ：用于完成引脚的初始化；"></a><code>HAL_GPIO_Init ：用于完成引脚的初始化；</code></h5></li></ul><p>​<img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213612676.png" alt="image-20221215213612676"></p><ul><li><h6 id="HAL-GPIO-DeInit-：用于复位引脚到初始状态；"><a href="#HAL-GPIO-DeInit-：用于复位引脚到初始状态；" class="headerlink" title=" HAL_GPIO_DeInit ：用于复位引脚到初始状态；"></a><code> HAL_GPIO_DeInit ：用于复位引脚到初始状态；</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213642893.png" alt="image-20221215213642893"></p><h5 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a><strong>控制函数</strong></h5><ul><li><h6 id="HAL-GPIO-ReadPin-：用于读取引脚电平状态"><a href="#HAL-GPIO-ReadPin-：用于读取引脚电平状态" class="headerlink" title="HAL_GPIO_ReadPin ：用于读取引脚电平状态"></a><code>HAL_GPIO_ReadPin ：用于读取引脚电平状态</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213831597.png" alt="image-20221215213831597"></p><ul><li><h6 id="HAL-GPIO-WritePin-：用于设置引脚电平状态"><a href="#HAL-GPIO-WritePin-：用于设置引脚电平状态" class="headerlink" title="HAL_GPIO_WritePin ：用于设置引脚电平状态"></a><strong><code>HAL_GPIO_WritePin ：用于设置引脚电平状态</code></strong></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213900821.png" alt="image-20221215213900821"></p><ul><li><h6 id="HAL-GPIO-TogglePin-：用于翻转引脚电平状态"><a href="#HAL-GPIO-TogglePin-：用于翻转引脚电平状态" class="headerlink" title="HAL_GPIO_TogglePin ：用于翻转引脚电平状态"></a><code>HAL_GPIO_TogglePin ：用于翻转引脚电平状态</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213911153.png" alt="image-20221215213911153"></p><h5 id="配置函数"><a href="#配置函数" class="headerlink" title="配置函数"></a><strong>配置函数</strong></h5><ul><li><h6 id="HAL-GPIO-LockPin：用于锁定引脚的配置"><a href="#HAL-GPIO-LockPin：用于锁定引脚的配置" class="headerlink" title="HAL_GPIO_LockPin：用于锁定引脚的配置"></a><code>HAL_GPIO_LockPin：用于锁定引脚的配置</code></h6></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221215213923020.png" alt="image-20221215213923020"></p><h3 id="任务1：点亮LED灯每隔500ms闪烁"><a href="#任务1：点亮LED灯每隔500ms闪烁" class="headerlink" title="任务1：点亮LED灯每隔500ms闪烁"></a>任务1：点亮LED灯每隔500ms闪烁</h3><blockquote><p>Clion 配置 如何生成STM32工程 可以看之前的文章 </p></blockquote><h4 id="配置-时钟频率"><a href="#配置-时钟频率" class="headerlink" title="配置 时钟频率"></a>配置 时钟频率</h4><p>​因为我使用的是STM32H750VBT6 他的工作频率是480Mhz</p><h4 id="配置引脚"><a href="#配置引脚" class="headerlink" title="配置引脚"></a><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171132276.png" alt="image-20221219171132276">配置引脚</h4><p>观察原理图 发现LED在PE3上</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171256573.png" alt="image-20221219171256573"></p><p>点击PE3 出现以下对话框 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219171344974.png" alt="image-20221219171344974"></p><p>选择 GPIO_Output 引脚变为绿色 </p><blockquote><p>在 Systeam Core -&gt; GPIO 对引脚详细配置 </p><p>如默认电平 ， 上拉下拉电阻 ，推挽等，以及用户自定义名字</p><p>用户自定义名字 方便后续代码中使用 （起名 尽量 见名知意 ）如Power_Led等 </p><p>我其他的所有参数均为默认 用户自定义名字为LED</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219191209272.png" alt="image-20221219191209272"></p><h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><ul><li>看之前的文章</li></ul><blockquote><p>注意在生成的时候 在Toolchain&#x2F;IDE 选择SW4STM32 clion 才可以打开 </p><p>如果使用的keil 需要选择MDK-ARM </p></blockquote><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">      HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); <span class="comment">//电平反转</span></span><br><span class="line">      HAL_Delay(<span class="number">500</span>);<span class="comment">//延迟500ms</span></span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为我之前 在CubaMX 配置的时候 LED 的名字被配置成了LED 所以 LED_Pin 就是指代的 PE13</p><p>代码 写在</p><p>&#x2F;* USER CODE BEGIN 3 *&#x2F; 到</p><p>&#x2F;* USER CODE END 3 *&#x2F;下</p><p>防止在使用CubaMX 生成代码的时候 你自己写的代码被删除</p></blockquote><p>以上的程序 实现的效果是LED小灯每隔500ms 亮灭交替</p><hr><h3 id="任务2：-按键控制小灯（轮询法）"><a href="#任务2：-按键控制小灯（轮询法）" class="headerlink" title="任务2： 按键控制小灯（轮询法）"></a>任务2： 按键控制小灯（轮询法）</h3><p>在 while中 读取按钮的状态 </p><h4 id="引脚配置"><a href="#引脚配置" class="headerlink" title="引脚配置"></a>引脚配置</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219192737821.png" alt="image-20221219192737821"></p><blockquote><p>可以看出 原理图中通过一个电阻与地GND相连，固定在低电平。在IO口为输入模式且为下拉电阻时，IO口的常态为低电平。</p><p>所以 在设置引脚的时候需要设置为下拉输入</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219193046799.png" alt="image-20221219193046799"></p><p>选择为 GPIO_Input </p><p>在 Systeam Core -&gt; GPIO -&gt; PC13 -&gt; GPIO Pull-up&#x2F;Pull-down 选择 Pull-down </p><p>User Label 设置为 Key 这个 可以自定义 </p><p>下图就是设置好的</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221219193342362.png" alt="image-20221219193342362"></p><h4 id="生成工程-编写代码"><a href="#生成工程-编写代码" class="headerlink" title="生成工程 编写代码"></a>生成工程 编写代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">      <span class="keyword">if</span>(HAL_GPIO_ReadPin(Key_GPIO_Port,Key_Pin) == GPIO_PIN_SET)&#123; <span class="comment">//判断是否为 高电平 如果为高电平 则被按下</span></span><br><span class="line">          HAL_Delay(<span class="number">20</span>); <span class="comment">//去抖动</span></span><br><span class="line">          <span class="keyword">if</span>(HAL_GPIO_ReadPin(Key_GPIO_Port,Key_Pin) == GPIO_PIN_SET)&#123; <span class="comment">//去抖动后 如果还为高电平 则就是被按下 反转LED的状态</span></span><br><span class="line">              HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);</span><br><span class="line">              <span class="keyword">while</span>(HAL_GPIO_ReadPin(Key_GPIO_Port, Key_Pin) != GPIO_PIN_SET);<span class="comment">//检查钥匙是否松开</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      HAL_Delay(<span class="number">100</span>);<span class="comment">//防止扫描过快 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h3 id="任务3：利用状态机控制按键"><a href="#任务3：利用状态机控制按键" class="headerlink" title="任务3：利用状态机控制按键"></a>任务3：<strong>利用状态机控制按键</strong></h3><h4 id="状态机设计思想"><a href="#状态机设计思想" class="headerlink" title="状态机设计思想"></a><strong>状态机设计思想</strong></h4><p>状态机是一个抽象概念，表示把一个过程抽象为若干个状态之间的切换，这些状态之间<br>存在一定的联系。状态机的设计主要包括4个要素：</p><ol><li>现态：是指当前所处的状态。</li><li>条件：当一个条件满足，将会触发一个动作，或者执行一次状态的迁移。</li><li>动作：表示条件满足后执行动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作要素不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。</li><li>次态：表示条件满足后要迁往的新状态。</li></ol><h4 id="按键的状态机设计"><a href="#按键的状态机设计" class="headerlink" title="按键的状态机设计"></a><strong>按键的状态机设计</strong></h4><p><strong>一：状态定义：根据按键的波形图可以设计三个按键状态</strong></p><ul><li><strong>按键检测状态：表示按键没有按下的状态</strong></li><li><strong>按键确认状态：表示按键已经按下的状态</strong></li><li><strong>按键释放状态：表示等待按键释放的状态</strong></li></ul><p><strong>二：状态转换条件（假设低电平表示按键按下）</strong></p><ul><li><strong>当处于按键检测状态时，如果数据线为低，则转换到按键确认状态，否则保持当前状态。</strong></li><li><strong>当处于按键确认状态时，如果数据线为低，则转换到按键释放状态，并设置按键有效标志；如果数据线为高，则表示可能出现了干扰信号，转换到按键检测状态。</strong></li><li><strong>当处于按键释放状态时，如果数据线为高，则转换到按键检测状态，表示完成了本次按键检测,否则保持当前状态。</strong></li></ul><h4 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123004244.png" alt="image-20221225123004244"></p><blockquote><p>假设采用上拉式按键，低电平表示按键按下，高电平表示按键释放</p></blockquote><h4 id="按键的状态机编程实现"><a href="#按键的状态机编程实现" class="headerlink" title="按键的状态机编程实现"></a><strong>按键的状态机编程实现</strong></h4><p><strong>利用Switch Case多分支语句，通过检测按键引脚的电平来实现按键状态的转换；</strong></p><p><strong>利用定时器产生10ms的定时中断，在定时中断服务程序中调用按键状态转换函数。每次执行的间隔10ms，可以有效的消除按键抖动，并提高CPU的利用率。</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123223315.png" alt="image-20221225123223315"></p><h5 id="使能定时器中断"><a href="#使能定时器中断" class="headerlink" title="使能定时器中断"></a>使能定时器中断</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123247174.png" alt="image-20221225123247174"></p><h5 id="定义按键状态数据类型"><a href="#定义按键状态数据类型" class="headerlink" title="定义按键状态数据类型"></a><strong>定义按键状态数据类型</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123321988.png" alt="image-20221225123321988"></p><h5 id="主程序代码"><a href="#主程序代码" class="headerlink" title="主程序代码"></a><strong>主程序代码</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123344324.png" alt="image-20221225123344324"></p><h5 id="定时中断回调函数"><a href="#定时中断回调函数" class="headerlink" title="定时中断回调函数"></a><strong>定时中断回调函数</strong></h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123545532.png" alt="image-20221225123545532"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123616224.png" alt="image-20221225123616224"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image-20221225123627061.png"></p><h5 id><a href="#" class="headerlink" title></a></h5>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion + STM32cubeMX 搭建舒适的STM32开发环境</title>
      <link href="/posts/55528.html"/>
      <url>/posts/55528.html</url>
      
        <content type="html"><![CDATA[<h1 id="Clion-STM32cubeMX搭建stm32开发环境"><a href="#Clion-STM32cubeMX搭建stm32开发环境" class="headerlink" title="Clion+STM32cubeMX搭建stm32开发环境"></a>Clion+STM32cubeMX搭建stm32开发环境</h1><p><strong>本篇介绍的内容也是以基于<code>HAL库</code>开发为准的</strong> </p><p><strong>环境及所需工具</strong></p><p><strong>软件环境:</strong></p><ul><li>Windows 10</li><li>STM32CubeMX</li><li>Clion-2019</li><li>MinGW</li><li>OpenOCD</li><li>arm-none-eabi-gcc</li></ul><p><strong>硬件环境：</strong></p><ul><li>STM32F103C6T6 或其他 STM32 开发板</li><li>ST-Link V2 下载器</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220825154215.jpg" alt="微信图片_20220825154215"></p><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a><strong>工具安装</strong></h2><h3 id="STM32CubeMX"><a href="#STM32CubeMX" class="headerlink" title="STM32CubeMX"></a><strong>STM32CubeMX</strong></h3><p>这个正常去官网下载的安装就行了</p><blockquote><p>该软件用于配置时钟频率 gpio初始化等</p></blockquote><blockquote><p>版本号 &lt;&#x3D; 6.3.0 版本过高无法生成 后续文件</p></blockquote><p><a href="https://www.st.com/en/development-tools/stm32cubemx.html">STM32CubeMX - STM32Cube initialization code generator - STMicroelectronics</a></p><p><strong>OpenOCD</strong></p><h3 id="OpenOCD"><a href="#OpenOCD" class="headerlink" title="OpenOCD"></a><strong>OpenOCD</strong></h3><p>OpenOCD是用于对STM32进行下载仿真的工具，是一个开源软件包，Windows版本下从<a href="https://link.zhihu.com/?target=http://gnutoolchains.com/arm-eabi/openocd/">这里</a>下载，下载好解压到一个目录就行，后面会在Clion中链接这个目录：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825154716119.png" alt="image-20220825154716119"></p><p><strong>MinGW</strong></p><p>Clion需要使用MinGW环境来配置工具链，安装方法如下：<br>首先去MinGW主页下载最新版本的MinGW： <a href="https://link.zhihu.com/?target=https://osdn.net/projects/mingw/releases/">Minimalist GNU for Windows</a>，这是MinGW的安装器：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/v2-1cd72192eaa83cba9becb6abd0b727af_r.jpg" alt="preview"></p><p>打开exe进行安装，修改安装目录（最好不能有空格），安装完成后进行组件下载：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155527418.png" alt="image-20220825155527418"></p><p>如上图中所示，把<code>Basic Setup</code>里面的组件全部勾选（也可也去掉不需要的语言编译器比如Objective-C）。<br>配置系统的环境变量，在Path环境变量里面添加一条，指向MinGW的bin文件夹：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155604634.png" alt="image-20220825155604634"></p><p>重启电脑，然后在命令窗口中输入下面的命令验证安装是否成功：<br>gcc -v</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155637005.png" alt="image-20220825155637005"></p><p><strong>arm-none-eabi-gcc</strong><br>Windows到这里下载：<a href="https://link.zhihu.com/?target=https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a> ，选择ZIP压缩包形式的：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155721531.png" alt="image-20220825155721531"></p><p>解压到一个文件夹，并把安装目录下的bin文件夹添加到环境变量：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155750142.png"></p><p>然后重启使得环境变量生效之后可以在命令行里用以下语句测试：<br>arm-none-eabi-gcc -v<br>如果有信息输出,那就是装好了。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825155837867.png" alt="image-20220825155837867"></p><h3 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a><strong>Clion配置</strong></h3><blockquote><p>安装 很简单 这里就不详细说了</p></blockquote><p>Clion是基于CMake来管理项目的，所以首选我们需要配置好预设的MinGW和CMake环境。</p><p>打开<code>File-Settings-Build,Execution,Deployment</code>选项卡，在<code>Toolchains</code>下面添加一个MinGW环境：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825160130915.png" alt="image-20220825160130915"></p><blockquote><p>将 C 编译器 选为arm-none-eabi-gcc bin 文件夹下的 xxx-gcc.exe</p><p>将 C++ 编译器 选为arm-none-eabi-gcc bin 文件夹下的 xxx-g++.exe</p><p>注意<strong>Debugger</strong>不要改，否则断点调试的时候无法连接。</p></blockquote><p>然后再<code>CMake</code>栏下确认一下工具链是否正确：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825160308539.png" alt="image-20220825160308539"></p><p>在设置-&gt; 构建、执行、部署 -&gt; 嵌入式开发 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161455637.png" alt="image-20220825161455637"></p><p>绑定 openOCD 与 STM32cubeMX </p><p>至此Clion环境配置完成，可以创建STM32项目了。</p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><blockquote><p>选择嵌入式 </p><p>位置 你想要存放的位置 最后一个文件 就是项目名称</p><p>例如 我的工程叫 GPIO_demo</p><p>在 G 盘 Stm32_Project 下</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161946846.png" alt="image-20220825161946846"></p><p> 新建完 就是如下界面 点击跳过 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825161922184.png" alt="image-20220825161922184"></p><p>选择 通过STM32cubeMX 打开</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162138931.png" alt="image-20220825162138931"></p><p>打开STM32cubeMX </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162253458.png" alt="image-20220825162253458"></p><ol><li>点击STM32F030F4Px 选择自己的芯片型号</li></ol><p>在Part Number 搜索自己的芯片 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162437107.png" alt="image-20220825162437107"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162535422.png" alt="image-20220825162535422"></p><p>​点击Start Project</p><h3 id="设置引脚功能"><a href="#设置引脚功能" class="headerlink" title="设置引脚功能"></a>设置引脚功能</h3><blockquote><p>注意：这里的内容需要根据 自己手里的开发板 操作</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162845228.png" alt="image-20220825162845228"></p><p>可以看到 我的LED  是RGB的 其中红色引脚在PA0</p><p>在 如下图中 点击 引脚 设置为output</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825162958972.png" alt="image-20220825162958972"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163103245.png" alt="image-20220825163103245"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163118459.png" alt="image-20220825163118459"></p><p>下面设置该引脚名称</p><p>引脚右键 弹出如下菜单 选择ENter User Lable </p><p>我设置为LED_R</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163217442.png" alt="image-20220825163217442"></p><p>引脚设置完成</p><h3 id="设置时钟"><a href="#设置时钟" class="headerlink" title="设置时钟"></a>设置时钟</h3><blockquote><p>选择Rcc 设置为图二的样子 使用外部晶振</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163412315.png" alt="image-20220825163412315"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163431036.png" alt="image-20220825163431036"></p><h4 id="配置时钟树"><a href="#配置时钟树" class="headerlink" title="配置时钟树"></a>配置时钟树</h4><p>在Clock Configuration 配置为 图二的样子 是103c6t6 在72Mhz的频率下工作</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163513845.png" alt="image-20220825163513845"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163802440.png" alt="image-20220825163802440"></p><h3 id="设置项目生成"><a href="#设置项目生成" class="headerlink" title="设置项目生成"></a>设置项目生成</h3><blockquote><p>这里有几个需要注意的地方 </p><p>Name 必须和clion 生成的项目名字一样</p><p>Toolchain&#x2F;IDE 需要设置为SW4STM32   如果没有 就是STM32cubeMX版本太高了</p><p>完事 之后 点击 cenereate code</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825163916606.png" alt="image-20220825163916606"></p><p>弹出如下对话框 点击关闭就可</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164201145.png" alt="image-20220825164201145"></p><p>自此STM32cubeMX设置完成 </p><p>写代码在 Core&#x2F;Src 里</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164250946.png" alt="image-20220825164250946"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164430859.png" alt="image-20220825164430859"></p><blockquote><p>三个按钮 分别是 编译 下载 调试</p><p>点击 编译会出现 烧录文件</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825164506477.png" alt="image-20220825164506477"></p><h2 id="烧录程序-amp-在线调试"><a href="#烧录程序-amp-在线调试" class="headerlink" title="烧录程序 &amp; 在线调试"></a><strong>烧录程序 &amp; 在线调试</strong></h2><p>在<code>Keil</code>里面我们烧录程序的时候要指定使用的下载器（J-Link、ST-Link、CMSIS-DAP等），<code>Clion</code>烧录程序之前通用需要进行一些设置。</p><p>点击编译按钮旁边的配置栏下拉，选<code>Edit Configurations 或者 编辑配置</code>，打开配置窗口：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220825165035523.png" alt="image-20220825165035523"></p><p>可以看到没有设置板子的config文件所以出现警告错误，这个配置文件就是前面说的需要自己生成的文件。</p><p>我们在工程根目录下新建一个文件夹<code>config</code>，在里面新建一个配置文件<code>daplink.cfg</code>（因为我这里使用的是STlink V2作为仿真器），文件的内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># choose st-link/j-link/dap-link etc.</span></span><br><span class="line"><span class="comment">#adapter driver cmsis-dap</span></span><br><span class="line"><span class="comment">#transport select swd</span></span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line">transport select hla_swd</span><br><span class="line">source [find <span class="keyword">target</span>/stm32f1x.cfg]</span><br><span class="line"><span class="comment"># download speed = 10MHz</span></span><br><span class="line">adapter speed <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>前两行设置了仿真器的类型和接口，下面几行指定了<strong>Flash大小</strong>、<strong>芯片类型</strong>、<strong>下载速度</strong>等。</p><p>如果对自己的芯片不知道怎么设置，可以参考OpenOCD自带的一系列配置文件，路径在OpenOCD安装目录的<code>share\openocd\scripts</code>下：</p><p>只需要关注这几个目录：</p><ul><li><strong>board</strong>：板卡配置，各种官方板卡</li><li><strong>interface</strong>：仿真器类型配置，比如ST-Link、CMSIS-DAP等都在里面</li><li><strong>target</strong>：芯片类型配置，STM32F1xx、STM32L0XX等等都在里面</li></ul><p>设置好配置文件之后，就可以点击<strong>下载</strong>或者<strong>调试</strong>按钮进行下载和在线调试了。</p><blockquote><p>在配置文件中不要加<code>reset_config srst_only</code>这一句，会导致下载失败，这一句是指示系统重启的，删除不影响下载。</p></blockquote><p>CLion里面是支持全功能的单步断点调试的，也能在代码里直接观察变量的值，非常舒服~</p><blockquote><p>最后说明一下，CLion中组织编译规则都是基于CMakeLists.txt文件的，如果熟悉CMake应该会觉得很方便很强大，不熟悉的也没事，基本不需要额外修改什么，只需要知道怎么在这个文件里面添加源码目录和include文件夹的路径就行了：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        Core/Inc</span><br><span class="line">        UserApp</span><br><span class="line">// 其他<span class="keyword">include</span>目录</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SOURCES</span><br><span class="line">        <span class="string">&quot;startup/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;Drivers/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;Core/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;UserApp/*.*&quot;</span></span><br><span class="line">        <span class="string">&quot;3rdParty/*.*&quot;</span></span><br><span class="line">// *.*表示通配符，也就是这个文件夹里的所有文件都会被编译</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h3 id="printf重定向问题"><a href="#printf重定向问题" class="headerlink" title="printf重定向问题"></a><strong><code>printf</code>重定向问题</strong></h3><p>​在Clion中链接的是<code>GNU-Tools-ARM-Embedded\arm-none-eabi\include</code>里面的<code>stdio.h</code>，如果仍然想使用<code>printf</code>函数功能，则需要进行如下操作：</p><p>新建一个retarget.h文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _RETARGET_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _RETARGET_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32xxxx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//#ifndef _RETARGET_H__</span></span></span><br></pre></td></tr></table></figure><p>再新建一个retarget.c文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_ansi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;_syslist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;retarget.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(OS_USE_SEMIHOSTING)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_FILENO  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_FILENO 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_FILENO 2</span></span><br><span class="line"></span><br><span class="line">UART_HandleTypeDef *gHuart;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RetargetInit</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    gHuart = huart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Disable I/O buffering for STDOUT stream, so that</span></span><br><span class="line"><span class="comment">     * chars are sent out as soon as they are printed. */</span></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _isatty(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _write(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDOUT_FILENO || fd == STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Transmit(gHuart, (<span class="type">uint8_t</span> *) ptr, len, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _close(<span class="type">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _lseek(<span class="type">int</span> fd, <span class="type">int</span> ptr, <span class="type">int</span> dir)</span><br><span class="line">&#123;</span><br><span class="line">    (<span class="type">void</span>) fd;</span><br><span class="line">    (<span class="type">void</span>) ptr;</span><br><span class="line">    (<span class="type">void</span>) dir;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _read(<span class="type">int</span> fd, <span class="type">char</span> *ptr, <span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_StatusTypeDef hstatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd == STDIN_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        hstatus = HAL_UART_Receive(gHuart, (<span class="type">uint8_t</span> *) ptr, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">        <span class="keyword">if</span> (hstatus == HAL_OK)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> EIO;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fstat(<span class="type">int</span> fd, <span class="keyword">struct</span> stat *st)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= STDIN_FILENO &amp;&amp; fd &lt;= STDERR_FILENO)</span><br><span class="line">    &#123;</span><br><span class="line">        st-&gt;st_mode = S_IFCHR;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errno = EBADF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//#if !defined(OS_USE_SEMIHOSTING)</span></span></span><br></pre></td></tr></table></figure><p>​添加这两个文件到工程，更新CMake，编译之后会发现，有几个系统函数重复定义了，被重复定义的函数位于<code>Src</code>目录的<code>syscalls.c</code>文件中，我们把里面重复的几个函数删掉即可。</p><p>在main函数的初始化代码中添加对头文件的引用并注册重定向的串口号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;retarget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">RetargetInit(&amp;huart1);</span><br></pre></td></tr></table></figure><p>配置完成</p><p><strong>上面的修改完成之后可能会发现无法正常读取浮点数，这里修改CMakeList.txt，加入下述编译选项</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(COMMON_FLAGS <span class="string">&quot;-specs=nosys.specs -specs=nano.specs -u _printf_float -u _scanf_float&quot;</span>)</span><br></pre></td></tr></table></figure><p>[]: ttps:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;145801160“参考链接”</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记九</title>
      <link href="/posts/27820.html"/>
      <url>/posts/27820.html</url>
      
        <content type="html"><![CDATA[<h1 id="IIC协议"><a href="#IIC协议" class="headerlink" title="IIC协议"></a>IIC<em><strong>协议</strong></em></h1><h2 id="IIC协议概述"><a href="#IIC协议概述" class="headerlink" title="IIC协议概述"></a><strong>IIC</strong>协议概述</h2><blockquote><p>IIC全称Inter-Integrated Circuit (集成电路总线)<br>是由PHILIPS公司在80年代开发的两线式串行总线，用于连接微控制器及其外围设备。IIC属于半双<br>工同步通信方式</p></blockquote><p><strong>特点</strong></p><ul><li>简单性和有效性。</li></ul><p>由于接口直接在组件之上，因此IIC总线占用的空间非常小，减少了电路板的空间和芯片管脚的数量，降低了互联成本。总线的长度可高达25英尺，并且能够以10Kbps的最大传输速率支持40个组件</p><p><strong>构成</strong></p><p>IIC串行总线一般有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL，其时钟信号是由主控器件产生。所有接到IIC总线设备上的串行数据SDA都接到总线的SDA上，各设备的时钟线SCL接到总线的SCL上。对于并联在一条总线上的每个IC都有唯一的地址。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151506039.png" alt="image-20220815150649916"></p><p><strong>IIC</strong>协议</p><p>IIC总线在传输数据的过程中一共有三种类型信号，分别为：开始信号、结束信号和应答信号。</p><p>&#x2F;&#x2F;起始位，停止位，数据位，速度</p><p>这些信号中，起始信号是必需的，结束信号和应答信号</p><ul><li><p>起始信号</p></li><li><p>终止信号</p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151507749.png" alt="image-20220815150749694"></p><ul><li>应答信号</li></ul><p>发送器每发送一个字节（8个bit），就在时钟脉冲9期间释放数据线，由接收器反馈一个应答信号。应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；<br>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151508377.png" alt="image-20220815150823317"></p><ul><li>数据发送的时序</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151508223.png" alt="image-20220815150840172"></p><h2 id="OLED写命令"><a href="#OLED写命令" class="headerlink" title="OLED写命令"></a>OLED写命令</h2><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151557560.png" alt="image-20220815155717480"></p><h3 id="写命令-x2F-数据的思路"><a href="#写命令-x2F-数据的思路" class="headerlink" title="写命令&#x2F;数据的思路"></a>写命令&#x2F;数据的思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. start() </span></span><br><span class="line"><span class="comment">2. 写入 b0111 1000 0x78 </span></span><br><span class="line"><span class="comment">3. ACK </span></span><br><span class="line"><span class="comment">4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据 </span></span><br><span class="line"><span class="comment">5. ACK </span></span><br><span class="line"><span class="comment">6. 写入指令/数据 </span></span><br><span class="line"><span class="comment">7. ACK</span></span><br><span class="line"><span class="comment">8. STOP */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体的 每个参数的意义 看卖家给的文档 </p></blockquote><h3 id="OLED-显示一个点"><a href="#OLED-显示一个点" class="headerlink" title="OLED 显示一个点"></a>OLED 显示一个点</h3><p>如何显示一个点？</p><p>有三种，分别位页地址模式，水平地址模式和垂直地址模式，可以通过一下表格进行配置</p><p>内存管理</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151633854.png" alt="image-20220815163312778"></p><blockquote><p>页寻址模式： </p><ol><li>发送cmd：0x20</li><li>发送cmd: 0x02 ; 默认是页寻址模式</li></ol></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151633903.png"></p><h4 id="页地址模式"><a href="#页地址模式" class="headerlink" title="页地址模式"></a>页地址模式</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151636719.png" alt="image-20220815163623674"></p><h4 id="水平地址模式"><a href="#水平地址模式" class="headerlink" title="水平地址模式"></a><strong>水平地址模式</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151637806.png" alt="image-20220815163702760"></p><h4 id="垂直地址模式"><a href="#垂直地址模式" class="headerlink" title="垂直地址模式"></a><strong>垂直地址模式</strong></h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208151637956.png" alt="image-20220815163717911"></p><table><thead><tr><th>64</th><th></th><th></th><th>0列</th><th>1列</th><th>2列</th><th>3列</th><th>···························</th><th>124列</th><th>125列</th><th>126列</th><th>127列</th></tr></thead><tbody><tr><td>Page0</td><td>bit0</td><td>0行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit1</td><td>1行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit2</td><td>2行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit3</td><td>3行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit4</td><td>4行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit5</td><td>5行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit6</td><td>6行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>bit7</td><td>7行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page1</td><td></td><td>8到15行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page2</td><td></td><td>16到23行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page3</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page4</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page5</td><td></td><td>…</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Page6</td><td></td><td>56行到63行</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="显示一个点代码"><a href="#显示一个点代码" class="headerlink" title="显示一个点代码"></a>显示一个点代码</h4><blockquote><p>这里我遇到的坑： 初始化会花屏  我在初始化完成后 加了一个清屏函数 就解决了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init(); </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个0 1011 0000 == 0xB0</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>);</span><br><span class="line">    Oled_Write_Data(<span class="number">0x08</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152330488.jpeg"></p><h4 id="显示一个字母A"><a href="#显示一个字母A" class="headerlink" title="显示一个字母A"></a>显示一个字母A</h4><p>通过取显示字母的 数组</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152206152.png" alt="image-20220815220605099"></p><p>字模取出来是2*16的 需要拆解一下 因为OLED的一个page只能放8位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> A[<span class="number">2</span>][<span class="number">8</span>] =&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,&#123;<span class="number">0x20</span>,<span class="number">0x3C</span>,<span class="number">0x23</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x27</span>,<span class="number">0x38</span>,<span class="number">0x20</span>&#125;&#125; ;</span><br></pre></td></tr></table></figure><p>我用的 是二维数组</p><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--  文字:  A  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span></span><br><span class="line"><span class="type">char</span> A[<span class="number">2</span>][<span class="number">8</span>] =&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x38</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,&#123;<span class="number">0x20</span>,<span class="number">0x3C</span>,<span class="number">0x23</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x27</span>,<span class="number">0x38</span>,<span class="number">0x20</span>&#125;&#125; ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i,j; </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line">    <span class="keyword">for</span> ( i =<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span>+i);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(A[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152237938.jpg" alt="c5258ae852af29ac815cec9acc2a3ff"></p><h4 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--  文字:  小  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> xiao[<span class="number">2</span>][<span class="number">16</span>]=&#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">                  &#123;<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  刘  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> liu[<span class="number">2</span>][<span class="number">16</span>] =&#123;&#123;<span class="number">0x08</span>,<span class="number">0x28</span>,<span class="number">0x48</span>,<span class="number">0x89</span>,<span class="number">0x0E</span>,<span class="number">0x88</span>,<span class="number">0x78</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x40</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0x09</span>,<span class="number">0x06</span>,<span class="number">0x19</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0F</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  同  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> tong[<span class="number">2</span>][<span class="number">16</span>]= &#123;&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFE</span>,<span class="number">0x02</span>,<span class="number">0x12</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x92</span>,<span class="number">0x12</span>,<span class="number">0x02</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x08</span>,<span class="number">0x1F</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x7F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--  文字:  学  --*/</span></span><br><span class="line"><span class="comment">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span></span><br><span class="line">code <span class="type">char</span> xue[<span class="number">2</span>][<span class="number">16</span>]=&#123;&#123;<span class="number">0x40</span>,<span class="number">0x30</span>,<span class="number">0x11</span>,<span class="number">0x96</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x91</span>,<span class="number">0x96</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x98</span>,<span class="number">0x14</span>,<span class="number">0x13</span>,<span class="number">0x50</span>,<span class="number">0x30</span>,<span class="number">0x00</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x44</span>,<span class="number">0x84</span>,<span class="number">0x7E</span>,<span class="number">0x06</span>,<span class="number">0x05</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x00</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i,j; </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line">    <span class="keyword">for</span> ( i =<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span>+i);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(xiao[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(liu[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(tong[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(xue[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152238727.jpg" alt="441c9b56fdfac5f5ef87d2cd68608ca"></p><blockquote><p> 相机拍摄的 刷新率有问题 肉眼看到没有 横杠</p></blockquote><h4 id="显示-照片"><a href="#显示-照片" class="headerlink" title="显示 照片"></a>显示 照片</h4><blockquote><p>需要先对图片进行处理 分辨率为128*64 </p><p>输出方法类似清屏 只不过 清屏时候 写入的 数据是0 显示图片 换成对应的数组值</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152312711.png" alt="image-20220815231250630"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line">sbit scl = P0^<span class="number">0</span>;</span><br><span class="line">sbit sda = P0^<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>; </span><br><span class="line">    sda = <span class="number">1</span>;</span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    _nop_();</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scl = <span class="number">0</span>;</span><br><span class="line">    sda = <span class="number">0</span>; </span><br><span class="line">    scl = <span class="number">1</span>;</span><br><span class="line">    _nop_(); </span><br><span class="line">    sda = <span class="number">1</span>; </span><br><span class="line">    _nop_(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">IIC_ACK</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> flag; </span><br><span class="line">    sda = <span class="number">1</span> ; <span class="comment">//在时钟脉冲9期间释放数据线</span></span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">1</span> ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    flag = sda ;</span><br><span class="line">    _nop_(); </span><br><span class="line">    scl = <span class="number">0</span> ; </span><br><span class="line">    _nop_(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(<span class="type">char</span> dataSend)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i ; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i&lt; <span class="number">8</span>;i++)&#123; <span class="comment">//发生八次</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//scl拉低, 让sda做好数据准备</span></span><br><span class="line">        sda = dataSend &amp; <span class="number">0x80</span>; <span class="comment">//1000 0000 获得dataSend最高位 </span></span><br><span class="line">        _nop_(); <span class="comment">// 发送数据建立时间</span></span><br><span class="line">        scl = <span class="number">1</span> ; <span class="comment">//scl 拉高开始发生</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        scl = <span class="number">0</span> ; <span class="comment">//发生完毕拉低</span></span><br><span class="line">        _nop_(); <span class="comment">//数据发送时间</span></span><br><span class="line">        dataSend = dataSend &lt;&lt; <span class="number">1</span> ; <span class="comment">//发送一次 移1位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Cmd</span><span class="params">(<span class="type">char</span> dataCmd)</span><span class="comment">//写命令函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x00</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataCmd);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Write_Data</span><span class="params">(<span class="type">char</span> dataData)</span>&#123; <span class="comment">//写数据函数</span></span><br><span class="line">        <span class="comment">//     1. start()</span></span><br><span class="line">    IIC_start();</span><br><span class="line">    <span class="comment">// 2. 写入 b0111 1000 0x78</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x78</span>);</span><br><span class="line">    <span class="comment">// 3. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 4. cotrol byte: (0)(0)000000 写入命令 (0)(1)000000写入数据</span></span><br><span class="line">    IIC_Send_Byte(<span class="number">0x40</span>);</span><br><span class="line">    <span class="comment">// 5. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 6. 写入指令/数据</span></span><br><span class="line">    IIC_Send_Byte(dataData);</span><br><span class="line">    <span class="comment">// 7. ACK</span></span><br><span class="line">    IIC_ACK();</span><br><span class="line">    <span class="comment">// 8. STOP</span></span><br><span class="line">    IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAE</span>); <span class="comment">//--display off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//---set low column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">//---set high column address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x40</span>); <span class="comment">//--set start line address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>); <span class="comment">//--set page address</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xFF</span>); <span class="comment">//--128</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA1</span>); <span class="comment">// set segment remap</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA6</span>); <span class="comment">//--normal / reverse</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xA8</span>); <span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x3F</span>); <span class="comment">//--1/32 duty</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xC8</span>); <span class="comment">// Com scan direction</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD3</span>); <span class="comment">//-set display offset</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x00</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD5</span>); <span class="comment">// set osc division</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x80</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD8</span>); <span class="comment">// set area color mode off</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x05</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xD9</span>); <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xF1</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDA</span>); <span class="comment">// set com pin configuartion</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x12</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xDB</span>); <span class="comment">// set Vcomh</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x30</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x8D</span>); <span class="comment">// set charge pump enable</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x14</span>); <span class="comment">//</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xAF</span>); <span class="comment">//--turn on oled panel</span></span><br><span class="line">    Oled_Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Clear</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j; <span class="comment">//-128 --- 127</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Oled_Show_Image</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* img)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0xB0</span> + i); <span class="comment">// page0--page7 //每个page从0列</span></span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x00</span>);</span><br><span class="line">        Oled_Write_Cmd(<span class="number">0x10</span>); <span class="comment">// 0到127列，依次写入0，每写入数据，列地址自动偏移</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">128</span> * i; j &lt; <span class="number">128</span> * (i+<span class="number">1</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Oled_Write_Data(img[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code BMP1[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,</span><br><span class="line"><span class="number">0xF0</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0x1E</span>,<span class="number">0x1E</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x67</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x86</span>,</span><br><span class="line"><span class="number">0x86</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x8E</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0x70</span>,</span><br><span class="line"><span class="number">0x70</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,</span><br><span class="line"><span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x2F</span>,<span class="number">0x2F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,</span><br><span class="line"><span class="number">0xFF</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x05</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x16</span>,<span class="number">0x16</span>,<span class="number">0x1E</span>,<span class="number">0x1E</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x3F</span>,</span><br><span class="line"><span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0xFC</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x04</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,</span><br><span class="line"><span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x0C</span>,<span class="number">0x3C</span>,<span class="number">0x3C</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xFE</span>,<span class="number">0xFC</span>,<span class="number">0xEC</span>,</span><br><span class="line"><span class="number">0xEC</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x7D</span>,</span><br><span class="line"><span class="number">0x7D</span>,<span class="number">0xFD</span>,<span class="number">0xFD</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,</span><br><span class="line"><span class="number">0x33</span>,<span class="number">0x23</span>,<span class="number">0x23</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x9E</span>,<span class="number">0x9E</span>,<span class="number">0xFD</span>,<span class="number">0xFD</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0xFC</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xF8</span>,<span class="number">0xF8</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xB8</span>,<span class="number">0xB8</span>,<span class="number">0xDC</span>,<span class="number">0xDC</span>,<span class="number">0xCE</span>,<span class="number">0xCE</span>,<span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0xEE</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0xEE</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xDC</span>,<span class="number">0xDC</span>,<span class="number">0xB8</span>,<span class="number">0xB8</span>,<span class="number">0x78</span>,<span class="number">0x78</span>,<span class="number">0xF0</span>,<span class="number">0xF0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x81</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x83</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x7F</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x19</span>,<span class="number">0x19</span>,<span class="number">0x5D</span>,<span class="number">0x5D</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xEE</span>,<span class="number">0xEE</span>,<span class="number">0xF6</span>,<span class="number">0xF6</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xB7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x9D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,</span><br><span class="line"><span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x8D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0xBE</span>,</span><br><span class="line"><span class="number">0xBE</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xDB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xB7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF6</span>,<span class="number">0xF6</span>,<span class="number">0xEE</span>,<span class="number">0xEE</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0x5D</span>,<span class="number">0x5D</span>,<span class="number">0x19</span>,<span class="number">0x19</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x3B</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x0D</span>,<span class="number">0x0D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xBE</span>,<span class="number">0xBE</span>,<span class="number">0xDD</span>,<span class="number">0xDD</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xEF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xBF</span>,<span class="number">0xBF</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xBB</span>,<span class="number">0xB7</span>,<span class="number">0xB7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,<span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xDF</span>,<span class="number">0xBD</span>,<span class="number">0xBD</span>,<span class="number">0xBE</span>,<span class="number">0xBE</span>,<span class="number">0x7E</span>,<span class="number">0x7E</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xFB</span>,<span class="number">0xFB</span>,<span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x0D</span>,<span class="number">0x0D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x17</span>,<span class="number">0x17</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3D</span>,<span class="number">0x3D</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x6F</span>,<span class="number">0x6F</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x7D</span>,<span class="number">0x7D</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,</span><br><span class="line"><span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x1D</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xF7</span>,<span class="number">0xDE</span>,<span class="number">0xDE</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x3E</span>,<span class="number">0x7D</span>,<span class="number">0x7D</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x6F</span>,<span class="number">0x6F</span>,<span class="number">0x3E</span>,<span class="number">0x3E</span>,<span class="number">0x3D</span>,<span class="number">0x3D</span>,<span class="number">0x3B</span>,<span class="number">0x3B</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,<span class="number">0x0F</span>,</span><br><span class="line"><span class="number">0x0F</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//oled 初始化</span></span><br><span class="line">     Oled_Init();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 选择一个位置</span></span><br><span class="line">    <span class="comment">// 选择页寻址模式</span></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0x20</span>);</span><br><span class="line">     Oled_Write_Cmd(<span class="number">0x02</span>);</span><br><span class="line">    <span class="comment">// 选择一个page0 1011 0000 == 0xB0</span></span><br><span class="line"></span><br><span class="line">    Oled_Write_Cmd(<span class="number">0xB0</span>);</span><br><span class="line">    Oled_Show_Image(BMP1);</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208152316108.jpg" alt="705b8c6db0fe5ca8b8d9601c3f984b1"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIC协议 </tag>
            
            <tag> OLED屏幕 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记八</title>
      <link href="/posts/47724.html"/>
      <url>/posts/47724.html</url>
      
        <content type="html"><![CDATA[<h1 id="4G模块的使用"><a href="#4G模块的使用" class="headerlink" title="4G模块的使用"></a>4G模块的使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h3><p>EC03-DNC是亿佰特推出的LTECAT1数传模块产品，该产品软件功能完善，覆盖绝大多数常规应用场景，EC03-DNC是为实现串口设备与网络服务器,通过网络相互传输数据而开发的产品，该产品是一款带分集接收功能的LTE-FDD&#x2F;LTE-TDD无线通信数传模块，支持LTE-FDD，LTE-TDD网络数据连接，用户只需通过简单的设置，即可实现串口到网络服务器的双向数据透明传输。模块使用2.0mm排针方便客户设备集成，使用5V～18V宽电压供电。支持移动、联通、电信4G卡，通信与LED指示采用兼容电平，默认3.3V可适用5V电平，具有抗干扰能力，能适应使用在一些电磁干扰强的环境当中，比如一些电力行业当中。</p><h3 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h3><ol><li>采用最新4GCAT1方案；</li><li>支持数据透明传输，支持TCP、UDP网络协议，支持心跳包、注册包功能最大支持60个字节数；</li><li>支持MQTT协议，支持接入OneNet平台、百度云平台、阿里云平台的MQTT服务；</li><li>支持两路Socket链路同时收发；</li><li>支持ModbusRTU与ModbusTCP自动相互转换；</li><li>支持网络AT指令，可以通过网络，远程配置设备；</li><li>LTE-FDD：最大下行速率10Mbps，最大上行速率5Mbps；LTE-TDD：最大下行速率7.5Mbps，最大上行速率1Mbps；</li><li>软件看门狗设计，系统稳定。</li><li>支持APN&#x2F;VPN。</li></ol><blockquote><p>有两种工作模式，默认是透传模式，通过其他方式进入AT指令模式，后续有说明</p></blockquote><blockquote><p>注意插卡不要出错，下图红色位置为SIM卡状态灯，亮才是正常</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282315729.png" alt="image-20220728231458084"></p><ul><li>软件和用户手册下载地址 <a href="https://www.ebyte.com/product-view-news.html?id=1102">https://www.ebyte.com/product-view-news.html?id=1102</a></li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>​     串口调试助手，网络调试助手，用户手册（AT指令），均可在以上网址中下载到</p><h3 id="进入AT模式"><a href="#进入AT模式" class="headerlink" title="进入AT模式"></a>进入AT模式</h3><blockquote><p>在使用前:</p><p>将电源、天线、SIM 卡、串口线等硬件连接好。</p></blockquote><ol><li><p>进入AT指令模式在串口助手内发送+++(<strong>除了+++不需要勾选发送新行其他AT指令都需要勾选发送新行才有效</strong>)必须在发送+++指令3s内发送其他任意AT指令(除重启AT指令外)才能完全进入AT</p></li><li><p>进入AT指令模式后，使用<code>AT+CPIN</code>查看SIM卡接入情况：</p><p>例如：</p><p> <code>AT+CPIN</code></p><p><code>+OK=1</code></p><p>表示SIM卡已接入，使用AT+CSQ查看当前信号强度：</p><p>例如：</p><p><code>AT+CSQ</code></p><p><code>+OK=26</code>表示当前信号强度正常.  26是信号强度 不是固定的 根据实际情况看</p><p>如果回复99表示当前信号强度异常，请查看当前为天线是否连好，或周围基站存在异常。</p></li><li><p>接入服务器，<code>AT+SOCK=TCPC,116.62.42.192,31687</code>（参数之间使用英文字符逗号隔开，IP指令之间使用英文字符点隔开），如果是SOCK1，SOCK2，SOCK3，需要在前端加使能命令(具体查看AT指令说明部分)。</p><p>SOCK设置</p><p>例如：</p><p><code>AT+SOCK=TCPC,116.62.42.192,31687</code></p><p><code>+OK</code></p><p>SOCK1、SOCK2、SOCK3设置</p><p>例如：</p><p><code>AT+SOCK1=0,TCPC,116.62.42.192,31687</code></p><p><code>+OK</code> 表示设置成功。</p></li><li><p>重启（所有AT指令修改参数后，设备重启后生效）执行指令<code>AT+REBT</code>返回OK后设备立即重启，此处IP只做演示，实际连接以需要连接的服务器IP为基准</p></li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282328951.png" alt="image-20220728232806905"></p><blockquote><p>模块还有很多的AT指令 如心跳包内容的设置 心跳包的发送时间，MQTT服务器的设置等等。在官方的文档中有详细介绍。每一个指令都有详细的使用方法的介绍，返回值等。</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282351377.png" alt="image-20220728235152338"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282341466.png" alt="image-20220728234120429"></p><h3 id="连接socket-服务器"><a href="#连接socket-服务器" class="headerlink" title="连接socket 服务器"></a>连接socket 服务器</h3><blockquote><p>因为是4G通信，所以需要用到内网穿透功能，将电脑搭建的socket服务器 映射到公网</p><p>这里我使用的是花生壳内网穿透工具，  </p><blockquote><p>  免费 学习使用和简单的场景足够</p></blockquote></blockquote><h4 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h4><ol><li>注册账号 </li><li>下载软件</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282333714.png" alt="屏幕截图 2022-07-28 233329"></p><h4 id="设置一个TCP服务器"><a href="#设置一个TCP服务器" class="headerlink" title="设置一个TCP服务器"></a>设置一个TCP服务器</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282334926.png" alt="image-20220728233431875"></p><blockquote><p>百度搜索网络调试助手很多</p></blockquote><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282335598.png" alt="image-20220728233556556"></p><p>这里的内网主机和内网端口 一定要和网络调试助手的保持一致</p><h4 id="内网穿透测试"><a href="#内网穿透测试" class="headerlink" title="内网穿透测试"></a>内网穿透测试</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202207282338221.png" alt="image-20220728233808140"></p><blockquote><p> 通过外网地址访问成功</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应于课堂代码16文件夹 </span></span><br><span class="line"><span class="comment">//C51通过4g模块连接网络，收到数据包op开灯，收到数据包cl关灯 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE</span></span><br><span class="line"><span class="number">12</span> sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit D5 = P3 ^ <span class="number">7</span>;</span><br><span class="line"><span class="type">char</span> cmd[SIZE];</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>;</span><br><span class="line">    <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>; <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>; <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    D5 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//配置C51串口的通信方式</span></span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        <span class="comment">//往发送缓冲区写入数据，就完成数据的发送</span></span><br><span class="line">        <span class="comment">// sendString(&quot;xiaoliu tongxue shuai\r\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cmd[i++] = tmp;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; cmd[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; cmd[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(cmd, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; cmd[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; cmd[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memset</span>(cmd, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span>)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TI)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 4G模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记七</title>
      <link href="/posts/62509.html"/>
      <url>/posts/62509.html</url>
      
        <content type="html"><![CDATA[<h1 id="DHT11-温湿度模块"><a href="#DHT11-温湿度模块" class="headerlink" title="DHT11 温湿度模块"></a>DHT11 温湿度模块</h1><h2 id="产品概述"><a href="#产品概述" class="headerlink" title="产品概述"></a><strong>产品概述</strong></h2><blockquote><p>DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传感器，应用领域：暖通</p><p>空调；汽车；消费品；气象站；湿度调节器；除湿器；家电；医疗；自动控制</p></blockquote><p><img src="C:/Users/Antonio/AppData/Roaming/Typora/typora-user-images/image-20220721225948515.png" alt="image-20220721225948515"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul><li>相对湿度和温度测量</li><li>全部校准，数字输出</li><li>长期稳定性</li><li>超长的信号传输距离：20米</li><li>超低能耗：休眠</li><li>4 引脚安装：可以买封装好的</li><li>完全互换 : 直接出结果，不用转化</li></ul><h4 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h4><table><thead><tr><th align="center">单片机</th><th align="center">DHT11</th></tr></thead><tbody><tr><td align="center">VCC</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">P1.1</td><td align="center">DATA</td></tr></tbody></table><h3 id="数据传送逻辑"><a href="#数据传送逻辑" class="headerlink" title="数据传送逻辑"></a><strong>数据传送逻辑</strong></h3><blockquote><p>只有一根数据线DATA，上官一号发送序列指令给DHT11模块，模块一次完整的数据传输为40bit,高位先出</p></blockquote><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a><strong>数据格式</strong></h3><blockquote><p>8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据+8bit校验和</p></blockquote><h3 id="通讯过程时序图"><a href="#通讯过程时序图" class="headerlink" title="通讯过程时序图"></a>通讯过程时序图</h3><p><img src="/posts/62509/Users\Antonio\AppData\Roaming\Typora\typora-user-images\image-20220721230414860.png" alt="image-20220721230414860"></p><h4 id="时序分析"><a href="#时序分析" class="headerlink" title="时序分析"></a>时序分析</h4><p>a : dht &#x3D; 1<br>b ：dht &#x3D; 0<br>延时30ms<br>c： dht &#x3D; 1<br>在60us后读d点，如果d点是低电平（被模块拉低），说明模块存在！</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;INTRINS.H&quot;</span></span></span><br><span class="line">sbit ledone = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit dht = P1 ^ <span class="number">0</span>; <span class="comment">// DHT out数据线在P1.0口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// a : dht = 1</span></span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// b ：dht = 0</span></span><br><span class="line">    dht = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    <span class="comment">// c： dht = 1</span></span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 在60us后读d点，如果d点是低电平（被模块拉低），说明模块存在！</span></span><br><span class="line">    Delay60us();</span><br><span class="line">    <span class="keyword">if</span> (dht == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ledone = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledone = <span class="number">1</span>;</span><br><span class="line">    check_DHT();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DHT模块初始化"><a href="#DHT模块初始化" class="headerlink" title="DHT模块初始化"></a>DHT模块初始化</h3><h4 id="时许分析"><a href="#时许分析" class="headerlink" title="时许分析"></a>时许分析</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101932159.png" alt="image-20220810193205055"></p><p>这里需要判断模块高低电平的时间 延迟时间不好把握  </p><p>这里 我使用<code>whiile(Dht)</code>的方法 卡 模块的 高电平 与 低电平</p><p>DHT11传输0的时序分析</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101934236.png" alt="image-20220810193424195"></p><p>DHT11传输1的时序分析 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208101934651.png" alt="image-20220810193444610"></p><p>DHT数据 大小为 40bit 所以 我一共读五轮 每轮读8次</p><h3 id="LCD1602显示"><a href="#LCD1602显示" class="headerlink" title="LCD1602显示"></a>LCD1602显示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此代码没有封装，又臭又长，慎用！ </span></span><br><span class="line"><span class="comment">//接线：LCD1602数据选用P0口， RS接P1.0 RW接P1.1 EN接P1.4 </span></span><br><span class="line"><span class="comment">//DHT11：数据线接P3.3口</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line">sbit ledOne   = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit dht      = P3 ^ <span class="number">3</span>; <span class="comment">//模块的data插在p3.3</span></span><br><span class="line">sbit fengshan = P1 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">4</span>;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> huma[<span class="number">8</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp   = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN  = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x40</span>; <span class="comment">//配置串口工作方式1，REN不使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    dht = <span class="number">0</span>; <span class="comment">//延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//卡d点；</span></span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">//卡e点 while (!dht) 卡f点：while(dht) while (dht);</span></span><br><span class="line">    <span class="keyword">while</span> (!dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//轮</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">//每一轮读多少次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="type">char</span> flag;</span><br><span class="line">    DHT11_Start();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123; <span class="comment">//卡g点while(!dht) 有效数据都是高电平，持续时间不一样，50us读，低电平0 高 电平</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!dht)</span><br><span class="line">                ; <span class="comment">//等待卡g点</span></span><br><span class="line">            Delay40us();</span><br><span class="line">            <span class="keyword">if</span> (dht == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (dht)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            tmp |= flag;</span><br><span class="line">        &#125;</span><br><span class="line">        datas[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号 //（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置</span></span><br><span class="line"></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + <span class="number">0x40</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Build_Datas</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    huma[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    huma[<span class="number">1</span>] = datas[<span class="number">0</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">2</span>] = datas[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    huma[<span class="number">4</span>] = datas[<span class="number">1</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">5</span>] = datas[<span class="number">1</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">6</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    huma[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    temp[<span class="number">1</span>] = datas[<span class="number">2</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">2</span>] = datas[<span class="number">2</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    temp[<span class="number">4</span>] = datas[<span class="number">3</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">5</span>] = datas[<span class="number">3</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">6</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    temp[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    UartInit();</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Read_Data_From_DHT();</span><br><span class="line">        <span class="keyword">if</span> (datas[<span class="number">2</span>] &gt; <span class="number">24</span>) &#123; fengshan = <span class="number">0</span>; &#125;</span><br><span class="line">        Build_Datas();</span><br><span class="line">        sendString(huma);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sendString(temp);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        LCD1602_showLine(<span class="number">1</span>, <span class="number">2</span>, huma);</span><br><span class="line">        LCD1602_showLine(<span class="number">2</span>, <span class="number">2</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分文件编程（推荐）"><a href="#分文件编程（推荐）" class="headerlink" title="分文件编程（推荐）"></a>分文件编程（推荐）</h3><p>代码结构</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/202208111826017.png" alt="image-20220811182648943"></p><p>说明</p><ul><li>config.h 接口定义</li><li>delay.h 延迟函数</li><li>dht11.h 温湿度模块</li><li>lcd1602.h LCD1602显示</li><li>uart.h 串口初始化</li><li>main 主函数</li></ul><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接线：LCD1602数据选用P0口， RS接P1.0 RW接P1.1 EN接P1.4 </span></span><br><span class="line"><span class="comment">//DHT11：数据线接P3.3口</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;lcd1602.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="type">char</span> temp[<span class="number">8</span>];</span><br><span class="line"><span class="type">char</span> huma[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">Build_Datas</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    huma[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    huma[<span class="number">1</span>] = datas[<span class="number">0</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">2</span>] = datas[<span class="number">0</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    huma[<span class="number">4</span>] = datas[<span class="number">1</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">5</span>] = datas[<span class="number">1</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    huma[<span class="number">6</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    huma[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    temp[<span class="number">1</span>] = datas[<span class="number">2</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">2</span>] = datas[<span class="number">2</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">3</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    temp[<span class="number">4</span>] = datas[<span class="number">3</span>] / <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">5</span>] = datas[<span class="number">3</span>] % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line">    temp[<span class="number">6</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    temp[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    UartInit();</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    ledOne = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">         Read_Data_From_DHT();</span><br><span class="line">        <span class="keyword">if</span> (datas[<span class="number">2</span>] &gt;= <span class="number">24</span>)</span><br><span class="line">         &#123; fengshan = <span class="number">0</span>; &#125; <span class="comment">//风扇开关</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">        Build_Datas();</span><br><span class="line">        sendString(huma);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sendString(temp);</span><br><span class="line">        sendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        LCD1602_showLine(<span class="number">1</span>, <span class="number">2</span>, huma);</span><br><span class="line">        LCD1602_showLine(<span class="number">2</span>, <span class="number">2</span>, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="config-h"><a href="#config-h" class="headerlink" title="config.h"></a>config.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbit ledOne   = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit fengshan = P1 ^ <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h4 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">54</span>;</span><br><span class="line">    j = <span class="number">199</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">while</span> (--i)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h4> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay60us</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay40us</span><span class="params">()</span>; <span class="comment">//@11.0592MHz</span></span><br></pre></td></tr></table></figure><h4 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">char</span> datas[<span class="number">5</span>];</span><br><span class="line">sbit dht      = P3 ^ <span class="number">3</span>; <span class="comment">//模块的data插在p3.3</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    dht = <span class="number">0</span>; <span class="comment">//延时30ms</span></span><br><span class="line">    Delay30ms();</span><br><span class="line">    dht = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//卡d点；</span></span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">//卡e点 while (!dht) 卡f点：while(dht) while (dht);</span></span><br><span class="line">    <span class="keyword">while</span> (!dht)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">while</span> (dht)</span><br><span class="line">        ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//轮</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">//每一轮读多少次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="type">char</span> flag;</span><br><span class="line">    DHT11_Start();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123; <span class="comment">//卡g点while(!dht) 有效数据都是高电平，持续时间不一样，50us读，低电平0 高 电平</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!dht)</span><br><span class="line">                ; <span class="comment">//等待卡g点</span></span><br><span class="line">            Delay40us();</span><br><span class="line">            <span class="keyword">if</span> (dht == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (dht)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            tmp |= flag;</span><br><span class="line">        &#125;</span><br><span class="line">        datas[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a>dht11.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Read_Data_From_DHT</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="lcd1602-c"><a href="#lcd1602-c" class="headerlink" title="lcd1602.c"></a>lcd1602.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">4</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp   = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN  = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号 //（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置</span></span><br><span class="line"></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Write_Cmd_Func(<span class="number">0x80</span> + <span class="number">0x40</span> + col);</span><br><span class="line">            <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">                <span class="built_in">string</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lcd1602-h"><a href="#lcd1602-h" class="headerlink" title="lcd1602.h"></a>lcd1602.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row, <span class="type">char</span> col, <span class="type">char</span> *<span class="built_in">string</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="uart-c"><a href="#uart-c" class="headerlink" title="uart.c"></a>uart.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">12</span>] ; </span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN不使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span> ;  <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span> ;  <span class="comment">// 开启串口中断 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4 </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp ;</span><br><span class="line">    <span class="type">char</span> i ;  </span><br><span class="line">    <span class="keyword">if</span>(RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span> ; </span><br><span class="line">        tmp = SBUF; </span><br><span class="line">        <span class="keyword">if</span>(tmp == <span class="string">&quot;:&quot;</span>)&#123;</span><br><span class="line">            i = <span class="number">0</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp ; </span><br><span class="line">        <span class="keyword">if</span>(buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)&#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)&#123;</span><br><span class="line">            fengshan = <span class="number">1</span> ; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uart-h"><a href="#uart-h" class="headerlink" title="uart.h"></a>uart.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> ;<span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>接上蓝牙透传模块 可以在手机的蓝牙助手查看数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> DHT11 </tag>
            
            <tag> 单片机非标准协议外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记六</title>
      <link href="/posts/47340.html"/>
      <url>/posts/47340.html</url>
      
        <content type="html"><![CDATA[<h1 id="非标协议外设"><a href="#非标协议外设" class="headerlink" title="非标协议外设"></a><strong>非标协议外设</strong></h1><h2 id="LCD1602显示"><a href="#LCD1602显示" class="headerlink" title="LCD1602显示"></a>LCD1602显示</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><blockquote><p>LCD1602（Liquid Crystal Display）是一种工业字符型液晶，能够同时显示 16×02 即 32 字符(16列两行) </p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705221821632.png" alt="image-20220705221821632"></p><h3 id="引脚说明"><a href="#引脚说明" class="headerlink" title="引脚说明"></a>引脚说明</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705221824828.png" alt="image-20220705221824828"></p><blockquote><p>第 1 脚: VSS 为电源地<br>第 2 脚: VDD 接 5V 正电源<br>第 3 脚: VL 为液晶显示器对比度调整端,接正电源时对比度最弱，接地时对比度最高，对比度过高时会产生“鬼影”，使用时可以通过一个 10K 的电位器调整对比度。<br>第 4 脚：RS 为寄存器选择，高电平时选择数据寄存器、低电平时选择指令寄存器。<br>第 5 脚：R&#x2F;W 为读写信号线，高电平时进行读操作，低电平时进行写操作。当 RS 和 R&#x2F;W 共同为低电平时可以写入指令或者显示地址，当 RS 为低电平 R&#x2F;W 为高电平时可以读忙信号，当 RS 为高电平 R&#x2F;W 为低电平时可以写入数据。<br>第 6 脚：E 端为使能端，当 E 端由高电平跳变成低电平时，液晶模块执行命令。<br>第 7-14 脚：D0～D7 为 8 位双向数据线。<br>第 15 脚：背光源正极。<br>第 16 脚：背光源负极。</p></blockquote><h3 id="接线表"><a href="#接线表" class="headerlink" title="接线表"></a>接线表</h3><table><thead><tr><th>LCD1602</th><th>单片机</th></tr></thead><tbody><tr><td>VSS</td><td>GND</td></tr><tr><td>VDD</td><td>5V</td></tr><tr><td>VO</td><td>GND</td></tr><tr><td>RS</td><td>P1.0</td></tr><tr><td>RW</td><td>P1.1</td></tr><tr><td>E</td><td>P1.2</td></tr><tr><td>A</td><td>5V</td></tr><tr><td>K</td><td>GND</td></tr><tr><td>D0~D7</td><td>P0.0~Po.7</td></tr></tbody></table><h3 id="LCD1602指令"><a href="#LCD1602指令" class="headerlink" title="LCD1602指令"></a>LCD1602指令</h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705222932571.png" alt="image-20220705222932571"></p><h3 id="开发逻辑"><a href="#开发逻辑" class="headerlink" title="开发逻辑"></a><strong>开发逻辑</strong></h3><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705222947558.png" alt="image-20220705222947558"></p><p>例如第二行第一个字符的地址是 40H，那么是否直接写入 40H 就可以将光标定位在第二行第一个字符的位置呢？这样不行，因为写入显示地址时要求最高位 D7 恒定为高电平 1 所以实际写入的数据应该是01000000B(40H) +10000000B(80H)&#x3D;11000000B(C0H)</p><h4 id="显示什么"><a href="#显示什么" class="headerlink" title="显示什么"></a>显示什么</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223032600.png" alt="image-20220705223032600"></p><h4 id="读写操作时序"><a href="#读写操作时序" class="headerlink" title="读写操作时序"></a><strong>读写操作时序</strong></h4><h5 id="读操作时序"><a href="#读操作时序" class="headerlink" title="读操作时序"></a>读操作时序</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223114577.png" alt="image-20220705223114577"></p><h5 id="写操作时序"><a href="#写操作时序" class="headerlink" title="写操作时序"></a>写操作时序</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223129166.png" alt="image-20220705223129166"></p><h5 id="数序参数"><a href="#数序参数" class="headerlink" title="数序参数"></a>数序参数</h5><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705223144533.png" alt="image-20220705223144533"></p><h3 id="显示一个字符C"><a href="#显示一个字符C" class="headerlink" title="显示一个字符C"></a>显示一个字符<strong>C</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="comment">/*RS -- P1.0</span></span><br><span class="line"><span class="comment">RW -- P1.1</span></span><br><span class="line"><span class="comment">E -- P1.2 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">2</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123; <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号</span></span><br><span class="line">    <span class="comment">//（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置&#125;</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> position = <span class="number">0x80</span> + <span class="number">0x05</span>;</span><br><span class="line">    <span class="type">char</span> dataShow = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    Write_Cmd_Func(position);</span><br><span class="line">    <span class="comment">//选择要显示的地址</span></span><br><span class="line">    Write_Data_Func(dataShow);</span><br><span class="line">    <span class="comment">//发送要显示的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/IMG_4517.jpg" alt="IMG_4517"></p><blockquote><p>这里的电位器 用于调整对比度 </p><p>也就是V0 引脚 当v0 为5v的时候对比度最大 啥也看不见 </p><p>当V0为GND 的时候 对比度最小 可以看见 但是有方块</p></blockquote><h3 id="显示一行文字"><a href="#显示一行文字" class="headerlink" title="显示一行文字"></a>显示一行文字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="comment">/*RS -- P1.0</span></span><br><span class="line"><span class="comment">RW -- P1.1</span></span><br><span class="line"><span class="comment">E -- P1.2 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> databuffer P0 <span class="comment">//定义8位数据线，Po端口组</span></span></span><br><span class="line">sbit RS = P1 ^ <span class="number">0</span>;</span><br><span class="line">sbit RW = P1 ^ <span class="number">1</span>;</span><br><span class="line">sbit EN = P1 ^ <span class="number">2</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_busy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp = <span class="number">0x80</span>;</span><br><span class="line">    databuffer = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &amp; <span class="number">0x80</span>)</span><br><span class="line">    &#123; <span class="comment">// 1000 0000</span></span><br><span class="line">        RS = <span class="number">0</span>;</span><br><span class="line">        RW = <span class="number">1</span>;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        EN = <span class="number">1</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">        _nop_();</span><br><span class="line">        tmp = databuffer;</span><br><span class="line">        EN = <span class="number">0</span>;</span><br><span class="line">        _nop_();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Cmd_Func</span><span class="params">(<span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">0</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = cmd;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Data_Func</span><span class="params">(<span class="type">char</span> dataShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    check_busy();</span><br><span class="line">    RS = <span class="number">1</span>;</span><br><span class="line">    RW = <span class="number">0</span>;</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    databuffer = dataShow;</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">1</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">    _nop_();</span><br><span class="line">    EN = <span class="number">0</span>;</span><br><span class="line">    _nop_();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay15ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">27</span>;</span><br><span class="line">    j = <span class="number">226</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i,</span><br><span class="line">        j;</span><br><span class="line">    i = <span class="number">9</span>;</span><br><span class="line">    j = <span class="number">244</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (--j)</span><br><span class="line">            ;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_INIT</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//（1）延时 15ms</span></span><br><span class="line">    Delay15ms();</span><br><span class="line">    <span class="comment">//（2）写指令 38H(不检测忙信号)</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（3）延时 5ms</span></span><br><span class="line">    Delay5ms();</span><br><span class="line">    <span class="comment">//（4）以后每次写指令，读/写数据操作均需要检测忙信号</span></span><br><span class="line">    <span class="comment">//（5）写指令 38H：显示模式设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x38</span>);</span><br><span class="line">    <span class="comment">//（6）写指令 08H：显示关闭</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x08</span>);</span><br><span class="line">    <span class="comment">//（7）写指令 01H：显示清屏</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x01</span>);</span><br><span class="line">    <span class="comment">//（8）写指令 06H：显示光标移动设置</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x06</span>);</span><br><span class="line">    <span class="comment">//（9）写指令 0CH：显示开及光标设置&#125;</span></span><br><span class="line">    Write_Cmd_Func(<span class="number">0x0c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_showLine</span><span class="params">(<span class="type">char</span> row,<span class="type">char</span> col,<span class="type">char</span> *<span class="built_in">string</span>)</span>&#123; <span class="comment">// row 选择显示行数 col 显示位置 string 显示的内容</span></span><br><span class="line">    <span class="keyword">switch</span> (row)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Write_Cmd_Func(<span class="number">0x80</span>+col); </span><br><span class="line">        <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">            <span class="built_in">string</span>++;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">    Write_Cmd_Func(<span class="number">0x80</span>+<span class="number">0x40</span>+col); </span><br><span class="line">        <span class="keyword">while</span> (*<span class="built_in">string</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Write_Data_Func(*<span class="built_in">string</span>);</span><br><span class="line">            <span class="built_in">string</span>++;</span><br><span class="line">            <span class="comment">/* code */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> position = <span class="number">0x80</span> + <span class="number">0x05</span>;</span><br><span class="line">    <span class="type">char</span> dataShow = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">    LCD1602_INIT();</span><br><span class="line">    <span class="comment">// Write_Cmd_Func(position);</span></span><br><span class="line">    <span class="comment">// //选择要显示的地址</span></span><br><span class="line">    <span class="comment">// Write_Data_Func(dataShow);</span></span><br><span class="line">    <span class="comment">// //发送要显示的字符</span></span><br><span class="line">    LCD1602_showLine(<span class="number">1</span>,<span class="number">5</span>,<span class="string">&quot;NO.1&quot;</span>); <span class="comment">//第一行的第五个位置开始显示 NO.1 </span></span><br><span class="line">    LCD1602_showLine(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;xiaoliutongxue&quot;</span>); <span class="comment">// 第二行的第零个位置开始显示 小刘同学</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 单片机非标准协议外设 </tag>
            
            <tag> LCD1602 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记五</title>
      <link href="/posts/39532.html"/>
      <url>/posts/39532.html</url>
      
        <content type="html"><![CDATA[<h1 id="蓝牙与wifi模块"><a href="#蓝牙与wifi模块" class="headerlink" title="蓝牙与wifi模块"></a>蓝牙与wifi模块</h1><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p>蓝牙模块，又叫做蓝牙串口模块</p><p>串口透传技术</p><blockquote><p>透传即透明传送，是指在数据的传输过程中，通过无线的方式这组数据不发生任何形式的改变，仿佛传输过程是透明的一样，同时保证传输的质量，原封不动地到了最终接收者手里。</p></blockquote><p>以太网，蓝牙，Zigbee, GPRS 等模块玩法一样，对嵌入式程序员来说，不需要关心通讯模块内部数据</p><p>及协议栈工作原理，只要通过串口编程获得数据即可</p><p>接线 </p><blockquote><p>串口交叉相连</p></blockquote><table><thead><tr><th align="center">单片机</th><th align="center">蓝牙模块</th></tr></thead><tbody><tr><td align="center">RX</td><td align="center">TX</td></tr><tr><td align="center">TX</td><td align="center">RX</td></tr><tr><td align="center">VCC</td><td align="center">VCC</td></tr><tr><td align="center">GND</td><td align="center">GND</td></tr></tbody></table><h2 id="Wifi模块ESP-01s"><a href="#Wifi模块ESP-01s" class="headerlink" title="Wifi模块ESP-01s"></a>Wifi模块<strong>ESP-01s</strong></h2><h3 id="AT-指令"><a href="#AT-指令" class="headerlink" title="AT****指令"></a><strong>AT****指令</strong></h3><blockquote><p>AT指令集是从终端设备（Terminal Equipment，TE)或数据终端设备（Data TerminalEquipment，DTE)向终端适配器(Terminal Adapter，TA)或数据电路终端设备(Data CircuitTerminal Equipment，DCE)发送的。</p><p>其对所传输的数据包大小有定义：即对于AT指令的发送，除AT两个字符外，最多可以接收1056个字符的长度（包括最后的空字符）。</p><p>每个AT命令行中只能包含一条AT指令；对于由终端设备主动向PC端报告的URC指示或者response响应，也要求一行最多有一个，不允许上报的一行中有多条指示或者响应。AT指令以回车作为结尾，响应或上报以回车换行为结尾。</p></blockquote><blockquote><p>ESP-01s<code>出厂波特率</code>正常是115200, 注意：AT指令，控制类都要加回车，数据传输时不加回车</p></blockquote><ul><li>上电后，通过串口输出一串系统开机信息，购买的部分模块可能电压不稳，导致乱码，以 ready 为 准</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">################################################ </span><br><span class="line">arch:ESP8266, 1 </span><br><span class="line">compile_time:Ai-Thinker|B&amp;T </span><br><span class="line">wifi_mac:4c75250dAE2F </span><br><span class="line">sdk_version:v3.4-22-g967752e2 </span><br><span class="line">firmware_version:2.2.0 </span><br><span class="line">compile_time:Jun 30 </span><br><span class="line">2021 11:28:20 ready </span><br><span class="line">################################################</span><br></pre></td></tr></table></figure><ul><li>上电后发送AT指令测试通信及模块功能是否正常</li></ul><blockquote><p>发送AT</p><p>返回OK 就没问题了</p></blockquote><ul><li>通过一下命令配置成9600波特率</li></ul><blockquote><p>AT+UART&#x3D;9600,8,1,0,0 </p></blockquote><h3 id="入网设置"><a href="#入网设置" class="headerlink" title="入网设置"></a><strong>入网设置</strong></h3><ul><li>设置工作模式</li></ul><blockquote><p>AT+CWMODE&#x3D;3 &#x2F;&#x2F;1. 是station（设备）模式 2.是AP（路由）模式 3.是双模</p><p>OK </p></blockquote><ul><li>以设备模式接入家中路由器配置</li></ul><blockquote><p>AT+CWJAP&#x3D;”wifi名字”,”wifi密码” &#x2F;&#x2F;指令    </p><p>WIFI CONNECTED &#x2F;&#x2F;结果 </p><p>WIFI GOT IP &#x2F;&#x2F;结果 </p></blockquote><blockquote><p>这里 连接wifi的时候 只能连接2.4G的wifi 5Gwifi不支持</p></blockquote><p>查询IP地址</p><blockquote><p>AT+CIFSR</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+CIFSR:APIP,&quot;192.168.4.1&quot;</span><br><span class="line">+CIFSR:APMAC,&quot;a6:e5:7c:1e:c5:96&quot;</span><br><span class="line">+CIFSR:STAIP,&quot;192.168.3.52&quot;</span><br><span class="line">+CIFSR:STAMAC,&quot;a4:e5:7c:1e:c5:96&quot;</span><br></pre></td></tr></table></figure><h3 id="连接到-TCP-server"><a href="#连接到-TCP-server" class="headerlink" title="连接到 TCP server"></a><strong>连接到</strong> <strong>TCP server</strong></h3><p>开关网络助手，设立TCP服务器</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704165833278.png" alt="image-20220704165833278"></p><blockquote><p> AT+CIPSTART&#x3D;”TCP”,”192.168.3.19”,1234</p><p>CONNECT &#x2F;&#x2F;结果：成功 </p><p>OK &#x2F;&#x2F;结果：成功</p></blockquote><h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><blockquote><p>AT+CIPSEND&#x3D;4 &#x2F;&#x2F; 设置即将发送数据的长度 （这里是4个字节） </p><p>&gt;CLCA &#x2F;&#x2F; 看到大于号后，输入消息，CLCA，不要带回车 </p><p>Response :SEND OK &#x2F;&#x2F;结果：成功 </p><p>&#x2F;&#x2F;注意，这种情况下，每次发送前都要先发送AT+CIPSEND&#x3D;长度 的指令，再发数据！</p></blockquote><h3 id="透传"><a href="#透传" class="headerlink" title="透传"></a><strong>透传</strong></h3><ul><li>未设置透传模式 每次发送数据都要进行字符长度设定，如果设置成透传，就有点像蓝牙模块的玩法</li></ul><p>在连接到socket服务后 </p><blockquote><p>AT+CIPMODE&#x3D;1 &#x2F;&#x2F;开启透传模式</p><p>Response :OK 返回</p></blockquote><blockquote><p>AT+CIPSEND &#x2F;&#x2F;带回车 </p><p>Response: &gt; </p></blockquote><p>退出透传模式</p><blockquote><p>&#x2F;&#x2F;在透传发送数据过程中，若识别到单独的⼀包数据 “+++”，则退出透传发送 </p></blockquote><h3 id="通过socket控制LED小灯"><a href="#通过socket控制LED小灯" class="headerlink" title="通过socket控制LED小灯"></a>通过socket控制LED小灯</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;STRING.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit LED2 = P3 ^ <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">code <span class="type">char</span> LJWL[] = <span class="string">&quot;AT+CWJAP=\&quot;liuxu\&quot;,\&quot;liuxu123121\&quot;\r\n&quot;</span>; <span class="comment">//入网指令</span></span><br><span class="line">code <span class="type">char</span> LJFWQ[] = <span class="string">&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;192.168.3.19\&quot;,1234\r\n&quot;</span>;<span class="comment">//连接服务器</span></span><br><span class="line">code <span class="type">char</span> TCMS[] = <span class="string">&quot;AT+CIPMODE=1\r\n&quot;</span>; <span class="comment">//透传指令</span></span><br><span class="line">code <span class="type">char</span> FSSJ[] = <span class="string">&quot;AT+CIPSEND\r\n&quot;</span>; <span class="comment">//数据传输开始指令</span></span><br><span class="line">code <span class="type">char</span> RESET[] = <span class="string">&quot;AT+RST\r\n&quot;</span>; <span class="comment">//重启模块指令</span></span><br><span class="line"><span class="type">char</span> AT_OK_Flag = <span class="number">0</span>; <span class="comment">//OK返回值的标志位</span></span><br><span class="line"><span class="type">char</span> AT_Connect_Net_Flag = <span class="number">0</span>;<span class="comment">//WIFI GOT IP返回值的标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">16</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LED = <span class="number">1</span>;</span><br><span class="line">    LED2 = <span class="number">1</span>;</span><br><span class="line">    UartInit();</span><br><span class="line">    Delay1000ms();</span><br><span class="line">    SendString(LJWL);</span><br><span class="line">    <span class="keyword">while</span> (!AT_Connect_Net_Flag);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(LJFWQ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(TCMS);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SendString(FSSJ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (AT_Connect_Net_Flag)&#123;</span><br><span class="line">        LED = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (AT_OK_Flag)&#123;</span><br><span class="line">        LED2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">            Delay1000ms();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;W&#x27;</span> || tmp == <span class="string">&#x27;O&#x27;</span> || tmp == <span class="string">&#x27;L&#x27;</span> || tmp == <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp; <span class="comment">//入网成功的判断依据WIFI GOT IP</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; buffer[<span class="number">5</span>] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_Connect_Net_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//连接服务器等OK返回值指令的判断</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_OK_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//联网失败出现FAIL字样捕获</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                LED = <span class="number">0</span>;</span><br><span class="line">                Delay1000ms();</span><br><span class="line">                LED = <span class="number">1</span>;</span><br><span class="line">                Delay1000ms();</span><br><span class="line">            &#125;</span><br><span class="line">            SendString(RESET);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//灯控指令</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == SIZE)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704181105911.png"></p><h4 id="代码重点："><a href="#代码重点：" class="headerlink" title="代码重点："></a>代码重点：</h4><blockquote><p>当捕获到 </p><p>WIFI GOT IP</p><p>证明 联网成功 联网标志改为1 </p><p>当捕获到OK </p><p>证明指令执行成功  指令执行标志位 改为1 </p><p>当捕获到 F </p><p>证明指令执行错误 小灯闪烁5次 重启模块</p></blockquote><h3 id="ESP01模块作为路由器"><a href="#ESP01模块作为路由器" class="headerlink" title="ESP01模块作为路由器"></a>ESP01模块作为路由器</h3><p>USB转TTL插入电脑，TX–RX RX-TX VCC-3.3V GDN-GND</p><p>查询IP地址：AT+CIFSR</p><blockquote><p>&#x2F;&#x2F;1 配置成双模 </p><p>AT+CWMODE&#x3D;2 </p><p>Response :OK </p><p>&#x2F;&#x2F;2 使能多链接</p><p>AT+CIPMUX&#x3D;1 </p><p>Response :OK </p><p>&#x2F;&#x2F;3 建立TCPServer </p><p>AT+CIPSERVER&#x3D;1 &#x2F;&#x2F; default port &#x3D; 333 </p><p>Response :OK </p><hr><p>到这里 socket 服务器已经打开 连接地址为 espIP地址 端口 333 </p><p>向客户端发送信息</p><p>&#x2F;&#x2F;4 发送数据 </p><p>AT+CIPSEND&#x3D;0,4 &#x2F;&#x2F; 发送4个字节在连接0通道上 </p><p>&gt;abcd &#x2F;&#x2F;输入数据，不带回车 </p><p>Response :SEND OK </p><p>&#x2F;&#x2F;• 接收数据 </p><p>+IPD, 0, n: xxxxxxxxxx &#x2F;&#x2F;+IPD是固定字符串 0是通道，n是数据长度，xxx是数据 </p><p>&#x2F;&#x2F;断开连接 </p><p>AT+CIPCLOSE&#x3D;0 </p><p>Response :0, CLOSED OK </p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220704223056856.png" alt="image-20220704223056856"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESP-01s工作在路由模式，查询路由器IP地址192.168.4.1，使用的服务器默认端口号333</span></span><br><span class="line"><span class="comment">// ESP-01s收到收到数据op/cl给上官一号，实现D6led的亮/灭</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;intrins.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 12</span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit D5 = P3 ^ <span class="number">7</span>;</span><br><span class="line">sbit D6 = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">char</span> buffer[SIZE];                  <span class="comment">// 1 工作在路由模式</span></span><br><span class="line"><span class="type">char</span> LYMO[] = <span class="string">&quot;AT+CWMODE=2\r\n&quot;</span>;    <span class="comment">// 2 使能多链接</span></span><br><span class="line"><span class="type">char</span> DLJ[] = <span class="string">&quot;AT+CIPMUX=1\r\n&quot;</span>;     <span class="comment">// 3 建立TCPServer</span></span><br><span class="line"><span class="type">char</span> JLFW[] = <span class="string">&quot;AT+CIPSERVER=1\r\n&quot;</span>; <span class="comment">// default port = 333</span></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="type">char</span> FSSJ[] = <span class="string">&quot;AT+CIPSEND=0,5\r\n&quot;</span>;</span><br><span class="line"><span class="type">char</span> AT_OK_Flag = <span class="number">0</span>;          <span class="comment">// OK返回值的标志位</span></span><br><span class="line"><span class="type">char</span> AT_Connect_Net_Flag = <span class="number">0</span>; <span class="comment">// WIFI GOT IP返回值的标志位</span></span><br><span class="line"><span class="type">char</span> Client_Connect_Flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    _nop_();</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mark = <span class="number">0</span>;</span><br><span class="line">    D5 = D6 = <span class="number">1</span>; <span class="comment">//灭状态灯 //配置C51串口的通信方式</span></span><br><span class="line">    UartInit();</span><br><span class="line">    Delay1000ms(); <span class="comment">//给espwifi模块上电时间</span></span><br><span class="line">    sendString(LYMO);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    sendString(DLJ);</span><br><span class="line">    <span class="keyword">while</span> (!AT_OK_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    sendString(JLFW);</span><br><span class="line">    <span class="keyword">while</span> (!Client_Connect_Flag)</span><br><span class="line">        ;</span><br><span class="line">    AT_OK_Flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (Client_Connect_Flag)</span><br><span class="line">    &#123;</span><br><span class="line">        D5 = <span class="number">0</span>; <span class="comment">//点亮D5,代表有客户端接入</span></span><br><span class="line">        D6 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123; <span class="comment">// 4 发送数据</span></span><br><span class="line">        sendString(FSSJ);</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        sendString(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        Delay1000ms();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uart_Handler</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//静态变量，被初始化一次</span></span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">if</span> (RI) <span class="comment">//中断处理函数中，对于接收中断的响应</span></span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>; <span class="comment">//清除接收中断标志位</span></span><br><span class="line">        tmp = SBUF;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;W&#x27;</span> || tmp == <span class="string">&#x27;O&#x27;</span> || tmp == <span class="string">&#x27;L&#x27;</span> || tmp == <span class="string">&#x27;0&#x27;</span> || tmp == <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer[i++] = tmp; <span class="comment">//入网成功的判断依据WIFI GOT IP</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; buffer[<span class="number">5</span>] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_Connect_Net_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//连接服务器等OK返回值指令的判断</span></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AT_OK_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Client_Connect_Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125; <span class="comment">//灯控指令</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">0</span>; <span class="comment">//点亮D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &amp;&amp; buffer[<span class="number">1</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; buffer[<span class="number">2</span>] == <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D5 = <span class="number">1</span>; <span class="comment">//熄灭D5</span></span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span>)</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 蓝牙 </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机学习笔记四</title>
      <link href="/posts/28819.html"/>
      <url>/posts/28819.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是串口"><a href="#什么是串口" class="headerlink" title="什么是串口"></a>什么是串口</h3><blockquote><p>串行接口简称串口，也称串行通信接口或串行通讯接口（通常指COM接口），是采用串行通信方</p><p>式的扩展接口。串行接口（Serial Interface）是指数据一位一位地顺序传送。其特点是通信线路简</p><p>单，只要一对传输线就可以实现双向通信（可以直接利用电话线作为传输线），从而大大降低了成</p><p>本，特别适用于远距离通信，但传送速度较慢</p></blockquote><ul><li>是设备间接线通信的一种方式</li><li>数据一位一位地顺序传送</li><li>双向通信，全双工</li><li>传送速度相对较慢</li></ul><h3 id="关于电器标准和协议"><a href="#关于电器标准和协议" class="headerlink" title="关于电器标准和协议"></a><strong>关于电器标准和协议</strong></h3><blockquote><p>串行接口按电气标准及协议来分包括RS-232-C、RS-422、RS485等。RS-232-C、RS-422与RS-485</p><p>标准只对接口的电气特性做出规定，不涉及接插件、电缆或协议。</p></blockquote><p>​也称标准串口，最常用的一种[串行通讯接口,比如我们的电脑主机的9针串口 ，最高速率为20kb&#x2F;sRS-232是为点对点（即只用一对收、发设备）通讯而设计的，其传送距离最大为约15米。所以RS-232适合本地设备之间的通信</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161405514.png" alt="image-20220630161405514"></p><h4 id="RS-422"><a href="#RS-422" class="headerlink" title="RS-422"></a>RS-422</h4><p>由于接收器采用高输入阻抗和发送驱动器比RS232更强的驱动能力，故允许在相同传输线上连接多个接收节点，最多可接10个节点。即一个主设备（Master），其余为从设备（Slave），从设备之间不能通信，所以RS-422支持点对多的双向通信。</p><p>RS-422的最大传输距离为1219米，最大传输速率为10Mb&#x2F;s。平衡双绞线的长度与传输速率成反比</p><h4 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485"></a>RS-485</h4><p>是从RS-422基础上发展而来的，无论四线还是二线连接方式总线上可多接到32个设备。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161450717.png" alt="image-20220630161450717"></p><h3 id="关于串口的电平"><a href="#关于串口的电平" class="headerlink" title="关于串口的电平"></a><strong>关于串口的电平</strong></h3><h4 id="经常听说的UART"><a href="#经常听说的UART" class="headerlink" title="经常听说的UART"></a>经常听说的UART</h4><blockquote><p>异步串行是指UART（Universal Asynchronous Receiver&#x2F;Transmitter），通用异步接收&#x2F;发送。</p><p>UART包含TTL电平的串口和RS232电平的串口</p></blockquote><h4 id="RS232电平"><a href="#RS232电平" class="headerlink" title="RS232电平"></a>RS232电平</h4><p>逻辑1为-3<del>-15V的电压, 逻辑0为3</del>15V的电压</p><ul><li>笔记本通过RS232电平和单片机通信</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161724673.png" alt="image-20220630161724673"></p><ul><li>TTL电平</li></ul><p>​TTL是Transistor-Transistor Logic，即晶体管-晶体管逻辑的简称，它是计算机处理器控制的设备内部各部分之间通信的标准技术。TTL电平信号应用广泛，是因为其数据表示采用二进制规定，</p><ul><li><p>+5V等价于逻辑”1”，0V等价于逻辑”0”。</p><p>数字电路中，由TTL电子元器件组成电路的电平是个电压范围，规定：</p></li><li><p>输出高电平&gt;&#x3D;2.4V，输出低电平&lt;&#x3D;0.4V；</p></li><li><p>输入高电平&gt;&#x3D;2.0V，输入低电平&lt;&#x3D;0.8V</p><ul><li><p>笔记本电脑通过TTL电平与单片机通信</p><p>TX发送线（端口）3.1</p><p>RX接收线 (端口）3.0</p></li></ul></li></ul><p>USB转TTL，使用ch340通信 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630161942810.png" alt="image-20220630161942810"></p><ul><li><p>上官一号</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162811236.png" alt="image-20220630162811236"></p></li></ul><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><h3 id="串口接线方式"><a href="#串口接线方式" class="headerlink" title="串口接线方式"></a><strong>串口接线方式</strong></h3><ul><li><p>RXD：数据输入引脚，数据接受；STC89系列对应P3.0口，上官一号有单独引出</p></li><li><p>TXD：数据发送引脚，数据发送；STC89系列对应P3.1口，上官一号有单独引出</p></li><li><p>接线方式</p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162903062.png" alt="image-20220630162903062"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/imageimage-20220630162907262.png" alt="image-20220630162907262"></p><p>印象塑造</p><ul><li><p>输入&#x2F;输出数据缓冲器都叫做<em><strong>SBUF</strong></em>, 都用99H地址码，但是是两个独立的8位寄存器 </p></li><li><p>代码体现为： 想要接收数据 <code>char data = SBUF</code> 想要发送数据<code>SBUF = data</code></p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630195523220.png" alt="image-20220630195523220"></p><ul><li>回忆UART是异步串行接口，通信双方使用时钟不同，因为双方硬件配置不同，但是需要约定通信速度，叫做<em><strong>波特率</strong></em></li></ul><p>对于电脑来说，别人做好了软件，鼠标点点点就能配置好，而苦逼单片机的波特率配置需要我们写代码</p><p>点点点配置什么，我们代码也要配置对应参数</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630195630843.png" alt="image-20220630195630843"></p><ul><li><p><strong>字符<code>&#39;a&#39;</code>是如何从单片机上传到PC的</strong></p><p>a的ASSII码是97，16进制就是0x61, 二进制是01010001，这个8位就是数据位</p><p>串口工作模式1，一帧数据有10位，起始位（0），数据位，停止位（1）</p><p>那么a的一帧数据就是  0 1000 1010 1 起始位，a的低位到高位，停止位</p></li><li><p>除了速度要求，还要有数据格式，双方<code>暗号</code>对上了再发数据，所以有<em><strong>起始位</strong></em>，和<em><strong>停止位</strong></em> 的概念</p></li></ul><h3 id="串口代码"><a href="#串口代码" class="headerlink" title="串口代码"></a>串口代码</h3><h4 id="发送一个字符"><a href="#发送一个字符" class="headerlink" title="发送一个字符"></a>发送一个字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">PCON &amp;= <span class="number">0x7F</span>;<span class="comment">//波特率不倍速</span></span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">AUXR &amp;= <span class="number">0xBF</span>;<span class="comment">//定时器时钟12T模式</span></span><br><span class="line">AUXR &amp;= <span class="number">0xFE</span>;<span class="comment">//串口1选择定时器1为波特率发生器</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;<span class="comment">//设置定时重载值</span></span><br><span class="line">ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器%d中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> data_msg = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SBUF = data_msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220630214450155.png" alt="image-20220630214450155"></p><hr><h4 id="发送一个字符串"><a href="#发送一个字符串" class="headerlink" title="发送一个字符串"></a>发送一个字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">AUXR = <span class="number">0x01</span>;</span><br><span class="line">SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//9600波特率的初值</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//启动定时器</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//开启总中断</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>&#123;</span><br><span class="line">SBUF = data_msg; </span><br><span class="line"><span class="keyword">while</span> (!TI);</span><br><span class="line">TI = <span class="number">0</span> ; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sendByte(*str);</span><br><span class="line">str++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220701180259863.png" alt="image-20220701180259863"></p><hr><blockquote><p>代码中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!TI);</span><br><span class="line">TI = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>TI 是单片机串口发送中断的请求位：</p><ul><li>当 串行数据发送 结束时 TI&#x3D;1 </li><li>在发送过程中为 TI &#x3D; 0 ；</li></ul><p>所以 当在发送数据的时候 TI0 通过 while等待 直到数据全部写入完成</p><p>想要实现换行 使用\r\n 会使串口数据换行对齐</p></blockquote><hr><h4 id="PC发送数据-控制开发板的小灯"><a href="#PC发送数据-控制开发板的小灯" class="headerlink" title="PC发送数据 控制开发板的小灯"></a>PC发送数据 控制开发板的小灯</h4><p>当RI &#x3D; 1 的时候 单片机就知道 串口 有数据来了 </p><blockquote><p>这里需要和发送请求为TI做区分</p><p>接收完数据后需要软件将RI接受位 置0 </p></blockquote><h5 id="非中断方式-判断串口数据接受位"><a href="#非中断方式-判断串口数据接受位" class="headerlink" title="非中断方式 判断串口数据接受位"></a>非中断方式 判断串口数据接受位</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3^<span class="number">6</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">AUXR = <span class="number">0x01</span>;</span><br><span class="line">SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;<span class="comment">//9600波特率的初值</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//启动定时器</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//开启总中断</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span>&#123;</span><br><span class="line">SBUF = data_msg; </span><br><span class="line"><span class="keyword">while</span> (!TI);</span><br><span class="line">TI = <span class="number">0</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sendByte(*str);</span><br><span class="line">str++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> cmd;</span><br><span class="line">UartInit();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(RI == <span class="number">1</span>)&#123;</span><br><span class="line">           cmd = SBUF;</span><br><span class="line">           <span class="keyword">if</span> (cmd == <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">                LED = <span class="number">0</span> ; </span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">           &#123;</span><br><span class="line">            LED = <span class="number">1</span>; </span><br><span class="line">           &#125;</span><br><span class="line">           RI =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h5><blockquote><p>中断号为 4  需要开启总中断 使EA &#x3D; 1 开启串口中断 ES &#x3D; 1 </p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">128</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span> ; </span><br><span class="line">    <span class="keyword">if</span> (RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>;</span><br><span class="line">        cmd[i] = SBUF;</span><br><span class="line">        i++; </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">12</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span> </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="处理-单词命令"><a href="#处理-单词命令" class="headerlink" title="处理 单词命令"></a>处理 单词命令</h5><blockquote><p>头文件string.h  处理字符串 详见[<a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html">C 标准库 –  | 菜鸟教程 (runoob.com)</a>]:</p><p>用到的api </p><p>strstr(参数1,参数2) </p><ul><li>参数1 需要在那个字符串中查找</li><li>参数2 要查找的字符串</li></ul><p>memset(参数1，参数2，参数3)</p><ul><li>参数1 要初始化的字符串数组或指针</li><li>参数2 要初始化为什么字符 </li><li>参数3 该字符串的大小 根据数组大小或者指针大小而定</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REG52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;STRING.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;STDIO.H&gt;</span></span></span><br><span class="line">sfr AUXR = <span class="number">0x8E</span>;</span><br><span class="line">sbit LED = P3 ^ <span class="number">6</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line">    i = <span class="number">8</span>;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    k = <span class="number">243</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--k)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">    AUXR = <span class="number">0x01</span>;</span><br><span class="line">    SCON = <span class="number">0x50</span>; <span class="comment">//配置串口工作方式1，REN使能接收</span></span><br><span class="line">    TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">    TMOD |= <span class="number">0x20</span>; <span class="comment">//定时器1工作方式位8位自动重装</span></span><br><span class="line">    TH1 = <span class="number">0xFD</span>;</span><br><span class="line">    TL1 = <span class="number">0xFD</span>; <span class="comment">// 9600波特率的初值</span></span><br><span class="line">    TR1 = <span class="number">1</span>;    <span class="comment">//启动定时器</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//开启总中断</span></span><br><span class="line">    ES = <span class="number">1</span>;     <span class="comment">//开启串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendByte</span><span class="params">(<span class="type">char</span> data_msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    SBUF = data_msg;</span><br><span class="line">    <span class="keyword">while</span> (!TI)</span><br><span class="line">        ;</span><br><span class="line">    TI = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendString</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sendByte(*str);</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">16</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LED = <span class="number">0</span> ; </span><br><span class="line">    UartInit();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Delay1000ms();</span><br><span class="line">        SendString(<span class="string">&quot;xiaoliutongxue NB\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Hander</span><span class="params">()</span> interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span> ; </span><br><span class="line">    <span class="keyword">if</span> (RI)</span><br><span class="line">    &#123;</span><br><span class="line">        RI = <span class="number">0</span>;</span><br><span class="line">        cmd[i] = SBUF; <span class="comment">//将SBUF的第一位放到cmd[0]</span></span><br><span class="line">        i++;  <span class="comment">// 向后累加 </span></span><br><span class="line">        <span class="keyword">if</span> (i == SIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span> ;<span class="comment">//指向头部</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmd,<span class="string">&quot;en&quot;</span>)) <span class="comment">// open </span></span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">0</span>;</span><br><span class="line">            i= <span class="number">0</span> ; </span><br><span class="line">            <span class="built_in">memset</span>(cmd,<span class="string">&#x27;\0&#x27;</span>,SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(cmd,<span class="string">&quot;se&quot;</span>)) <span class="comment">//close</span></span><br><span class="line">        &#123;</span><br><span class="line">            LED = <span class="number">1</span>;</span><br><span class="line">            i = <span class="number">0</span> ;</span><br><span class="line">            <span class="built_in">memset</span>(cmd,<span class="string">&#x27;\0&#x27;</span>,SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 串口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记三</title>
      <link href="/posts/62381.html"/>
      <url>/posts/62381.html</url>
      
        <content type="html"><![CDATA[<h1 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>PWM，英文名Pulse Width Modulation，是脉冲宽度调制缩写，它是通过对一系列脉冲的宽度进行调制，等效出所需要的波形（包含形状以及幅值），对模拟信号电平进行数字编码，也就是说通过调节占空比的变化来调节信号、能量等的变化，占空比就是指在一个周期内，信号处于高电平的时间占据整个信号周期的百分比，例如方波的占空比就是50%.</p></blockquote><ul><li><p>脉冲宽度调制</p></li><li><p>通过占空比编码模拟信号</p></li><li><p>占空比<code>一个周期内，高电平占据时长的百分比</code></p></li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291643223.png" alt="image-20220629164300217"></p><h3 id="如何实现PWM信号输出"><a href="#如何实现PWM信号输出" class="headerlink" title="如何实现PWM信号输出"></a><strong>如何实现<strong><strong>PWM</strong></strong>信号输出</strong></h3><ol><li>通过芯片内部模块输出，一般观察手册或者芯片IO口都会标明这个是否是PWM口</li></ol><p>如下图增强51，STC15w的CPU</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126615.png" alt="image-20220629164320716"></p><p> 2.如果没有集成PWM功能，可以通过IO口软件模拟，相对硬件PWM来说精准度略差</p><h2 id="控制舵机"><a href="#控制舵机" class="headerlink" title="控制舵机"></a><strong>控制舵机</strong></h2><h4 id="1-什么是舵机"><a href="#1-什么是舵机" class="headerlink" title="1.什么是舵机"></a>1.什么是舵机</h4><p>如下图所示，最便宜的舵机sg90，常用三根或者四根接线，黄色为PWM信号控制</p><p>用处：垃圾桶项目开盖用、智能小车的全比例转向、摄像头云台、机械臂等</p><p>常见的有0-90°、0-180°、0-360</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126617.png" alt="image-20220629164456069"></p><h4 id="2-怎么控制舵机"><a href="#2-怎么控制舵机" class="headerlink" title="2.怎么控制舵机"></a>2.怎么控制舵机</h4><p>向黄色信号线“灌入”PWM信号。</p><p>PWM波的频率不能太高，大约50HZ，即周期&#x3D;1&#x2F;频率&#x3D;1&#x2F;50&#x3D;0.02s，20ms左右</p><p>数据：</p><p>0.5ms————-0度； 2.5% 对应函数中占空比为250</p><p>1.0ms————45度； 5.0% 对应函数中占空比为500</p><p>1.5ms————90度； 7.5% 对应函数中占空比为750</p><p>2.0ms———–135度； 10.0% 对应函数中占空比为1000</p><p>2.5ms———–180度； 12.5% 对应函数中占空比为1250</p><p>定时器需要定时20ms, 关心的单位0.5ms, 40个的0.5ms,初值0.5m cnt++</p><p>1s &#x3D; 10ms * 100</p><p>20ms &#x3D; 0.5ms * 40</p><ol start="3"><li>编程实现</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126618.png" alt="image-20220629164514379"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//计数变量</span></span><br><span class="line">sbit sg90_con = P1^<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span> jd; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay2000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">15</span>;</span><br><span class="line">j = <span class="number">2</span>;</span><br><span class="line">k = <span class="number">235</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">time1init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    TMOD = <span class="number">0x01</span>; <span class="comment">// 模式配置 16</span></span><br><span class="line">    TL0 = <span class="number">0x33</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">    TR0 = <span class="number">1</span>; <span class="comment">// 开始计时</span></span><br><span class="line">    ET0 = <span class="number">1</span>;</span><br><span class="line">    EA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay300ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">j = <span class="number">26</span>;</span><br><span class="line">k = <span class="number">223</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Delay300ms();</span><br><span class="line">    time1init();</span><br><span class="line">    jd =<span class="number">1</span> ; </span><br><span class="line">    sg90_con = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        jd = <span class="number">4</span> ;</span><br><span class="line">        cnt = <span class="number">0</span> ;  </span><br><span class="line">        Delay2000ms();</span><br><span class="line">        jd = <span class="number">1</span> ; </span><br><span class="line">        cnt = <span class="number">0</span> ; </span><br><span class="line">        Delay2000ms();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">time0Handler</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    cnt++;      <span class="comment">// 计数自加</span></span><br><span class="line">    TL0 = <span class="number">0x33</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFE</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; jd )</span><br><span class="line">    &#123;</span><br><span class="line">        sg90_con = <span class="number">1</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sg90_con = <span class="number">0</span> ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">40</span>)</span><br><span class="line">    &#123; <span class="comment">// 计数40次 等于 5ms乘以50 等于0.20秒</span></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">      sg90_con =<span class="number">1</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超声波测距"><a href="#超声波测距" class="headerlink" title="超声波测距"></a>超声波测距</h2><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a><strong>简介</strong></h4><p>型号：HC-SR04</p><p>接线参考：模块除了两个电源引脚外，还有TRIG，ECHO引脚，这两个引脚分别接我们开发板的P1.5和</p><p>P1.6端</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206291811453.png" alt="image-20220629181110841"></p><blockquote><p>超声波测距模块是用来测量距离的一种产品，通过发送和收超声波，利用时间差和声音传播速度，</p><p>计算出模块到前方障碍物的距离。</p></blockquote><ul><li>怎么让它发送波</li></ul><p>​Trig ，给Trig端口至少10us的高电平</p><ul><li>怎么知道它开始发了</li></ul><p>​Echo信号，由低电平跳转到高电平，表示开始发送波</p><ul><li>怎么知道接收了返回波</li></ul><p>​Echo，由高电平跳转回低电平，表示波回来了</p><ul><li>怎么算时间</li></ul><p>​Echo引脚维持高电平的时间！</p><p>​波发出去的那一下，开始启动定时器</p><p>​波回来的拿一下，我们开始停止定时器，计算出中间经过多少时间</p><ul><li>怎么算距离</li></ul><p>​距离 &#x3D; 速度 （340m&#x2F;s）* 时间&#x2F;2</p><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206292126619.png" alt="image-20220629181318917"></p><p>​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//距离小于10cm,D5亮，D6灭，反之相反现象</span></span><br><span class="line"></span><br><span class="line">sbit D5 = P3^<span class="number">7</span>;<span class="comment">//根据原理图（电路图），设备变量led1指向P3组IO口的第7口</span></span><br><span class="line">sbit D6 = P3^<span class="number">6</span>;<span class="comment">//根据原理图（电路图），设备变量led2指向P3组IO口的第6口</span></span><br><span class="line">sbit Trig = P1^<span class="number">5</span>;</span><br><span class="line">sbit Echo = P1^<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay10us</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;</span><br><span class="line">TH0 = <span class="number">0</span>;</span><br><span class="line">TL0 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//设置定时器0工作模式1，初始值设定0开始数数，不着急启动定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十进制2左移1位，变成20。相当于乘以10</span></span><br><span class="line"><span class="comment">二禁止1左移1位，变成10（2）。相当于乘以2，左移8位，乘以2的8次方=256；*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">startHC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Trig = <span class="number">0</span>;</span><br><span class="line">Trig = <span class="number">1</span>;</span><br><span class="line">Delay10us();</span><br><span class="line">Trig = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> time;</span><br><span class="line"><span class="type">double</span> dis;</span><br><span class="line"></span><br><span class="line">Time0Init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//1. Trig ，给Trig端口至少10us的高电平</span></span><br><span class="line">startHC();</span><br><span class="line"><span class="comment">//2. echo由低电平跳转到高电平，表示开始发送波</span></span><br><span class="line"><span class="keyword">while</span>(Echo == <span class="number">0</span>);</span><br><span class="line"><span class="comment">//波发出去的那一下，开始启动定时器</span></span><br><span class="line">TR0 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//3. 由高电平跳转回低电平，表示波回来了</span></span><br><span class="line"><span class="keyword">while</span>(Echo == <span class="number">1</span>);</span><br><span class="line"><span class="comment">//波回来的那一下，我们开始停止定时器</span></span><br><span class="line">TR0 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//4. 计算出中间经过多少时间</span></span><br><span class="line">time = (TH0 * <span class="number">256</span> + TL0)*<span class="number">1.085</span>;<span class="comment">//us为单位</span></span><br><span class="line"><span class="comment">//5. 距离 = 速度 （340m/s）* 时间/2</span></span><br><span class="line">dis = time * <span class="number">0.017</span>;</span><br><span class="line"><span class="keyword">if</span>(dis &lt; <span class="number">10</span>)&#123;</span><br><span class="line">D5 = <span class="number">0</span>;</span><br><span class="line">D6 = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">D5 = <span class="number">1</span>;</span><br><span class="line">D6 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时器数据清零，以便下一次测距</span></span><br><span class="line">TH0 = <span class="number">0</span>;</span><br><span class="line">TL0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> PWM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记二</title>
      <link href="/posts/36972.html"/>
      <url>/posts/36972.html</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><blockquote><p>C51中的定时器和计数器是同一个硬件电路支持的，通过寄存器配置不同，就可以将他当做定时器或者计数器使用。</p><p>确切的说，定时器和计数器区别是致使他们背后的计数存储器加1的信号不同。当配置为定时器使用时，每经过1个机器周期，计数存储器的值就加1。而当配置为计数器时，每来一个负跳变信号(信号从P3.4 或者P3.5引脚输入)，就加1，以此达到计数的目的。</p><p>标准C51有2个定时器&#x2F;计数器：T0和T1。他们的使用方法一致。C52相比C51多了一个T2</p></blockquote><ul><li><p>定时器和计数器，电路一样</p></li><li><p>定时或者计数的本质就是让单片机某个部件数数</p></li><li><p>当定时器用的时候，靠内部震荡电路数数</p></li><li><p>当计数器用的时候，数外面的信号，读取针脚的数据</p></li></ul><h3 id="定时器怎么定时"><a href="#定时器怎么定时" class="headerlink" title="定时器怎么定时"></a>定时器怎么定时</h3><p>定时器的本质原理： 每经过一个机器周期，就加1 :寄存器</p><p>思考：</p><ul><li><h4 id="什么是晶振"><a href="#什么是晶振" class="headerlink" title="什么是晶振"></a>什么是晶振</h4></li></ul><blockquote><p>晶振(晶体震荡器)，又称数字电路的“心脏”，是各种电子产品里面必不可少的频率元器件。数字电路的所有工作都离不开时钟，晶振的好坏、晶振电路设计的好坏，会影响到整个系统的稳定性。</p></blockquote><ul><li><h4 id="什么是时钟周期"><a href="#什么是时钟周期" class="headerlink" title="什么是时钟周期"></a>什么是时钟周期</h4></li></ul><blockquote><p>时钟周期也称为<a href="https://baike.baidu.com/item/%E6%8C%AF%E8%8D%A1%E5%91%A8%E6%9C%9F/10063375">振荡周期</a>，定义为<a href="https://baike.baidu.com/item/%E6%97%B6%E9%92%9F%E9%A2%91%E7%8E%87/103708">时钟频率</a>的<a href="https://baike.baidu.com/item/%E5%80%92%E6%95%B0/4793">倒数</a>。时钟周期是计算机中最基本的、最小的<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D/3078999">时间单位</a>。在一个时钟周期内，CPU仅完成一个最基本的动作。时钟周期是一个时间的量。更小的时钟周期就意味着更高的工作频率</p></blockquote><ul><li><h4 id="什么是机器周期"><a href="#什么是机器周期" class="headerlink" title="什么是机器周期"></a>什么是机器周期</h4></li></ul><blockquote><p>机器周期也称为CPU周期。在计算机中，为了便于管理，常把一条指令的执行过程划分为若干个阶段（如取指、译码、执行等），每一阶段完成一个基本操作。完成一个基本操作所需要的时间称为机器周期。一般情况下，一个机器周期由若干个时钟周期组成</p></blockquote><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282003556.png" alt="image-20220628200312346"></p><ul><li><h4 id="加1经过了多少时间"><a href="#加1经过了多少时间" class="headerlink" title="加1经过了多少时间"></a>加1经过了多少时间</h4></li></ul><p>当晶振频率是11.0592MHz的时候，等于11059.2KHz &#x3D; 11059200Hz</p><p>机器周期 &#x3D; 12 x 时钟周期 &#x3D;12 x  (1&#x2F;时钟频率)  秒 &#x3D; 12 &#x2F; 时钟频率 秒 &#x3D; 12 &#x2F; 11059200 秒 &#x3D; 12 000 000 &#x2F; 11059200  微秒 &#x3D; 1.085 微秒</p><h3 id="计时器编程"><a href="#计时器编程" class="headerlink" title="计时器编程"></a>计时器编程</h3><p>相关寄存器：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282034622.png" alt="image-20220628202445758"></p><ul><li><p>在哪里加1，最大计数时间，也就是爆表了能计算多长</p></li><li><p>在TH0&#x2F;1和TL0&#x2F;1寄存器中加1，默认是从0开始数数，最多能数65536下，累计计时71ms如何算出10ms定时器的初值</p><p> 就不让他从0开始数数，10ms需要数9216下，你让他从65536-9126&#x3D;56320（16进制表示为0xDC00）开始数数</p></li></ul><p>​这样TL0&#x3D;0x00；TH0&#x3D;0xDC</p><p>关于TCON</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206282034623.png" alt="image-20220628202453306"></p><ul><li><p>怎么知道爆表</p><p>TCON寄存器的bit5（TF0）能表示爆表：当爆表的时候，硬件会修改bit5(TF0)位上面的数据，改成1（置1），如果不用中断，我们代码清零</p></li></ul><ul><li><p>怎么开始计时</p><p>TCON寄存器的bit4，通过编程让这个位为1的时候，开始计时，相当于按下了闹钟</p></li></ul><ul><li><p>定时器使用是有很多种模式的</p><p>定时器模式寄存器：TMOD来选择定时器模式，选择工作方式1，TMOD的bit0 bit1配置成0 1 ：16</p><p>的定时器功能</p></li><li><p>四个二进制数表示一位的16进制数</p></li><li><p>8421法进制的转换（方便人类来看，对计算机底层来说，不关心进制010101010）</p></li><li><p>配寄存器推荐用按位操作，清零的时候，对应的需要清零的位与上0，不需要清零的位与上1 </p></li><li><p>置1的时候，需要置1的位置或1，不需要置一的位置或0</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;REG52.H&quot;</span></span></span><br><span class="line">sbit led = P3^<span class="number">7</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span> ; <span class="comment">//计数变量</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>; <span class="comment">// 模式配置 16 </span></span><br><span class="line">    TL0 = <span class="number">0x00</span>;  <span class="comment">// 初始值设置 10ms</span></span><br><span class="line">    TH0 = <span class="number">0xDC</span>; </span><br><span class="line">    TR0 = <span class="number">1</span> ;  <span class="comment">// 开始计时 </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (TF0 == <span class="number">1</span> ) <span class="comment">// 10ms 计数一次</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++ ;  <span class="comment">// 计数自加</span></span><br><span class="line">            TF0 = <span class="number">0</span>; <span class="comment">// 手动归零</span></span><br><span class="line">            TL0 = <span class="number">0x00</span>; <span class="comment">// 初始值复位</span></span><br><span class="line">            TH0 = <span class="number">0xDC</span>; </span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">50</span>)&#123; <span class="comment">// 计数50次 等于 10ms乘以50 等于 0.5秒</span></span><br><span class="line">                cnt = <span class="number">0</span> ; </span><br><span class="line">                led = !led ; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器中断方式控制"><a href="#定时器中断方式控制" class="headerlink" title="定时器中断方式控制"></a><strong>定时器中断方式控制</strong></h3><ul><li>中断寄存器</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705224922316.png" alt="image-20220705224922316"></p><p>CPU能响应定时器0中断的条件：需要配置IE寄存器的bit1: ET0  bit7:EA</p><ol><li>ET0中断允许要置一   ET0 &#x3D; 1</li><li>EA总中断要置一         EA &#x3D; 1</li></ol><p>硬件内部设计逻辑如下图：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/img/image-20220705224935060.png" alt="image-20220705224935060"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************* *********定时器中断控制LED每隔1秒亮灭一次******************** *****main中控制另外一个灯每个300ms亮灭一次，有点多线程的意思了*** </span></span><br><span class="line"><span class="comment">*******************************************************/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line">sbit led = P3^<span class="number">6</span>; </span><br><span class="line">sbit led1 = P3^<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="comment">//1. 配置定时器0工作模式位16位计时 </span></span><br><span class="line">    TMOD = <span class="number">0x01</span>; </span><br><span class="line">    <span class="comment">//2. 给初值，定一个10ms出来 </span></span><br><span class="line">    TL0=<span class="number">0x00</span>; </span><br><span class="line">    TH0=<span class="number">0xDC</span>; </span><br><span class="line">    <span class="comment">//3. 开始计时，定时器&quot;数数&quot; </span></span><br><span class="line">    TR0 = <span class="number">1</span>; </span><br><span class="line">    TF0 = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">//4. 打开定时器0中断 </span></span><br><span class="line">    ET0 = <span class="number">1</span>; </span><br><span class="line">    <span class="comment">//5. 打开总中断EA </span></span><br><span class="line">    EA = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay300ms</span><span class="params">()</span> <span class="comment">//@11.0592MHz 软件延时，CPU“数数” </span></span><br><span class="line">&#123; <span class="type">unsigned</span> <span class="type">char</span> i, j, k; </span><br><span class="line"> i = <span class="number">3</span>; </span><br><span class="line"> j = <span class="number">26</span>; </span><br><span class="line"> k = <span class="number">223</span>; </span><br><span class="line"> <span class="keyword">do</span>&#123; </span><br><span class="line">     <span class="keyword">do</span>&#123; </span><br><span class="line">         <span class="keyword">while</span> (--k); </span><br><span class="line">     &#125; <span class="keyword">while</span> (--j); </span><br><span class="line"> &#125; <span class="keyword">while</span> (--i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line">    led = <span class="number">1</span>; </span><br><span class="line">    Time0Init(); </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123; </span><br><span class="line">        led1 = <span class="number">0</span>; </span><br><span class="line">        Delay300ms(); </span><br><span class="line">        led1 = <span class="number">1</span>;</span><br><span class="line">        Delay300ms(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Handler</span><span class="params">()</span> interrupt 1 &#123; </span><br><span class="line">    cnt++; <span class="comment">//统计爆表的次数 </span></span><br><span class="line">    <span class="comment">//重新给初值 </span></span><br><span class="line">    TL0=<span class="number">0x00</span>; </span><br><span class="line">    TH0=<span class="number">0xDC</span>; </span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">100</span>)&#123;<span class="comment">//爆表100次，经过了1s </span></span><br><span class="line">        cnt = <span class="number">0</span>; <span class="comment">//当100次表示1s，重新让cnt从0开始，计算下一次的1s </span></span><br><span class="line">        led = !led;<span class="comment">//每经过1s，翻转led的状态 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C51单片机学习笔记一</title>
      <link href="/posts/62829.html"/>
      <url>/posts/62829.html</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机学习笔记"><a href="#51单片机学习笔记" class="headerlink" title="51单片机学习笔记"></a>51单片机学习笔记</h1><h2 id="1-1开发环境搭建与单片机相关知识扫盲"><a href="#1-1开发环境搭建与单片机相关知识扫盲" class="headerlink" title="1.1开发环境搭建与单片机相关知识扫盲"></a>1.1开发环境搭建与单片机相关知识扫盲</h2><h3 id="什么是单片机"><a href="#什么是单片机" class="headerlink" title="什么是单片机"></a>什么是单片机</h3><ul><li>什么是单片机</li></ul><blockquote><p>单片机（Single-Chip Microcomputer）是一种<a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E8%8A%AF%E7%89%87/4872662">集成电路芯片</a>，</p><p>把具有数据处理能力的<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/284033">中央处理器</a>CPU、随机存储器<a href="https://baike.baidu.com/item/RAM/144481">RAM</a>、<a href="https://baike.baidu.com/item/%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8/2399075">只读存储器</a>ROM、</p><p>多种I&#x2F;O口和中断系统、定时器&#x2F;计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、<a href="https://baike.baidu.com/item/A%2FD%E8%BD%AC%E6%8D%A2%E5%99%A8/4883848">A&#x2F;D转换器</a>等电路）</p><p>集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。</p></blockquote><ul><li>什么是单片机开发板</li></ul><blockquote><p>基于单片机设计一些外接电路，模块以满足学习，日常调研等工作需求</p><p>STC89系列单片机</p><p>命名规则，封装LQFP44, 特性 定时器，计数器，串口，看门狗，IO</p></blockquote><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>keil</li></ul><blockquote><p>Keil C51是美国Keil Software公司出品的51系列兼容<a href="https://baike.baidu.com/item/%E5%8D%95%E7%89%87%E6%9C%BA/102396">单片机</a>C语言软件开发系统，与<a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96/627224">汇编</a>相比，<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80/105958">C语言</a>在功能上、结构性、可读性、可维护性上有明显的优势，因而易学易用。</p></blockquote><ul><li>安装省略</li><li>使用<ol><li>创建项目工程文件夹，可以当作模板Template</li><li>创建文件，取名main.c   <em><strong>（要打开拓展名，在文件夹窗口上找 “查看”，勾选“文件拓展名”）</strong></em></li><li>进入keil主页面，工具栏project-&gt;new uVision project-&gt;选择第一步的工程文件夹位置-&gt;输入工程名字-&gt;选择芯片类型AT89c52-&gt;会提示是否拷贝STARTUP.A51,选择是-&gt;生成了工程目录-&gt;在工程目录Source Group1上右键鼠标-&gt;add Exiting file to Source Group1…-&gt;选择代码文件main.c</li></ol></li></ul><h3 id="如何将代码放入单片机"><a href="#如何将代码放入单片机" class="headerlink" title="如何将代码放入单片机"></a>如何将代码放入单片机</h3><blockquote><p>STC-ISP 是一款<a href="https://baike.baidu.com/item/%E5%8D%95%E7%89%87%E6%9C%BA/102396">单片机</a>下载编程<a href="https://baike.baidu.com/item/%E7%83%A7%E5%BD%95/7116522">烧录</a>软件，是针对<a href="https://baike.baidu.com/item/STC">STC</a>系列单片机而设计的，可下载STC89系列、12C2052系列和12C5410等系列的STC单片机，使用简便。</p></blockquote><ul><li>单片机通过type-C数据线和电脑连接（如果不识别，安装ch340驱动，在资料包中）</li><li>选择单片机型号STC89C52RC</li><li>选择生成的执行程序文件template.hex</li><li>点击”下载&#x2F;编程“按钮</li><li>单片机开关拨动重新上电</li><li>自动检测并下载了程序</li></ul><h2 id="1-2基本IO控制"><a href="#1-2基本IO控制" class="headerlink" title="1.2基本IO控制"></a>1.2基本IO控制</h2><p>以下是我使用的单片机开发板的电路图 </p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206281755289.png" alt="image-20220628175536031"></p><table><thead><tr><th>IO组</th><th>0针脚</th><th>1针脚</th><th>2针脚</th><th>3针脚</th><th>4针脚</th><th>5针脚</th><th>6针脚</th><th>7针脚</th><th>数值</th><th>输入&#x2F;输出</th><th>复用</th></tr></thead><tbody><tr><td>P0</td><td>P0^0</td><td>P0^1</td><td>P0^2</td><td>P0^3</td><td>P0^4</td><td>P0^5</td><td>P0^6</td><td>P0^7</td><td>0-低电平 1-高电平</td><td>给变量赋值，就是输出 被赋值，就是输入</td><td></td></tr><tr><td>P1</td><td>P1^1</td><td>P1^1</td><td>P1^2</td><td>P1^3</td><td>P1^4</td><td>P1^5</td><td>P1^6</td><td>P1^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P2</td><td>P2^0</td><td>P2^1</td><td>P2^2</td><td>P2^3</td><td>P2^4</td><td>P2^5</td><td>P2^6</td><td>P2^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P3</td><td>P3^0</td><td>P3^1</td><td>P3^2</td><td>P3^3</td><td>P3^4</td><td>P3^5</td><td>P3^6</td><td>P3^7</td><td>同上</td><td>同上</td><td></td></tr><tr><td>P4</td><td>P4^0</td><td>P4^1</td><td>P4^2</td><td>P4^3</td><td>P4^4</td><td>P4^5</td><td>P4^6</td><td>无</td><td>同上</td><td>同上</td><td></td></tr></tbody></table><p>对于单片机来讲的，IO口的 输入（把外面东西拿回来）&#x2F;输出（给东西给外面）</p><p>89C52比较简单粗暴，关于引脚输入还是输出的功能不需要配置</p><p>比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sbit IFfire = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> io_data;</span><br><span class="line"><span class="comment">//什么情况叫做输入</span></span><br><span class="line">io_data = IFfire; <span class="comment">// 给变量赋值，就是输入  —— 或者理解为，这个针脚有数据啦，拿个变量来保存</span></span><br><span class="line">    <span class="keyword">if</span>(io_data == <span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//什么情况叫做输出</span></span><br><span class="line">IFfire = <span class="number">1</span>; <span class="comment">// 被给予一个数值，引起IO口电压变化(一般1输出高电平，0输出低电平)，此时为输出，来影响外接的电路</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="按键控制灯"><a href="#按键控制灯" class="headerlink" title="按键控制灯"></a>按键控制灯</h3><p>原理：按键和灯不是我们传统理解的思维，传统按键和灯是在同一个电路中的。而我们单片机编程按键和灯是分开的两个电路，通过单片机作为媒介来处理数据，通过逻辑来实现按键控制灯</p><h3 id="查询法按键控制灯"><a href="#查询法按键控制灯" class="headerlink" title="查询法按键控制灯"></a>查询法按键控制灯</h3><ul><li><p>怎么知道sw1按键被按下</p><p>KEY1位置和GND接通，表现为低电平，值为0</p></li><li><p>怎么知道sw1按键没有被按下<br>KEY1位置通过上拉电阻到5V，表现为高电平，值为1</p></li><li><p>按键控制灯</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sbit key1   = P2^<span class="number">1</span>;</span><br><span class="line">sbit ledOne = P3^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//注意：用“==”两个等于号表示判断，新手容易犯错</span></span><br><span class="line">        <span class="keyword">if</span>(key1 == <span class="number">0</span>)&#123; <span class="comment">//KEY1位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">            <span class="comment">//灯亮，给一个P3.7低电平</span></span><br><span class="line">            ledOne = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按键控制灯，SW1开，SW2关，案例中只在SW1添加软件消抖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit key1   = P2^<span class="number">1</span>;</span><br><span class="line">sbit key2   = P2^<span class="number">0</span>;</span><br><span class="line">sbit ledOne = P3^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay50ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">j = <span class="number">26</span>;</span><br><span class="line">k = <span class="number">223</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查询法检测，是否被按下</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(key1 == <span class="number">0</span>)<span class="comment">//KEY1位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//感觉被按下，不知道是抖动还是人为，延迟50ms再判断一次</span></span><br><span class="line"><span class="comment">//软件消除抖动</span></span><br><span class="line">Delay50ms();</span><br><span class="line"><span class="keyword">if</span>(key1 == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//灯亮，给一个P3.7低电平</span></span><br><span class="line">ledOne = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(key2 == <span class="number">0</span>)&#123;<span class="comment">//KEY2位置和GND接通，表现为低电平，值为0</span></span><br><span class="line">ledOne = <span class="number">1</span>;<span class="comment">//灭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓基础-布局</title>
      <link href="/posts/31556.html"/>
      <url>/posts/31556.html</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="安卓布局"><a href="#安卓布局" class="headerlink" title="安卓布局"></a>安卓布局</h1><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局 "></a>线性布局 <strong><LinearLayout></LinearLayout></strong></h2><blockquote><p>LinearLayout里面可以放置<em><strong>多个</strong></em>view（这里称为子view，子项）。 </p></blockquote><blockquote><p>子view可以是TextView，Button，或者是LinearLayout，RelativeLayout等等。 </p></blockquote><blockquote><p>它们将会按顺序依次排布为一列或一行。 接下来介绍一些在xml中的设置。</p></blockquote><blockquote><p>先在xml中放一个LinearLayout。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout </span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span> </span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">android:orientation=<span class="string">&quot;vertical&quot;</span>&gt; </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="竖直排布与水平排布"><a href="#竖直排布与水平排布" class="headerlink" title="竖直排布与水平排布"></a>竖直排布与水平排布</h4><blockquote><p>通过设置orientation来确定水平或竖直排布子view。 可选值有vertical和horizontal</p></blockquote><h5 id="竖直排布"><a href="#竖直排布" class="headerlink" title="竖直排布"></a>竖直排布</h5><p>设置orientation为vertical。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:orientation=<span class="string">&quot;vertical&quot;</span></span><br></pre></td></tr></table></figure><h5 id="水平排布"><a href="#水平排布" class="headerlink" title="水平排布"></a><strong>水平排布</strong></h5><p>设置orientation为horizontal。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br></pre></td></tr></table></figure><h4 id="排布方式-gravity"><a href="#排布方式-gravity" class="headerlink" title="排布方式 gravity"></a><strong>排布方式</strong> <strong>gravity</strong></h4><blockquote><p>决定子view的排布方式。 gravity 有“重力”的意思，我们引申为子view会向哪个方向靠拢。 gravity</p><p>有几个选项可以选择，我们常用的有start，end，left，right，top，bottom。 </p></blockquote><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout </span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span> </span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">    android:gravity=<span class="string">&quot;start&quot;</span> </span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt; </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>下面是gravity的选项。我们会把LinearLayout叫做“父view”或者“容器”。</p><table><thead><tr><th>常量</th><th>定义值</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>30</td><td>把view推到容器里的顶部。不会改变view的尺寸。</td></tr><tr><td>bottom</td><td>50</td><td>把view推到容器的底部。不会改变view的尺寸。</td></tr><tr><td>center</td><td>11</td><td>子view水平与竖直都居中。不会改变view的尺寸。</td></tr><tr><td>center_horizontal</td><td>1</td><td>子view水平居中。不会改变view的尺寸。</td></tr><tr><td>center_vertical</td><td>10</td><td>子view垂直居中。不会改变view的尺寸。</td></tr><tr><td>start</td><td>800003</td><td>把view推到容器里最开始的地方。不会改变view的尺寸。</td></tr><tr><td>end</td><td>800005</td><td>把子view放到容器的最尾部。不改变view的尺寸。</td></tr><tr><td>left</td><td>3</td><td>子view从容器的左边开始排布。不会改变view的尺寸。</td></tr></tbody></table><p>start和left，end和right并不一定是同样的效果。</p><p>对于RTL（right to left）类型的手机，比如某些阿拉伯文的系统。start是从右到左的。 </p><p>我们日常生活中很少见到RTL，一般都是LTR。但还是建议多用start而不是left。</p><p>gravity可以同时设置多个值，用或符号 | 来连接。比如</p><blockquote><p>android:gravity&#x3D;”end|center_vertical” </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout </span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;end|center_vertical&quot;</span> </span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt; </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206072153803.png" alt="image-20220607214935550"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206072153804.png" alt="image-20220607214940327"></p><h4 id="子-view-的-layout-gravity"><a href="#子-view-的-layout-gravity" class="headerlink" title="子 view 的 layout_gravity"></a><strong>子 view 的 layout_gravity</strong></h4><p>layout_gravity看起来和gravity有些相似。</p><ul><li><p>android:gravity 控制自己内部的子元素。</p></li><li><p>android:layout_gravity 是告诉父元素自己的位置。</p></li></ul><p>取值范围和gravity是一样的。代表的含义也相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout </span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;100dp&quot;</span> </span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line">     &lt;TextView</span><br><span class="line">android:layout_width=<span class="string">&quot;wrap_content&quot;</span>            android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">        android:background=<span class="string">&quot;#90CAF9&quot;</span> </span><br><span class="line">        android:text=<span class="string">&quot;none&quot;</span> /&gt;</span><br><span class="line">      &lt;TextView</span><br><span class="line">android:layout_width=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center&quot;</span> </span><br><span class="line">        android:background=<span class="string">&quot;#9FA8DA&quot;</span> </span><br><span class="line">        android:text=<span class="string">&quot;center&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206072153805.png" alt="image-20220607215325445"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206072153806.png" alt="image-20220607215328843"></p><h4 id="分割占比-layout-weigh"><a href="#分割占比-layout-weigh" class="headerlink" title="分割占比 layout_weigh"></a><strong>分割占比 layout_weigh</strong></h4><p>可以在设置子view的layout_weight，来确定空间占比。 设置layout_weight 的时候，一般要设置</p><blockquote><p>layout_width&#x3D;”0dp” </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">android:background=<span class="string">&quot;#FFCC80&quot;</span></span><br><span class="line">android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#eaeaea&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_weight=<span class="string">&quot;2&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;2&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_weight=<span class="string">&quot;1&quot;</span> </span><br><span class="line">    android:background=<span class="string">&quot;#eaeaea&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span> </span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">    android:layout_weight=<span class="string">&quot;3&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#BEC0D1&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;3&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206072200104.png" alt="image-20220607220027225"></p><h4 id="分割占比之和-weightSum"><a href="#分割占比之和-weightSum" class="headerlink" title="分割占比之和 weightSum"></a><strong>分割占比之和 weightSum</strong></h4><blockquote><p>android:weightSum&#x3D; xxx</p></blockquote><p>定义子view的weight之和的最大值。如果不直接指定，它会是所有子view的layout_weight 之和。 如果想给单独的一个子view一半的空间占比，可以设置子view的layout_weight 为0.5，并且设置LinearLayout的weightSum为1.0。</p><p>取值可以是浮点数，比如 9.3 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span> </span><br><span class="line">android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">android:layout_marginTop=<span class="string">&quot;10dp&quot;</span> </span><br><span class="line">android:background=<span class="string">&quot;#4DB6AC&quot;</span> </span><br><span class="line">android:weightSum=<span class="string">&quot;9.3&quot;</span> </span><br><span class="line">android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span> </span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">    android:layout_weight=<span class="string">&quot;4.6&quot;</span> </span><br><span class="line">    android:background=<span class="string">&quot;#eaeaea&quot;</span> </span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;4.6&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span> </span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> </span><br><span class="line">    android:background=<span class="string">&quot;#7986CB&quot;</span> </span><br><span class="line">    android:layout_weight=<span class="string">&quot;2.5&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;2.5&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局 "></a>相对布局 <strong><RelativeLayout></RelativeLayout></strong></h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>RelativeLayout和LinearLayout类似，都是ViewGroup，能“容纳”多个子view。 </p><p>RelativeLayout 是一个以相对位置显示子视图的视图组。</p><p>每个视图的位置可以指定为相对于同级元素的位置（例如，在另一个视图的左侧或下方）或相对于父RelativeLayout区域的位置（例如在底部、左侧或中心对齐）。子view可以是TextView，Button，或者是LinearLayout，RelativeLayout等等。 如果不添加其他配置，它们默认是在RelativeLayout的左上角。 在RelativeLayout中，子View可以根据另一个子View来确定位置。 但必须注意的是，RelativeLayout和它的子View不能互相依赖。比如RelativeLayout设置wrap_content，子View设置了ALIGN_PARENT_BOTTOM，这样你会发现RelativeLayout被撑到最大。RelativeLayout能消除嵌套视图组并使布局层次结构保持扁平化。接下来介绍一些在xml中的设置。</p><h3 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a><strong>属性介绍</strong></h3><p>RelativeLayout 可以指定子视图相对于父视图或彼此（由 ID 确定）的位置。</p><p>因此，您可以按照右边框对齐两个元素，或者使它们一上一下，屏幕居中，左侧居中，等等。默认情况下，所有子视图均绘制在布局的左上角，因此您必须使用 RelativeLayout.LayoutParams 中提供的各种布局属性定义每个视图的位置。</p><p>有很多布局属性可用于 RelativeLayout 中的视图，部分示例包括：</p><ul><li><p>android:layout_alignParentTop<br>* 如果为 “true”，会将此视图的上边缘与父视图的上边缘对齐。</p></li><li><p>android:layout_centerVertical</p></li><li><p>如果为 “true”，会将此子级在父级内垂直居中。</p></li><li><p>android:layout_below</p><ul><li>将此视图的上边缘放置在使用资源 ID 指定的视图下方。</li></ul></li><li><p>android:layout_toRightOf</p><ul><li>将此视图的左边缘放置在使用资源 ID 指定的视图右侧。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout </span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span> </span><br><span class="line">android:layout_height=<span class="string">&quot;100dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;default&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span> </span><br><span class="line">    android:layout_alignParentEnd=<span class="string">&quot;true&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;layout_alignParentEnd&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span> </span><br><span class="line">    android:layout_centerInParent=<span class="string">&quot;true&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;layout_centerInParent&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span> </span><br><span class="line">    android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;layout_alignParentBottom&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span> </span><br><span class="line">    android:layout_alignParentEnd=<span class="string">&quot;true&quot;</span> </span><br><span class="line">    android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span> </span><br><span class="line">    android:text=<span class="string">&quot;layout_alignParentBottom | End&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206081749511.png" alt="image-20220608172142505"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">android:layout_marginTop=<span class="string">&quot;120dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/tv1&quot;</span></span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;R&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/tv2&quot;</span></span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span></span><br><span class="line">    android:layout_below=<span class="string">&quot;@id/tv1&quot;</span></span><br><span class="line">    android:layout_toEndOf=<span class="string">&quot;@id/tv1&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;u&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/tv3&quot;</span></span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span></span><br><span class="line">    android:layout_below=<span class="string">&quot;@id/tv2&quot;</span></span><br><span class="line">    android:layout_toEndOf=<span class="string">&quot;@id/tv2&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;s&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/tv4&quot;</span></span><br><span class="line">    style=<span class="string">&quot;@style/RelativeLayoutDemo1Item&quot;</span></span><br><span class="line">    android:layout_below=<span class="string">&quot;@id/tv3&quot;</span></span><br><span class="line">    android:layout_toEndOf=<span class="string">&quot;@id/tv3&quot;</span></span><br><span class="line">    android:text=<span class="string">&quot;t&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206081749513.png" alt="image-20220608172411613" style="zoom:150%;"><blockquote><p>所有布局属性详见 <a href="https://developer.android.google.cn/reference/android/view/View.MeasureSpec.html">View.MeasureSpec  | Android Developers (google.cn)</a></p></blockquote><h2 id="这里只介绍了其中的两个布局"><a href="#这里只介绍了其中的两个布局" class="headerlink" title="这里只介绍了其中的两个布局"></a>这里只介绍了其中的两个布局</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象进阶</title>
      <link href="/posts/60663.html"/>
      <url>/posts/60663.html</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><p>在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;_gender&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">22</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person._gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span></span><br><span class="line">    <span class="comment"># person._is_gay = True</span></span><br></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">a, b, c</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        <span class="built_in">print</span>(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        <span class="built_in">print</span>(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法构成三角形.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">now</span>(<span class="params">cls</span>):</span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>我们可以使用一种叫做<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读<a href="https://e.jd.com/30392949.html">《UML面向对象设计基础》</a>一书。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020030970.png"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020031440.png"></p><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;人&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_av</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看爱情动作片.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, grade</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self, grade</span>):</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, title</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self, title</span>):</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s%s正在讲%s.&#x27;</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;初三&#x27;</span>)</span><br><span class="line">    stu.study(<span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;菜鸟&#x27;</span>)</span><br><span class="line">    t.teach(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nickname</span>):</span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pets = [Dog(<span class="string">&#x27;旺财&#x27;</span>), Cat(<span class="string">&#x27;凯蒂&#x27;</span>), Dog(<span class="string">&#x27;大黄&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：奥特曼打小怪兽。"><a href="#案例1：奥特曼打小怪兽。" class="headerlink" title="案例1：奥特曼打小怪兽。"></a>案例1：奥特曼打小怪兽。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fighter</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;战斗者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过__slots__魔法限定对象可以绑定的成员变量</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, hp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 名字</span></span><br><span class="line"><span class="string">        :param hp: 生命值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._hp = hp</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._hp</span><br><span class="line"></span><br><span class="line"><span class="meta">    @hp.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hp</span>(<span class="params">self, hp</span>):</span><br><span class="line">        self._hp = hp <span class="keyword">if</span> hp &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">alive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._hp &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param other: 被攻击的对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ultraman</span>(<span class="title class_ inherited__">Fighter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;奥特曼&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>, <span class="string">&#x27;_mp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, hp, mp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 名字</span></span><br><span class="line"><span class="string">        :param hp: 生命值</span></span><br><span class="line"><span class="string">        :param mp: 魔法值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, hp)</span><br><span class="line">        self._mp = mp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        other.hp -= randint(<span class="number">15</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">huge_attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param other: 被攻击的对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 使用成功返回True否则返回False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._mp &gt;= <span class="number">50</span>:</span><br><span class="line">            self._mp -= <span class="number">50</span></span><br><span class="line">            injury = other.hp * <span class="number">3</span> // <span class="number">4</span></span><br><span class="line">            injury = injury <span class="keyword">if</span> injury &gt;= <span class="number">50</span> <span class="keyword">else</span> <span class="number">50</span></span><br><span class="line">            other.hp -= injury</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.attack(other)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magic_attack</span>(<span class="params">self, others</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;魔法攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param others: 被攻击的群体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 使用魔法成功返回True否则返回False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._mp &gt;= <span class="number">20</span>:</span><br><span class="line">            self._mp -= <span class="number">20</span></span><br><span class="line">            <span class="keyword">for</span> temp <span class="keyword">in</span> others:</span><br><span class="line">                <span class="keyword">if</span> temp.alive:</span><br><span class="line">                    temp.hp -= randint(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;</span></span><br><span class="line">        incr_point = randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        self._mp += incr_point</span><br><span class="line">        <span class="keyword">return</span> incr_point</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;~~~%s奥特曼~~~\n&#x27;</span> % self._name + \</span><br><span class="line">            <span class="string">&#x27;生命值: %d\n&#x27;</span> % self._hp + \</span><br><span class="line">            <span class="string">&#x27;魔法值: %d\n&#x27;</span> % self._mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span>(<span class="title class_ inherited__">Fighter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;小怪兽&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_hp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self, other</span>):</span><br><span class="line">        other.hp -= randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;~~~%s小怪兽~~~\n&#x27;</span> % self._name + \</span><br><span class="line">            <span class="string">&#x27;生命值: %d\n&#x27;</span> % self._hp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_any_alive</span>(<span class="params">monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> monster <span class="keyword">in</span> monsters:</span><br><span class="line">        <span class="keyword">if</span> monster.alive &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_alive_one</span>(<span class="params">monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;</span></span><br><span class="line">    monsters_len = <span class="built_in">len</span>(monsters)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        index = randrange(monsters_len)</span><br><span class="line">        monster = monsters[index]</span><br><span class="line">        <span class="keyword">if</span> monster.alive &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> monster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_info</span>(<span class="params">ultraman, monsters</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(ultraman)</span><br><span class="line">    <span class="keyword">for</span> monster <span class="keyword">in</span> monsters:</span><br><span class="line">        <span class="built_in">print</span>(monster, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    u = Ultraman(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">1000</span>, <span class="number">120</span>)</span><br><span class="line">    m1 = Monster(<span class="string">&#x27;狄仁杰&#x27;</span>, <span class="number">250</span>)</span><br><span class="line">    m2 = Monster(<span class="string">&#x27;白元芳&#x27;</span>, <span class="number">500</span>)</span><br><span class="line">    m3 = Monster(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">750</span>)</span><br><span class="line">    ms = [m1, m2, m3]</span><br><span class="line">    fight_round = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> u.alive <span class="keyword">and</span> is_any_alive(ms):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;========第%02d回合========&#x27;</span> % fight_round)</span><br><span class="line">        m = select_alive_one(ms)  <span class="comment"># 选中一只小怪兽</span></span><br><span class="line">        skill = randint(<span class="number">1</span>, <span class="number">10</span>)   <span class="comment"># 通过随机数选择使用哪种技能</span></span><br><span class="line">        <span class="keyword">if</span> skill &lt;= <span class="number">6</span>:  <span class="comment"># 60%的概率使用普通攻击</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">            u.attack(m)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))</span><br><span class="line">        <span class="keyword">elif</span> skill &lt;= <span class="number">9</span>:  <span class="comment"># 30%的概率使用魔法攻击(可能因魔法值不足而失败)</span></span><br><span class="line">            <span class="keyword">if</span> u.magic_attack(ms):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用了魔法攻击.&#x27;</span> % u.name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用魔法失败.&#x27;</span> % u.name)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)</span></span><br><span class="line">            <span class="keyword">if</span> u.huge_attack(m):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用究极必杀技虐了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))</span><br><span class="line">        <span class="keyword">if</span> m.alive &gt; <span class="number">0</span>:  <span class="comment"># 如果选中的小怪兽没有死就回击奥特曼</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s回击了%s.&#x27;</span> % (m.name, u.name))</span><br><span class="line">            m.attack(u)</span><br><span class="line">        display_info(u, ms)  <span class="comment"># 每个回合结束后显示奥特曼和小怪兽的信息</span></span><br><span class="line">        fight_round += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n========战斗结束!========\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> u.alive &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s奥特曼胜利!&#x27;</span> % u.name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小怪兽胜利!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="案例2：扑克游戏。"><a href="#案例2：扑克游戏。" class="headerlink" title="案例2：扑克游戏。"></a>案例2：扑克游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一张牌&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, suite, face</span>):</span><br><span class="line">        self._suite = suite</span><br><span class="line">        self._face = face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">face</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._face</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">suite</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._suite</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._face == <span class="number">1</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">11</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;J&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">12</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self._face == <span class="number">13</span>:</span><br><span class="line">            face_str = <span class="string">&#x27;K&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            face_str = <span class="built_in">str</span>(self._face)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s%s&#x27;</span> % (self._suite, face_str)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poker</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一副牌&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._cards = [Card(suite, face) </span><br><span class="line">                       <span class="keyword">for</span> suite <span class="keyword">in</span> <span class="string">&#x27;♠♥♣♦&#x27;</span></span><br><span class="line">                       <span class="keyword">for</span> face <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">14</span>)]</span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cards</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._cards</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;</span></span><br><span class="line">        self._current = <span class="number">0</span></span><br><span class="line">        random.shuffle(self._cards)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span></span><br><span class="line">        card = self._cards[self._current]</span><br><span class="line">        self._current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;还有没有牌&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._current &lt; <span class="built_in">len</span>(self._cards)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._cards_on_hand = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cards_on_hand</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._cards_on_hand</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, card</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.append(card)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrange</span>(<span class="params">self, card_key</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;</span></span><br><span class="line">        self._cards_on_hand.sort(key=card_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序规则-先根据花色再根据点数排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">card</span>):</span><br><span class="line">    <span class="keyword">return</span> (card.suite, card.face)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = Poker()</span><br><span class="line">    p.shuffle()</span><br><span class="line">    players = [Player(<span class="string">&#x27;东邪&#x27;</span>), Player(<span class="string">&#x27;西毒&#x27;</span>), Player(<span class="string">&#x27;南帝&#x27;</span>), Player(<span class="string">&#x27;北丐&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">            player.get(p.<span class="built_in">next</span>)</span><br><span class="line">    <span class="keyword">for</span> player <span class="keyword">in</span> players:</span><br><span class="line">        <span class="built_in">print</span>(player.name + <span class="string">&#x27;:&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        player.arrange(get_key)</span><br><span class="line">        <span class="built_in">print</span>(player.cards_on_hand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统。"><a href="#案例3：工资结算系统。" class="headerlink" title="案例3：工资结算系统。"></a>案例3：工资结算系统。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">某公司有三种类型的员工 分别是部门经理、程序员和销售员</span></span><br><span class="line"><span class="string">需要设计一个工资结算系统 根据提供的员工信息来计算月薪</span></span><br><span class="line"><span class="string">部门经理的月薪是每月固定15000元</span></span><br><span class="line"><span class="string">程序员的月薪按本月工作时间计算 每小时150元</span></span><br><span class="line"><span class="string">销售员的月薪是1200元的底薪加上销售额5%的提成</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param name: 姓名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获得月薪</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: 月薪</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15000.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Programmer</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, working_hour=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self._working_hour = working_hour</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">working_hour</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._working_hour</span><br><span class="line"></span><br><span class="line"><span class="meta">    @working_hour.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">working_hour</span>(<span class="params">self, working_hour</span>):</span><br><span class="line">        self._working_hour = working_hour <span class="keyword">if</span> working_hour &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">150.0</span> * self._working_hour</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesman</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sales=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self._sales = sales</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sales</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._sales</span><br><span class="line"></span><br><span class="line"><span class="meta">    @sales.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sales</span>(<span class="params">self, sales</span>):</span><br><span class="line">        self._sales = sales <span class="keyword">if</span> sales &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_salary</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1200.0</span> + self._sales * <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    emps = [</span><br><span class="line">        Manager(<span class="string">&#x27;刘备&#x27;</span>), Programmer(<span class="string">&#x27;诸葛亮&#x27;</span>),</span><br><span class="line">        Manager(<span class="string">&#x27;曹操&#x27;</span>), Salesman(<span class="string">&#x27;荀彧&#x27;</span>),</span><br><span class="line">        Salesman(<span class="string">&#x27;吕布&#x27;</span>), Programmer(<span class="string">&#x27;张辽&#x27;</span>),</span><br><span class="line">        Programmer(<span class="string">&#x27;赵云&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(emp, Programmer):</span><br><span class="line">            emp.working_hour = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入%s本月工作时间: &#x27;</span> % emp.name))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(emp, Salesman):</span><br><span class="line">            emp.sales = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入%s本月销售额: &#x27;</span> % emp.name))</span><br><span class="line">        <span class="comment"># 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s本月工资为: ￥%s元&#x27;</span> %</span><br><span class="line">              (emp.name, emp.get_salary()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象基础</title>
      <link href="/posts/36750.html"/>
      <url>/posts/36750.html</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程基础"><a href="#面向对象编程基础" class="headerlink" title="面向对象编程基础"></a>面向对象编程基础</h2><p>活在当下的程序员应该都听过&quot;面向对象编程&quot;一词，也经常有人问能不能用一句话解释下什么是&quot;面向对象编程&quot;，我们先来看看比较正式的说法。</p><p>&quot;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。&quot;</p><p>这样一说是不是更不明白了。所以我们还是看看更通俗易懂的说法，下面这段内容来自于<a href="https://www.zhihu.com/">知乎</a>。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012303252.png"></p><blockquote><p><strong>说明：</strong> 以上的内容来自于网络，不代表作者本人的观点和看法，与作者本人立场无关，相关责任不由作者承担。</p></blockquote><p>之前我们说过&quot;<strong>程序是指令的集合</strong>&quot;，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，&quot;每个人都应该学习编程&quot;这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA">软件危机</a>&quot;、&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>&quot;等一系列的概念开始在行业中出现。</p><p>当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的&quot;<a href="https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">银弹</a>&quot;，真正让软件开发者看到希望的是上世纪70年代诞生的<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的<a href="https://zh.wikipedia.org/wiki/Simula">Simula</a>语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。</p><blockquote><p><strong>说明：</strong> 当然面向对象也不是解决软件开发中所有问题的最后的“银弹”，所以今天的高级程序设计语言几乎都提供了对多种编程范式的支持，Python也不例外。</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012303253.png"></p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p></blockquote><h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><p>当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;思想品德&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="访问可见性问题"><a href="#访问可见性问题" class="headerlink" title="访问可见性问题"></a>访问可见性问题</h3><p>对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给<code>Student</code>对象绑定的<code>name</code>和<code>age</code>属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是&quot;<strong>We are all consenting adults here</strong>&quot;。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test._Test__bar()</span><br><span class="line">    <span class="built_in">print</span>(test._Test__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻，关于这一点可以看看我的<a href="http://blog.csdn.net/jackfrued/article/details/79521404">《Python - 那些年我们踩过的那些坑》</a>文章中的讲解。</p><h3 id="面向对象的支柱"><a href="#面向对象的支柱" class="headerlink" title="面向对象的支柱"></a>面向对象的支柱</h3><p>面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是&quot;隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口&quot;。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：定义一个类描述数字时钟。"><a href="#练习1：定义一个类描述数字时钟。" class="headerlink" title="练习1：定义一个类描述数字时钟。"></a>练习1：定义一个类描述数字时钟。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param hour: 时</span></span><br><span class="line"><span class="string">        :param minute: 分</span></span><br><span class="line"><span class="string">        :param second: 秒</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"><a href="#练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。" class="headerlink" title="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"></a>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动到指定位置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param x: 新的横坐标</span></span><br><span class="line"><span class="string">        &quot;param y: 新的纵坐标</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_by</span>(<span class="params">self, dx, dy</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动指定的增量</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param dx: 横坐标的增量</span></span><br><span class="line"><span class="string">        &quot;param dy: 纵坐标的增量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.x += dx</span><br><span class="line">        self.y += dy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance_to</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算与另一个点的距离</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param other: 另一个点</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dx = self.x - other.x</span><br><span class="line">        dy = self.y - other.y</span><br><span class="line">        <span class="keyword">return</span> sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(%s, %s)&#x27;</span> % (<span class="built_in">str</span>(self.x), <span class="built_in">str</span>(self.y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p1 = Point(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    p2 = Point()</span><br><span class="line">    <span class="built_in">print</span>(p1)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    p2.move_by(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2)</span><br><span class="line">    <span class="built_in">print</span>(p1.distance_to(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 本章中的插图来自于Grady Booch等著作的<a href="https://item.jd.com/20476561918.html">《面向对象分析与设计》</a>一书，该书是讲解面向对象编程的经典著作，有兴趣的读者可以购买和阅读这本书来了解更多的面向对象的相关知识。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串和常用数据结构</title>
      <link href="/posts/54178.html"/>
      <url>/posts/54178.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><p>第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作这些文本信息，就必须要先了解字符串类型以及与它相关的知识。</p><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，一般记为<img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301039.png" alt="$${\displaystyle s=a_{1}a_{2}\dots a_{n}(0\leq n \leq \infty)}$$">。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;hello, world!&quot;</span></span><br><span class="line"><span class="comment"># 以三个双引号或单引号开头的字符串可以折行</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello, </span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, s3, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。也可以在<code>\</code>后面跟Unicode字符编码来表示字符，例如<code>\u9a86\u660a</code>代表的是中文“小刘同学”。运行下面的代码，看看输出了什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\141\142\143\x61\x62\x63&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;\u9a86\u660a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2)</span><br></pre></td></tr></table></figure><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，再看看下面的代码又会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">r&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello &#x27;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">s1 += s2</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ll&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line"><span class="built_in">print</span>(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line"><span class="built_in">print</span>(str2[::-<span class="number">1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line"><span class="built_in">print</span>(str2[-<span class="number">3</span>:-<span class="number">1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;or&#x27;</span>)) <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">print</span>(str1.find(<span class="string">&#x27;shit&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;or&#x27;))</span></span><br><span class="line"><span class="comment"># print(str1.index(&#x27;shit&#x27;))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;He&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str1.startswith(<span class="string">&#x27;hel&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line"><span class="built_in">print</span>(str1.endswith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"><span class="built_in">print</span>(str1.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">str2 = <span class="string">&#x27;abc123456&#x27;</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"><span class="built_in">print</span>(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">&#x27;  jackfrued@126.com &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line"><span class="built_in">print</span>(str3.strip())</span><br></pre></td></tr></table></figure><p>我们之前讲过，可以用下面的方式来格式化输出字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br></pre></td></tr></table></figure><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br></pre></td></tr></table></figure><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。</p><h3 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h3><p>不知道大家是否注意到，刚才我们讲到的字符串类型（<code>str</code>）和之前我们讲到的数值类型（<code>int</code>和<code>float</code>）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><p>下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 5, 7, 100]</span></span><br><span class="line"><span class="comment"># 乘号表示列表元素的重复</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(list2) <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># 计算列表长度(元素个数)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 下标(索引)运算</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">4</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(list1[5])  # IndexError: list index out of range</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">3</span>]) <span class="comment"># 5</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 3, 300, 7, 100]</span></span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><p>下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;strawberry&#x27;</span>, <span class="string">&#x27;waxberry&#x27;</span>]</span><br><span class="line">fruits += [<span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>]</span><br><span class="line"><span class="comment"># 列表切片</span></span><br><span class="line">fruits2 = fruits[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits2) <span class="comment"># apple strawberry waxberry</span></span><br><span class="line"><span class="comment"># 可以通过完整切片操作来复制列表</span></span><br><span class="line">fruits3 = fruits[:]</span><br><span class="line"><span class="built_in">print</span>(fruits3) <span class="comment"># [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, &#x27;pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line">fruits4 = fruits[-<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits4) <span class="comment"># [&#x27;pitaya&#x27;, &#x27;pear&#x27;]</span></span><br><span class="line"><span class="comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span></span><br><span class="line">fruits5 = fruits[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits5) <span class="comment"># [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span></span><br></pre></td></tr></table></figure><p>下面的代码实现了对列表的排序操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;zoo&#x27;</span>, <span class="string">&#x27;internationalization&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line"><span class="comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span></span><br><span class="line"><span class="comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span></span><br><span class="line">list4 = <span class="built_in">sorted</span>(list1, key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br><span class="line"><span class="comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span></span><br><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h3><p>我们还可以使用列表的生成式语法来创建列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;ABCDE&#x27;</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">&#x27;1234567&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line"><span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line"><span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列</a>的生成器。所谓斐波拉切数列可以通过下面<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的方法来进行定义：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301040.png" alt="$${\displaystyle F_{0}=0}$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301041.png" alt="$${\displaystyle F_{1}=1}$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301042.png" alt="$${\displaystyle F_{n}=F_{n-1}+F_{n-2}}({n}\geq{2})$$"></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301043.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">t = (<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">38</span>, <span class="literal">True</span>, <span class="string">&#x27;内蒙古&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 获取元组中的元素</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(member)</span><br><span class="line"><span class="comment"># 重新给元组赋值</span></span><br><span class="line"><span class="comment"># t[0] = &#x27;王大锤&#x27;  # TypeError</span></span><br><span class="line"><span class="comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span></span><br><span class="line">t = (<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">20</span>, <span class="literal">True</span>, <span class="string">&#x27;云南昆明&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">person = <span class="built_in">list</span>(t)</span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"><span class="comment"># 列表是可以修改它的元素的</span></span><br><span class="line">person[<span class="number">0</span>] = <span class="string">&#x27;李小龙&#x27;</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits_list = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">fruits_tuple = <span class="built_in">tuple</span>(fruits_list)</span><br><span class="line"><span class="built_in">print</span>(fruits_tuple)</span><br></pre></td></tr></table></figure><p>这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？</p><ol><li>元组中的元素是无法修改的，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</li><li>元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的macOS系统上测试的结果。</li></ol><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301044.png"></p><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012301045.png"></p><p>可以按照下面代码所示的方式来创建和使用集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合的字面量语法</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Length =&#x27;</span>, <span class="built_in">len</span>(set1))</span><br><span class="line"><span class="comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(set2, set3)</span><br><span class="line"><span class="comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set4)</span><br></pre></td></tr></table></figure><p>向集合添加元素和从集合删除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3.pop())</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br></pre></td></tr></table></figure><p>集合的成员、交集、并集、差集等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的交集、并集、差集、对称差运算</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)</span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)</span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)</span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)</span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line"><span class="comment"># 判断子集和超集</span></span><br><span class="line"><span class="built_in">print</span>(set2 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line"><span class="built_in">print</span>(set3 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set3.issubset(set1))</span></span><br><span class="line"><span class="built_in">print</span>(set1 &gt;= set2)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br><span class="line"><span class="built_in">print</span>(set1 &gt;= set3)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set3))</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如<code>&amp;</code>运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。</p></blockquote><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">scores = &#123;<span class="string">&#x27;小刘同学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;白元芳&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;狄仁杰&#x27;</span>: <span class="number">82</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="comment"># 创建字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 通过zip函数将两个序列压成字典</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(items1, items2, items3)</span><br><span class="line"><span class="comment"># 通过键可以获取字典中对应的值</span></span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;小刘同学&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(scores[<span class="string">&#x27;狄仁杰&#x27;</span>])</span><br><span class="line"><span class="comment"># 对字典中所有键值对进行遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">&#x27;白元芳&#x27;</span>] = <span class="number">65</span></span><br><span class="line">scores[<span class="string">&#x27;诸葛王朗&#x27;</span>] = <span class="number">71</span></span><br><span class="line">scores.update(冷面=<span class="number">67</span>, 方启鹤=<span class="number">85</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;武则天&#x27;</span> <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(scores[<span class="string">&#x27;武则天&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;武则天&#x27;</span>))</span><br><span class="line"><span class="comment"># get方法也是通过键获取对应的值但是可以设置默认值</span></span><br><span class="line"><span class="built_in">print</span>(scores.get(<span class="string">&#x27;武则天&#x27;</span>, <span class="number">60</span>))</span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line"><span class="built_in">print</span>(scores.popitem())</span><br><span class="line"><span class="built_in">print</span>(scores.popitem())</span><br><span class="line"><span class="built_in">print</span>(scores.pop(<span class="string">&#x27;小刘同学&#x27;</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">scores.clear()</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：在屏幕上显示跑马灯文字。"><a href="#练习1：在屏幕上显示跑马灯文字。" class="headerlink" title="练习1：在屏幕上显示跑马灯文字。"></a>练习1：在屏幕上显示跑马灯文字。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    content = <span class="string">&#x27;北京欢迎你为你开天辟地…………&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 清理屏幕上的输出</span></span><br><span class="line">        os.system(<span class="string">&#x27;cls&#x27;</span>)  <span class="comment"># os.system(&#x27;clear&#x27;)</span></span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="comment"># 休眠200毫秒</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        content = content[<span class="number">1</span>:] + content[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"><a href="#练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。" class="headerlink" title="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"></a>练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_code</span>(<span class="params">code_len=<span class="number">4</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成指定长度的验证码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param code_len: 验证码的长度(默认4个字符)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: 由大小写英文字母和数字构成的随机验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_chars = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">    last_pos = <span class="built_in">len</span>(all_chars) - <span class="number">1</span></span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(code_len):</span><br><span class="line">        index = random.randint(<span class="number">0</span>, last_pos)</span><br><span class="line">        code += all_chars[index]</span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure><h4 id="练习3：设计一个函数返回给定文件名的后缀名。"><a href="#练习3：设计一个函数返回给定文件名的后缀名。" class="headerlink" title="练习3：设计一个函数返回给定文件名的后缀名。"></a>练习3：设计一个函数返回给定文件名的后缀名。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_suffix</span>(<span class="params">filename, has_dot=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取文件名的后缀名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filename: 文件名</span></span><br><span class="line"><span class="string">    :param has_dot: 返回的后缀名是否需要带点</span></span><br><span class="line"><span class="string">    :return: 文件的后缀名</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pos = filename.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; pos &lt; <span class="built_in">len</span>(filename) - <span class="number">1</span>:</span><br><span class="line">        index = pos <span class="keyword">if</span> has_dot <span class="keyword">else</span> pos + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> filename[index:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"><a href="#练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。" class="headerlink" title="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"></a>练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max2</span>(<span class="params">x</span>):</span><br><span class="line">    m1, m2 = (x[<span class="number">0</span>], x[<span class="number">1</span>]) <span class="keyword">if</span> x[<span class="number">0</span>] &gt; x[<span class="number">1</span>] <span class="keyword">else</span> (x[<span class="number">1</span>], x[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(x)):</span><br><span class="line">        <span class="keyword">if</span> x[index] &gt; m1:</span><br><span class="line">            m2 = m1</span><br><span class="line">            m1 = x[index]</span><br><span class="line">        <span class="keyword">elif</span> x[index] &gt; m2:</span><br><span class="line">            m2 = x[index]</span><br><span class="line">    <span class="keyword">return</span> m1, m2</span><br></pre></td></tr></table></figure><h4 id="练习5：计算指定的年月日是这一年的第几天。"><a href="#练习5：计算指定的年月日是这一年的第几天。" class="headerlink" title="练习5：计算指定的年月日是这一年的第几天。"></a>练习5：计算指定的年月日是这一年的第几天。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断指定的年份是不是闰年</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param year: 年份</span></span><br><span class="line"><span class="string">    :return: 闰年返回True平年返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">which_day</span>(<span class="params">year, month, date</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算传入的日期是这一年的第几天</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param year: 年</span></span><br><span class="line"><span class="string">    :param month: 月</span></span><br><span class="line"><span class="string">    :param date: 日</span></span><br><span class="line"><span class="string">    :return: 第几天</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    days_of_month = [</span><br><span class="line">        [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ][is_leap_year(year)]</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(month - <span class="number">1</span>):</span><br><span class="line">        total += days_of_month[index]</span><br><span class="line">    <span class="keyword">return</span> total + date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">1980</span>, <span class="number">11</span>, <span class="number">28</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">31</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">2018</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(which_day(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="练习6：打印杨辉三角。"><a href="#练习6：打印杨辉三角。" class="headerlink" title="练习6：打印杨辉三角。"></a>练习6：打印<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">杨辉三角</a>。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Number of rows: &#x27;</span>))</span><br><span class="line">    yh = [[]] * num</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yh)):</span><br><span class="line">        yh[row] = [<span class="literal">None</span>] * (row + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yh[row])):</span><br><span class="line">            <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> col == row:</span><br><span class="line">                yh[row][col] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                yh[row][col] = yh[row - <span class="number">1</span>][col] + yh[row - <span class="number">1</span>][col - <span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(yh[row][col], end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：双色球选号。"><a href="#案例1：双色球选号。" class="headerlink" title="案例1：双色球选号。"></a>案例1：双色球选号。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange, randint, sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">balls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    输出列表中的双色球号码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index, ball <span class="keyword">in</span> <span class="built_in">enumerate</span>(balls):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(balls) - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;|&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%02d&#x27;</span> % ball, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_select</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    随机选择一组号码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    red_balls = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">34</span>)]</span><br><span class="line">    selected_balls = []</span><br><span class="line">    selected_balls = sample(red_balls, <span class="number">6</span>)</span><br><span class="line">    selected_balls.sort()</span><br><span class="line">    selected_balls.append(randint(<span class="number">1</span>, <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> selected_balls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;机选几注: &#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        display(random_select())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。</p></blockquote><h4 id="综合案例2：约瑟夫环问题。"><a href="#综合案例2：约瑟夫环问题。" class="headerlink" title="综合案例2：约瑟夫环问题。"></a>综合案例2：<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环问题</a>。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">《幸运的基督徒》</span></span><br><span class="line"><span class="string">有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    persons = [<span class="literal">True</span>] * <span class="number">30</span></span><br><span class="line">    counter, index, number = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">if</span> persons[index]:</span><br><span class="line">            number += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">9</span>:</span><br><span class="line">                persons[index] = <span class="literal">False</span></span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">                number = <span class="number">0</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        index %= <span class="number">30</span></span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> persons:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;基&#x27;</span> <span class="keyword">if</span> person <span class="keyword">else</span> <span class="string">&#x27;非&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="综合案例3：井字棋游戏。"><a href="#综合案例3：井字棋游戏。" class="headerlink" title="综合案例3：井字棋游戏。"></a>综合案例3：<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B">井字棋</a>游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_board</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;TL&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;TM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;TR&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;ML&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;MM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;MR&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;BL&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;BM&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;BR&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    init_board = &#123;</span><br><span class="line">        <span class="string">&#x27;TL&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;TM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;TR&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ML&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;MM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;MR&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BL&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;BM&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;BR&#x27;</span>: <span class="string">&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    begin = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> begin:</span><br><span class="line">        curr_board = init_board.copy()</span><br><span class="line">        begin = <span class="literal">False</span></span><br><span class="line">        turn = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line">        print_board(curr_board)</span><br><span class="line">        <span class="keyword">while</span> counter &lt; <span class="number">9</span>:</span><br><span class="line">            move = <span class="built_in">input</span>(<span class="string">&#x27;轮到%s走棋, 请输入位置: &#x27;</span> % turn)</span><br><span class="line">            <span class="keyword">if</span> curr_board[move] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">                curr_board[move] = turn</span><br><span class="line">                <span class="keyword">if</span> turn == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                    turn = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    turn = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">            os.system(<span class="string">&#x27;clear&#x27;</span>)</span><br><span class="line">            print_board(curr_board)</span><br><span class="line">        choice = <span class="built_in">input</span>(<span class="string">&#x27;再玩一局?(yes|no)&#x27;</span>)</span><br><span class="line">        begin = choice == <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 最后这个案例来自<a href="https://item.jd.com/11943853.html">《Python编程快速上手:让繁琐工作自动化》</a>一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数与模块</title>
      <link href="/posts/31440.html"/>
      <url>/posts/31440.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012302559.png"></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012302560.png"></p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入M和N计算C(M,N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;m = &#x27;</span>))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n = &#x27;</span>))</span><br><span class="line">fm = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">    fm *= num</span><br><span class="line">fn = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    fn *= num</span><br><span class="line">fm_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m - n + <span class="number">1</span>):</span><br><span class="line">    fm_n *= num</span><br><span class="line"><span class="built_in">print</span>(fm // fn // fm_n)</span><br></pre></td></tr></table></figure><h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入M和N计算C(M,N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;m = &#x27;</span>))</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n = &#x27;</span>))</span><br><span class="line"><span class="comment"># 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数</span></span><br><span class="line"><span class="built_in">print</span>(fac(m) // fac(n) // fac(m - n))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">n=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a=<span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有指定参数那么使用默认值摇两颗色子</span></span><br><span class="line"><span class="built_in">print</span>(roll_dice())</span><br><span class="line"><span class="comment"># 摇三颗色子</span></span><br><span class="line"><span class="built_in">print</span>(roll_dice(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(add())</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 传递参数时可以不按照设定的顺序进行传递</span></span><br><span class="line"><span class="built_in">print</span>(add(c=<span class="number">50</span>, a=<span class="number">100</span>, b=<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在参数名前面的*表示args是一个可变参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">*args</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用add函数时可以传入0个或多个参数</span></span><br><span class="line"><span class="built_in">print</span>(add())</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的代码会输出什么呢？</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;call foo()&#x27;</span>)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;call bar()&#x27;</span>)</span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span></span><br><span class="line">    (x, y) = (y, x) <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> (x, y)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x * y // gcd(x, y)</span><br></pre></td></tr></table></figure><h4 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断一个数是不是回文数&quot;&quot;&quot;</span></span><br><span class="line">    temp = num</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">        total = total * <span class="number">10</span> + temp % <span class="number">10</span></span><br><span class="line">        temp //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total == num</span><br></pre></td></tr></table></figure><h4 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断一个数是不是素数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> num != <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入正整数: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> is_palindrome(num) <span class="keyword">and</span> is_prime(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d是回文素数&#x27;</span> % num)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python中可以在函数内部再定义函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">        c = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">    bar()</span><br><span class="line">    <span class="comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    <span class="comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span></span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Todo: Add your code here</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python构造逻辑</title>
      <link href="/posts/62552.html"/>
      <url>/posts/62552.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><p>学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。</p><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3&#x3D;153$。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">找出所有水仙花数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    low = num % <span class="number">10</span></span><br><span class="line">    mid = num // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">    high = num // <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> num == low ** <span class="number">3</span> + mid ** <span class="number">3</span> + high ** <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">正整数的反转</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;num = &#x27;</span>))</span><br><span class="line">reversed_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    reversed_num = reversed_num * <span class="number">10</span> + num % <span class="number">10</span></span><br><span class="line">    num //= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(reversed_num)</span><br></pre></td></tr></table></figure></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">《百钱百鸡》问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">33</span>):</span><br><span class="line">        z = <span class="number">100</span> - x - y</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;公鸡: %d只, 母鸡: %d只, 小鸡: %d只&#x27;</span> % (x, y, z))</span><br></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Craps赌博游戏</span></span><br><span class="line"><span class="string">我们设定玩家开始游戏时有1000元的赌注</span></span><br><span class="line"><span class="string">游戏结束的条件是玩家输光所有的赌注</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"><span class="keyword">while</span> money &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的总资产为:&#x27;</span>, money)</span><br><span class="line">    needs_go_on = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        debt = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请下注: &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; debt &lt;= money:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    first = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家摇出了%d点&#x27;</span> % first)</span><br><span class="line">    <span class="keyword">if</span> first == <span class="number">7</span> <span class="keyword">or</span> first == <span class="number">11</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;玩家胜!&#x27;</span>)</span><br><span class="line">        money += debt</span><br><span class="line">    <span class="keyword">elif</span> first == <span class="number">2</span> <span class="keyword">or</span> first == <span class="number">3</span> <span class="keyword">or</span> first == <span class="number">12</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;庄家胜!&#x27;</span>)</span><br><span class="line">        money -= debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        needs_go_on = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> needs_go_on:</span><br><span class="line">        needs_go_on = <span class="literal">False</span></span><br><span class="line">        current = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;玩家摇出了%d点&#x27;</span> % current)</span><br><span class="line">        <span class="keyword">if</span> current == <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;庄家胜&#x27;</span>)</span><br><span class="line">            money -= debt</span><br><span class="line">        <span class="keyword">elif</span> current == first:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;玩家胜&#x27;</span>)</span><br><span class="line">            money += debt</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            needs_go_on = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你破产了, 游戏结束!&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>###有用的练习 </p><ol><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote></li><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6&#x3D;1+2+3$）和28（$28&#x3D;1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote></li><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><p>上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python循环结构</title>
      <link href="/posts/50417.html"/>
      <url>/posts/50417.html</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里同样需要循环结构。</p><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n&#x3D;1}^{100}n$）。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">猜数字游戏</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;小一点&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;恭喜你猜对了!&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你总共猜了%d次&#x27;</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的智商余额明显不足&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出乘法口诀表(九九表)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入一个正整数判断它是不是素数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个正整数: &#x27;</span>))</span><br><span class="line">end = <span class="built_in">int</span>(sqrt(num))</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> num % x == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> is_prime <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d是素数&#x27;</span> % num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d不是素数&#x27;</span> % num)</span><br></pre></td></tr></table></figure><h4 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入两个正整数计算它们的最大公约数和最小公倍数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;y = &#x27;</span>))</span><br><span class="line"><span class="comment"># 如果x大于y就交换x和y的值</span></span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="comment"># 通过下面的操作将y的值赋给x, 将x的值赋给y</span></span><br><span class="line">    x, y = y, x</span><br><span class="line"><span class="comment"># 从两个数中较小的数开始做递减的循环</span></span><br><span class="line"><span class="keyword">for</span> factor <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d和%d的最大公约数是%d&#x27;</span> % (x, y, factor))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d和%d的最小公倍数是%d&#x27;</span> % (x, y, x * y // factor))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印三角形图案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">row = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入行数: &#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        <span class="keyword">if</span> j &lt; row - i - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(row - i - <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> * i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python分支结构</title>
      <link href="/posts/64093.html"/>
      <url>/posts/64093.html</url>
      
        <content type="html"><![CDATA[<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用户身份验证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名: &#x27;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入口令: &#x27;</span>)</span><br><span class="line"><span class="comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span></span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证成功!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;身份验证失败!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是和C&#x2F;C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206020035837.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        3x - 5  (x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">        5x + 3  (x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">    y = x + <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string">3x - 5(x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =x + 2(-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">5x + 3(x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">        y = x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：英制单位英寸与公制单位厘米互换。"><a href="#练习1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="练习1：英制单位英寸与公制单位厘米互换。"></a>练习1：英制单位英寸与公制单位厘米互换。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">英制单位英寸和公制单位厘米互换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">value = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入长度: &#x27;</span>))</span><br><span class="line">unit = <span class="built_in">input</span>(<span class="string">&#x27;请输入单位: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> unit == <span class="string">&#x27;in&#x27;</span> <span class="keyword">or</span> unit == <span class="string">&#x27;英寸&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f英寸 = %f厘米&#x27;</span> % (value, value * <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">elif</span> unit == <span class="string">&#x27;cm&#x27;</span> <span class="keyword">or</span> unit == <span class="string">&#x27;厘米&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f厘米 = %f英寸&#x27;</span> % (value, value / <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入有效的单位&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h4><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">百分制成绩转换为等级制成绩</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">score = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入成绩: &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对应的等级是:&#x27;</span>, grade)</span><br></pre></td></tr></table></figure><h4 id="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#练习3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>练习3：输入三条边长，如果能构成三角形就计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;a = &#x27;</span>))</span><br><span class="line">b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;b = &#x27;</span>))</span><br><span class="line">c = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;c = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;周长: %f&#x27;</span> % (a + b + c))</span><br><span class="line">    p = (a + b + c) / <span class="number">2</span></span><br><span class="line">    area = (p * (p - a) * (p - b) * (p - c)) ** <span class="number">0.5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;面积: %f&#x27;</span> % (area))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不能构成三角形&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://zh.wikipedia.org/zh-hans/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F">海伦公式</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言元素</title>
      <link href="/posts/44418.html"/>
      <url>/posts/44418.html</url>
      
        <content type="html"><![CDATA[<h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h4 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。</p></blockquote><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用变量保存数据并进行加减乘除运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(a + b)    <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(a - b)    <span class="comment"># 309</span></span><br><span class="line"><span class="built_in">print</span>(a * b)    <span class="comment"># 3852</span></span><br><span class="line"><span class="built_in">print</span>(a / b)    <span class="comment"># 26.75</span></span><br></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用type()检查变量的类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;a = &#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;b = &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="comment"># flag0 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="comment"># flag1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="comment"># flag2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="comment"># flag3 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="comment"># flag4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="comment"># flag5 = False</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C&#x3D;(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将华氏温度转换为摄氏温度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">f = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入华氏温度: &#x27;</span>))</span><br><span class="line">c = (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.1f华氏度 = %.1f摄氏度&#x27;</span> % (f, c))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f:<span class="number">.1</span>f&#125;</span>华氏度 = <span class="subst">&#123;c:<span class="number">.1</span>f&#125;</span>摄氏度&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h4 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入半径计算圆的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径: &#x27;</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * <span class="number">3.1416</span> * radius</span><br><span class="line">area = <span class="number">3.1416</span> * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;周长: %.2f&#x27;</span> % perimeter)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积: %.2f&#x27;</span> % area)</span><br></pre></td></tr></table></figure><h4 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输入年份 如果是闰年输出True 否则输出False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年份: &#x27;</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span></span><br><span class="line">is_leap = year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">          year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(is_leap)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Python</title>
      <link href="/posts/35134.html"/>
      <url>/posts/35134.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h2><h3 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h3><h4 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h4><ol><li>1989年圣诞节：Guido von Rossum开始写Python语言的编译器。</li><li>1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li><li>1994年1月：Python 1.0正式发布。</li><li>2000年10月16日：Python 2.0发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li><li>2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6&#x2F;2.7版本中。</li></ol><p>目前我使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的网络文章。</p><h4 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h4><p>Python的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p>Python的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。</li></ol><h4 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h4><p>目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h3 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h3><p>想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。</p><h4 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h4><p>可以在<a href="https://www.python.org/">Python官方网站</a>下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl&#x2F;tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示api-ms-win-crt*.dll文件缺失，可以参照<a href="https://zhuanlan.zhihu.com/p/32087135">《api-ms-win-crt*.dll缺失原因分析和解决方法》</a>一文讲解的方法进行处理或者直接在<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145">微软官网</a>下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个<a href="https://dl.pconline.com.cn/download/360074-1.html">DirectX修复工具</a>进行修复。</p><h4 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h4><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在<a href="https://www.python.org/">Python的官方网站</a>下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。</p><ol><li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><ol start="2"><li>下载Python源代码并解压缩到指定目录。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span><br><span class="line">xz -d Python-3.7.6.tar.xz</span><br><span class="line">tar -xvf Python-3.7.6.tar</span><br></pre></td></tr></table></figure><ol start="3"><li>切换至Python源代码目录并执行下面的命令进行配置和安装。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.6</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="4"><li>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 此处省略上面的代码 ...</span></span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure><ol start="5"><li>激活环境变量。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h4 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h4><p>macOS也自带了Python 2.x版本，可以通过<a href="https://www.python.org/">Python的官方网站</a>提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行<code>python</code>命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行<code>python3</code>命令。</p><h3 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h3><h4 id="确认Python的版本"><a href="#确认Python的版本" class="headerlink" title="确认Python的版本"></a>确认Python的版本</h4><p>可以Windows的命令行提示符中键入下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>在Linux或macOS系统的终端中键入下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>当然也可以先输入<code>python</code>或<code>python3</code>进入交互式环境，再执行以下的代码检查Python的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.version_info)</span><br><span class="line"><span class="built_in">print</span>(sys.version)</span><br></pre></td></tr></table></figure><h4 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h4><p>可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/">Sublime</a>、<a href="https://code.visualstudio.com/">Visual Studio Code</a>等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以#和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一个Python程序 - hello, world!</span></span><br><span class="line"><span class="string">向伟大的Dennis M. Ritchie先生致敬</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 小刘同学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;你好, 世界！&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h3><h4 id="IDLE-自带的集成开发工具"><a href="#IDLE-自带的集成开发工具" class="headerlink" title="IDLE - 自带的集成开发工具"></a>IDLE - 自带的集成开发工具</h4><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258805.png"></p><h4 id="IPython-更好的交互式编程工具"><a href="#IPython-更好的交互式编程工具" class="headerlink" title="IPython - 更好的交互式编程工具"></a>IPython - 更好的交互式编程工具</h4><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ipython</span><br></pre></td></tr></table></figure><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258807.png"></p><h4 id="Sublime-Text-高级文本编辑器"><a href="#Sublime-Text-高级文本编辑器" class="headerlink" title="Sublime Text - 高级文本编辑器"></a>Sublime Text - 高级文本编辑器</h4><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258808.png"></p><ul><li><p>首先可以通过<a href="https://www.sublimetext.com/">官方网站</a>下载安装程序安装Sublime Text 3或Sublime Text 2。</p></li><li><p>安装包管理工具。</p><ol><li>通过快捷键Ctrl+&#96;或者在View菜单中选择Show Console打开控制台，输入下面的代码。</li></ol><ul><li>Sublime 3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request,os;pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">&#x27;wb&#x27;</span>).write(urllib.request.urlopen(<span class="string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).read())</span><br></pre></td></tr></table></figure><ul><li>Sublime 2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib2,os;pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));<span class="built_in">open</span>(os.path.join(ipp,pf),<span class="string">&#x27;wb&#x27;</span>).write(urllib2.urlopen(<span class="string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span>)).read());<span class="built_in">print</span>(<span class="string">&#x27;Please restart Sublime Text to finish installation&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>在浏览器中输入  <a href="https://sublime.wbond.net/Package%20Control.sublime-package">https://sublime.wbond.net/Package%20Control.sublime-package</a> 下载包管理工具的安装包，并找到安装Sublime目录下名为&quot;Installed Packages&quot;的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。</li></ol></li><li><p>安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><ul><li>SublimeCodeIntel - 代码自动补全工具插件。</li><li>Emmet - 前端开发代码模板插件。</li><li>Git - 版本控制工具插件。</li><li>Python PEP8 Autoformat - PEP8规范自动格式化插件。</li><li>ConvertToUTF8 - 将本地编码转换为UTF-8。</li></ul></li></ul><blockquote><p><strong>说明</strong>：事实上<a href="https://code.visualstudio.com/">Visual Studio Code</a>可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p></blockquote><h4 id="PyCharm-Python开发神器"><a href="#PyCharm-Python开发神器" class="headerlink" title="PyCharm - Python开发神器"></a>PyCharm - Python开发神器</h4><p>PyCharm的安装、配置和使用在<a href="../%E7%95%AA%E5%A4%96%E7%AF%87/%E7%8E%A9%E8%BD%ACPyCharm.md">《玩转PyCharm》</a>进行了介绍，有兴趣的读者可以选择阅读。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202206012258809.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li><p>在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的<a href="../Python%E4%B9%8B%E7%A6%85.md">“Python之禅”</a>，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p></blockquote></li><li><p>学习使用turtle在屏幕上绘制图形。</p><blockquote><p><strong>说明</strong>：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">4</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础句法</title>
      <link href="/posts/4447.html"/>
      <url>/posts/4447.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言笔记"><a href="#C语言笔记" class="headerlink" title="C语言笔记"></a>C语言笔记</h1><h2 id="1-C语言概述"><a href="#1-C语言概述" class="headerlink" title="1. C语言概述"></a>1. C语言概述</h2><h3 id="1-1-C语言"><a href="#1-1-C语言" class="headerlink" title="1.1 C语言"></a>1.1 C语言</h3><p>​一提到语言这个词语，自然会想到的是像英语、汉语等这样的自然语言，因为它是人和人交换信息不可缺少的工具。</p><p>而今天计算机遍布了我们生活的每一个角落，除了人和人的相互交流之外，我们必须和计算机角落。</p><p>用什么的什么样的方式和计算机做最直接的交流呢？人们自然想到的是最古老也最方便的方式——语言，而C语言就是人和计算机交流的一种语言。</p><p>语言是用来交流沟通的。有一方说，有另一方听，必须有两方参与，这是语言最重要的功能：</p><blockquote><p> 说的一方传递信息，听的一方接收信息；</p></blockquote><blockquote><p>说的一方下达指令，听的一方遵循命令做事情。</p></blockquote><p><font color="red">语言是人和人交流，C语言是人和机器交流</font>。只是，人可以不听另外一个人，但是，计算机是无条件服从。</p><p>语言有独特的语法规则和定义，双方必须遵循这些规则和定义才能实现真正的交流。</p><h4 id="1-1-1-计算机结构组成"><a href="#1-1-1-计算机结构组成" class="headerlink" title="1.1.1  计算机结构组成"></a>1.1.1  计算机结构组成</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000868.jpg" alt="2016-05-31_154538"></p><h3 id="1-2-为什么学C语言"><a href="#1-2-为什么学C语言" class="headerlink" title="1.2 为什么学C语言"></a>1.2 为什么学C语言</h3><h4 id="1-2-1-C语言特点"><a href="#1-2-1-C语言特点" class="headerlink" title="1.2.1 C语言特点"></a>1.2.1 C语言特点</h4><ul><li>优点<ul><li>代码量小</li><li>执行速度快</li><li>功能强大</li><li>编程自由</li></ul></li><li>缺点<ul><li>写代码实现周期长</li><li>可移植性较差</li><li>过于自由，经验不足易出错</li><li>对平台库依赖较多</li></ul></li></ul><h4 id="1-2-2-学习C语言理由"><a href="#1-2-2-学习C语言理由" class="headerlink" title="1.2.2 学习C语言理由"></a>1.2.2 学习C语言理由</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000869.jpg" alt="2016-05-31_165538"></p><h4 id="1-2-3-C语言应用领域"><a href="#1-2-3-C语言应用领域" class="headerlink" title="1.2.3 C语言应用领域"></a>1.2.3 C语言应用领域</h4><p>C语言的应用极其广泛，从网站后台，到底层操作系统，从多媒体应用到大型网络游戏，均可使用C语言来开发：</p><ul><li><p>C语言可以写网站后台程序</p></li><li><p>C语言可以专门针对某个主题写出功能强大的程序库</p></li><li><p>C语言可以写出大型游戏的引擎</p></li><li><p>C语言可以写出另一个语言来</p></li><li><p>C语言可以写操作系统和驱动程序，并且只能用C语言编写</p></li><li><p>任何设备只要配置了微处理器，就都支持C语言。从微波炉到手机，都是由C语言技术来推动的</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000870.png" alt="242317553528437"></p><h4 id="1-2-4-C语言关键字"><a href="#1-2-4-C语言关键字" class="headerlink" title="1.2.4 C语言关键字"></a>1.2.4 C语言关键字</h4><blockquote><p>C语言仅有32个关键字，9种控制语句，34种运算符，却能完成无数的功能：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000871.jpg" alt="2016-05-31_173134"></p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000872.jpg" alt="2016-05-31_173306"></p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000873.jpg" alt="2016-05-31_173424"></p><h3 id="1-3-第一个C语言程序：HelloWorld"><a href="#1-3-第一个C语言程序：HelloWorld" class="headerlink" title="1.3 第一个C语言程序：HelloWorld"></a>1.3 第一个C语言程序：HelloWorld</h3><h4 id="1-3-1-编写C语言代码：hello-c"><a href="#1-3-1-编写C语言代码：hello-c" class="headerlink" title="1.3.1 编写C语言代码：hello.c"></a>1.3.1 编写C语言代码：hello.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 第一个C语言程序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>C语言的源代码文件是一个普通的文本文件，<font color="red">但扩展名必须是.c</font></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000874.png" alt="image-20200919090134713"></p><h4 id="1-3-2-通过gcc编译C代码"><a href="#1-3-2-通过gcc编译C代码" class="headerlink" title="1.3.2 通过gcc编译C代码"></a>1.3.2 通过gcc编译C代码</h4><h5 id="1-gcc编译器介绍"><a href="#1-gcc编译器介绍" class="headerlink" title="1. gcc编译器介绍"></a>1. gcc编译器介绍</h5><p>编辑器(如vi、记事本)是指我用它来写程序的（编辑代码），而我们写的代码语句，电脑是不懂的，我们需要把它转成电脑能懂的语句，编译器就是这样的转化工具。就是说，<font color="red">我们用编辑器编写程序，由编译器编译后才可以运行！</font></p><p>编译器是将易于编写、阅读和维护的高级计算机语言翻译为计算机能解读、运行的低级机器语言的程序</p><p>gcc（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。gcc原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，gcc同样适用于微软的Windows</p><p>gcc最初用于编译C语言，随着项目的发展gcc已经成为了能够编译C、C++、Java、Ada、fortran、Object C、Object C++、Go语言的编译器大家族</p><p>编译命令格式：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc [-option1] ... &lt;filename&gt;</span><br><span class="line">g++ [-option1] ... &lt;filename&gt;</span><br></pre></td></tr></table></figure><ul><li><p>命令、选项和源文件之间使用空格分隔</p></li><li><p>一行命令中可以有零个、一个或多个选项</p></li><li><p>文件名可以包含文件的绝对路径，也可以使用相对路径</p></li><li><p>如果命令中不包含输出可执行文件的文件名，可执行文件的文件名会自动生成一个默认名，Linux平台为<code>a.out</code>，Windows平台为<code>a.exe</code></p></li></ul><p>gcc、g++编译常用选项说明：</p><table><thead><tr><th><strong>选项</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>-o file</td><td>指定生成的输出文件名为file</td></tr><tr><td>-E</td><td>只进行预处理</td></tr><tr><td>-S(大写)</td><td>只进行预处理和编译</td></tr><tr><td>-c(小写)</td><td>只进行预处理、编译和汇编</td></tr></tbody></table><h5 id="2-Windows平台下gcc环境配置"><a href="#2-Windows平台下gcc环境配置" class="headerlink" title="2. Windows平台下gcc环境配置"></a>2. Windows平台下gcc环境配置</h5><blockquote><p>windows命令行界面下，默认是没有gcc编译器，我们需要配置一下环境</p><p><code>MinGW</code>, 安装使用教程参看：<a href="https://blog.csdn.net/wxh0000mm/article/details/100666329">MinGW安装教程</a></p></blockquote><h5 id="3-linux平台下gcc环境配置"><a href="#3-linux平台下gcc环境配置" class="headerlink" title="3. linux平台下gcc环境配置"></a>3. linux平台下gcc环境配置</h5><blockquote><p>参考教程：<a href="https://blog.csdn.net/lydong_/article/details/79812402">详解Linux安装GCC方法</a></p></blockquote><h4 id="1-3-3-代码分析"><a href="#1-3-3-代码分析" class="headerlink" title="1.3.3 代码分析"></a>1.3.3 代码分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include的意思是头文件包含,</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;代表包含stdio.h这个头文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用C语言库函数需要提前包含库函数对应的头文件，如这里使用了printf()函数，需要包含stdio.h头文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">main</span>()&#123;</span><br><span class="line"><span class="comment">// 第一个C语言程序</span></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;hello world\n&quot;</span>); <span class="comment">// 可以通过man 3 printf查看printf所需的头文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-include头文件包含"><a href="#1-include头文件包含" class="headerlink" title="1. include头文件包含"></a>1. include头文件包含</h5><ul><li><p><code>#include&lt; &gt;</code> 与 <code>#include &quot;&quot;</code>的区别：</p></li><li><p><code>&lt; &gt;</code> 表示系统<font color="red">直接</font>按系统指定的目录检索</p></li><li><p><code>&quot; &quot;</code> 表示系统<font color="red">先</font>在<code>&quot; &quot;</code>指定的路径(没写路径代表当前路径)查找头文件，如果找不到，<font color="red">再</font>按系统指定的目录检索</p></li></ul><p><code>stdio.h</code> 在操作系统<code>/usr/include/</code>目录下</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000875.png" alt="image-20200919092034856"></p><h5 id="2-main函数"><a href="#2-main函数" class="headerlink" title="2. main函数"></a>2. main函数</h5><ul><li>一个完整的C语言程序，是由一个、<font color="red">且只能有一个</font><code>main()</code>函数(又称主函数，必须有)和若干个其他函数结合而成（可选）</li><li><code>main</code>函数是C语言程序的入口，程序是从main函数开始执行</li></ul><h5 id="3-括号，程序体和代码块"><a href="#3-括号，程序体和代码块" class="headerlink" title="3. {} 括号，程序体和代码块"></a>3. {} 括号，程序体和代码块</h5><ul><li><code>&#123;&#125;</code>叫代码块，一个代码块内部可以有一条或者多条语句</li><li>C语言每句可执行代码都是”<code>;</code>“分号结尾</li><li>所有的<code>#</code>开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</li><li>所有的可执行语句必须是在代码块里面</li></ul><h5 id="4-注释"><a href="#4-注释" class="headerlink" title="4.  注释"></a>4.  注释</h5><ul><li><code>//</code>叫行注释，注释的内容编译器是忽略的，注释主要的作用是在代码中加一些说明和解释，这样有利于代码的阅读</li><li><code>/**/</code>叫块注释</li><li>块注释是C语言标准的注释方法</li><li>行注释是从C++语言借鉴过来的</li></ul><h5 id="5-printf函数"><a href="#5-printf函数" class="headerlink" title="5. printf函数"></a>5. printf函数</h5><ul><li><p><code>printf</code>是C语言库函数，功能是向标准输出设备输出一个字符串</p></li><li><p><code>printf(“hello world\n”);</code> &#x2F;&#x2F;<code>\n</code>的意思是回车换行</p></li></ul><h5 id="6-return语句"><a href="#6-return语句" class="headerlink" title="6.  return语句"></a>6.  return语句</h5><ul><li><p><code>return</code> 代表函数执行完毕，返回return代表函数的终止</p></li><li><p>如果main定义的时候前面是<code>int</code>，那么return后面就需要写一个整数；如果main定义的时候前面是<code>void</code>，那么return后面什么也不需要写</p></li><li><p>在main函数中<code>return 0</code>代表程序执行成功，<code>return -1</code>代表程序执行失败</p></li><li><p><code>int main()</code>和<code>void main()</code>在C语言中是一样的，但C++只接受<code>int main</code>这种定义方式</p></li></ul><h3 id="1-4-system函数"><a href="#1-4-system函数" class="headerlink" title="1.4 system函数"></a>1.4 system函数</h3><h4 id="1-4-1-system函数的使用"><a href="#1-4-1-system函数的使用" class="headerlink" title="1.4.1 system函数的使用"></a>1.4.1 system函数的使用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">system</span>(<span class="keyword">const</span> char *command);</span><br></pre></td></tr></table></figure><blockquote><p>功能：在已经运行的程序中执行另外一个外部程序<br>参数：外部可执行程序名字<br>返回值：<br>成功：0<br>失败：任意数字</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//system(&quot;calc&quot;); //windows平台</span></span><br><span class="line">system(<span class="string">&quot;ls&quot;</span>); <span class="comment">//Linux平台, 需要头文件#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000876.png" alt="image-20200919094712699"></p><h3 id="1-5-C语言编译过程"><a href="#1-5-C语言编译过程" class="headerlink" title="1.5 C语言编译过程"></a>1.5 C语言编译过程</h3><h4 id="1-5-1-C程序编译步骤"><a href="#1-5-1-C程序编译步骤" class="headerlink" title="1.5.1 C程序编译步骤"></a>1.5.1 C程序编译步骤</h4><blockquote><p>C代码编译成可执行程序经过4步：</p></blockquote><ol><li>预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</li><li>编译：检查语法，将预处理后文件编译生成汇编文件</li><li>汇编：将汇编文件生成目标文件(二进制文件)</li><li>链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000877.png"></p><blockquote><p>VS 执行结果一闪而过的解决方法：</p></blockquote><ol><li><p><code>system(&quot;pause&quot;);</code></p></li><li><p><code>项目-&gt;属性-&gt;配置属性-&gt;链接器-&gt;系统-&gt;子系统-&gt;控制台 增加“/SUBSYSTEM:CONSOLE”链接选项即可</code></p></li></ol><h4 id="1-5-2-gcc-编译过程"><a href="#1-5-2-gcc-编译过程" class="headerlink" title="1.5.2 gcc 编译过程"></a>1.5.2 gcc 编译过程</h4><h5 id="1-分步编译"><a href="#1-分步编译" class="headerlink" title="1. 分步编译"></a>1. 分步编译</h5><blockquote><p>预处理：<code>gcc -E introduce.c -o introduce.i</code></p></blockquote><blockquote><p>编 译：<code>gcc -S introduce.i -o introduce.s</code></p></blockquote><blockquote><p>汇 编：<code>gcc -c introduce.s -o introduce.o</code></p></blockquote><blockquote><p>链 接：<code>gcc  introduce.o -o introduce</code></p></blockquote><table><thead><tr><th><strong>选项</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>-E</td><td>只进行预处理</td></tr><tr><td>-S(大写)</td><td>只进行预处理和编译</td></tr><tr><td>-c(小写)</td><td>只进行预处理、编译和汇编</td></tr><tr><td>-o file</td><td>指定生成的输出文件名为 file</td></tr></tbody></table><table><thead><tr><th><strong>文件后缀</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>.c</td><td>C 语言文件</td></tr><tr><td>.i</td><td>预处理后的 C 语言文件</td></tr><tr><td>.s</td><td>编译后的汇编文件</td></tr><tr><td>.o</td><td>编译后的目标文件</td></tr></tbody></table><p>编译的时候最后两倒数第二步的时候用了大写<code>C</code></p><p><code>gcc -C introduce.s -o introduce.o</code></p><p><code>gcc introduce.o -o introduce</code></p><p>导致了如下问题， 记录一下</p><p>&#x2F;usr&#x2F;bin&#x2F;ld: &#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;8&#x2F;..&#x2F;..&#x2F;..&#x2F;x86_64-linux-gnu&#x2F;Scrt1.o: in function <code>_start&#39;: (.text+0x20): undefined reference to </code>main’<br>collect2: error: ld returned 1 exit status</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000878.png" alt="image-20200919101105887"></p><p>正确的编译过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -E introduce.c -o introduce.i</span><br><span class="line">gcc -S introduce.i -o introduce.s</span><br><span class="line">gcc -c introduce.s -o introduce.o</span><br><span class="line">gcc introduce.o -o introduce</span><br><span class="line">./introduce </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000879.png" alt="image-20200919101944251"></p><h5 id="2-一步编译"><a href="#2-一步编译" class="headerlink" title="2. 一步编译"></a>2. 一步编译</h5><p><code>gcc introduce.c -o introduce1</code> &#x2F;&#x2F; 自动完成：预处理、编译、汇编、链接的过程</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000880.png" alt="image-20200919102259922"></p><h4 id="1-5-3-查找程序所依赖的动态库"><a href="#1-5-3-查找程序所依赖的动态库" class="headerlink" title="1.5.3  查找程序所依赖的动态库"></a>1.5.3  查找程序所依赖的动态库</h4><p>Windows平台下，需要相应软件(<code>Depends.exe</code>)：</p><blockquote><p>工具下载地址：<a href="http://www.dependencywalker.com/">http://www.dependencywalker.com/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000881.png" alt="image-20200919102850515"></p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000882.png" alt="image-20200919102938934"></p><h3 id="1-6-CPU内部结构与寄存器-了解"><a href="#1-6-CPU内部结构与寄存器-了解" class="headerlink" title="1.6 CPU内部结构与寄存器(了解)"></a>1.6 CPU内部结构与寄存器(了解)</h3><h4 id="1-6-1-64位和32位系统区别"><a href="#1-6-1-64位和32位系统区别" class="headerlink" title="1.6.1 64位和32位系统区别"></a>1.6.1 64位和32位系统区别</h4><ul><li><p>寄存器是CPU内部最基本的存储单元</p></li><li><p>CPU对外是通过总线(地址、控制、数据)来和外部设备交互的，<font color="red">总线的宽度是8位，同时CPU的寄存器也是8位</font>，那么这个CPU就叫8位CPU</p></li><li><p>如果总线是32位，寄存器也是32位的，那么这个CPU就是32位CPU</p></li><li><p>有一种CPU内部的寄存器是32位的，但总线是16位，准32为CPU</p></li><li><p>所有的64位CPU兼容32位的指令，32位要兼容16位的指令，所以在64位的CPU上是可以识别32位的指令</p></li><li><p>在64位的CPU构架上运行了64位的软件操作系统，那么这个系统是64位</p></li><li><p>在64位的CPU构架上，运行了32位的软件操作系统，那么这个系统就是32位</p></li><li><p>64位的软件不能运行在32位的CPU之上</p></li></ul><h4 id="1-6-2-寄存器名字-了解"><a href="#1-6-2-寄存器名字-了解" class="headerlink" title="1.6.2 寄存器名字(了解)"></a>1.6.2 寄存器名字(了解)</h4><table><thead><tr><th><strong>8</strong>位</th><th><strong>16</strong>位</th><th><strong>32</strong>位</th><th><strong>64</strong>位</th></tr></thead><tbody><tr><td>A</td><td>AX</td><td>EAX</td><td>RAX</td></tr><tr><td>B</td><td>BX</td><td>EBX</td><td>RBX</td></tr><tr><td>C</td><td>CX</td><td>ECX</td><td>RCX</td></tr><tr><td>D</td><td>DX</td><td>EDX</td><td>RDX</td></tr></tbody></table><h4 id="1-6-3-寄存器、缓存、内存三者关系"><a href="#1-6-3-寄存器、缓存、内存三者关系" class="headerlink" title="1.6.3 寄存器、缓存、内存三者关系"></a>1.6.3 寄存器、缓存、内存三者关系</h4><p>按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存。</p><p>CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;—&gt;寄存器&lt;—&gt;内存，这就是它们之间的信息交换。</p><p>那为什么有缓存呢？因为如果经常操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。</p><p>因为从存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</p><p>由此可以看出，从远近来看：<font color="red">CPU〈—〉寄存器〈—&gt; 缓存 &lt;—&gt; 内存</font></p><h3 id="1-7-汇编语言"><a href="#1-7-汇编语言" class="headerlink" title="1.7 汇编语言"></a>1.7 汇编语言</h3><h4 id="1-7-1-VS中C语言嵌套汇编代码-了解"><a href="#1-7-1-VS中C语言嵌套汇编代码-了解" class="headerlink" title="1.7.1 VS中C语言嵌套汇编代码(了解)"></a>1.7.1 VS中C语言嵌套汇编代码(了解)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义整型变量a, b, c</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov a, <span class="number">3</span><span class="comment">//3的值放在a对应内存的位置</span></span><br><span class="line">mov b, <span class="number">4</span><span class="comment">//4的值放在b对应内存的位置</span></span><br><span class="line">mov eax, a<span class="comment">//把a内存的值放在eax寄存器</span></span><br><span class="line">add eax, b<span class="comment">//eax和b相加，结果放在eax</span></span><br><span class="line">mov c, eax<span class="comment">//eax的值放在c中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,  c);<span class="comment">//把c的值输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//成功完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-2-VS反编译"><a href="#1-7-2-VS反编译" class="headerlink" title="1.7.2 VS反编译"></a>1.7.2 VS反编译</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义整型变量a, b, c</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line">c = a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,  c);<span class="comment">//把c的值输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//成功完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-集成开发环境IDE"><a href="#1-8-集成开发环境IDE" class="headerlink" title="1.8 集成开发环境IDE"></a>1.8 集成开发环境IDE</h3><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，<font color="red">一般包括代码编辑器、编译器、调试器和图形用户界面工具</font>。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</p><h4 id="1-8-1-Qt-Creator"><a href="#1-8-1-Qt-Creator" class="headerlink" title="1.8.1 Qt Creator"></a>1.8.1 Qt Creator</h4><p>Qt Creator是跨平台的 Qt IDE， Qt Creator 是 Qt 被 Nokia 收购后推出的一款新的轻量级集成开发环境（IDE）。此 IDE 能够跨平台运行，支持的系统包括 Linux（32 位及 64 位）、Mac OS X 以及 Windows。根据官方描述，Qt Creator 的设计目标是使开发人员能够利用 Qt 这个应用程序框架更加快速及轻易的完成开发任务。</p><table><thead><tr><th><strong>快捷键</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Ctrl + i</td><td>自动格式化代码</td></tr><tr><td>Ctrl + &#x2F;</td><td>注释&#x2F;取消注释</td></tr><tr><td>Alt + Enter</td><td>自动完成类函数定义</td></tr><tr><td>F4</td><td>.h 文件和对应.cpp 文件切换</td></tr><tr><td>F9</td><td>设置断点</td></tr><tr><td>F5</td><td>调试运行</td></tr><tr><td>Ctrl + r</td><td>编译，但不调试运行</td></tr></tbody></table><table><thead><tr><th>Ctrl + b</th><th>编译，不运行</th></tr></thead><tbody><tr><td>F10</td><td>next调试</td></tr><tr><td>F11</td><td>step调试</td></tr></tbody></table><h4 id="1-8-2-Microsoft-Visual-Studio"><a href="#1-8-2-Microsoft-Visual-Studio" class="headerlink" title="1.8.2 Microsoft Visual Studio"></a>1.8.2 Microsoft Visual Studio</h4><p>Microsoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品。VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等,所写的目标代码适用于微软支持的所有平台。Visual Studio是目前最流行的Windows平台应用程序的集成开发环境。</p><h5 id="1-VS常用快捷键"><a href="#1-VS常用快捷键" class="headerlink" title="1. VS常用快捷键"></a>1. VS常用快捷键</h5><table><thead><tr><th><strong>快捷键</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Ctrl + k,Ctrl + f</td><td>自动格式化代码</td></tr><tr><td>Ctrl + k,Ctrl + c</td><td>注释代码</td></tr><tr><td>Ctrl + k,Ctrl + u</td><td>取消注释代码</td></tr><tr><td>F9</td><td>设置断点</td></tr><tr><td>F5</td><td>调试运行</td></tr><tr><td>Ctrl + F5</td><td>不调试运行</td></tr><tr><td>Ctrl + Shift + b</td><td>编译，不运行</td></tr><tr><td>F10</td><td>next调试</td></tr><tr><td>F11</td><td>step调试</td></tr></tbody></table><h5 id="2-VS2013的C4996错误"><a href="#2-VS2013的C4996错误" class="headerlink" title="2. VS2013的C4996错误"></a>2. VS2013的C4996错误</h5><p>由于微软在VS2013中不建议再使用C的传统库函数scanf,strcpy,sprintf等，所以直接使用这些库函数会提示C4996错误：</p><p>VS建议采用带_s的函数，如scanf_s、strcpy_s，但这些并不是标准C函数。</p><p>要想继续使用此函数，<font color="red">需要在源文件中添加以下指令就可以避免这个错误提示</font>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS     <span class="comment">//这个宏定义最好要放到.c文件的第一行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)<span class="comment">//或者使用这个</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h2><h3 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1 常量与变量"></a>2.1 常量与变量</h3><h4 id="2-1-1-关键字"><a href="#2-1-1-关键字" class="headerlink" title="2.1.1 关键字"></a>2.1.1 关键字</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000883.jpg" alt="2016-06-01_125457"></p><h4 id="2-1-2-数据类型"><a href="#2-1-2-数据类型" class="headerlink" title="2.1.2 数据类型"></a>2.1.2 数据类型</h4><blockquote><p>数据类型的作用：编译器预算对象（变量）分配的内存空间大小</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000885.jpg" alt="2016-06-01_125610"></p><h4 id="2-1-3-常量"><a href="#2-1-3-常量" class="headerlink" title="2.1.3 常量"></a>2.1.3 常量</h4><p>常量：</p><ul><li>在程序运行过程中，其值不能被改变的量</li><li>常量一般出现在表达式或赋值语句中</li></ul><table><thead><tr><th>整型常量</th><th>100，200，-100，0</th></tr></thead><tbody><tr><td>实型常量</td><td>3.14  ， 0.125，-3.123</td></tr><tr><td>字符型常量</td><td>‘a’,‘b’,‘1’,‘\n’</td></tr><tr><td>字符串常量</td><td>“a”,“ab”，“12356”</td></tr></tbody></table><h4 id="2-1-4-变量"><a href="#2-1-4-变量" class="headerlink" title="2.1.4 变量"></a>2.1.4 变量</h4><h5 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h5><ul><li>在程序运行过程中，其值可以改变</li><li><font color="red">变量在使用前必须先定义，定义变量前必须有相应的数据类型</font></li></ul><p>标识符命名规则：</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><p>变量特点：</p><ul><li>变量在编译时为其分配相应的内存空间</li><li>可以通过其<font color="red">名字</font>和<font color="red">地址</font>&gt;访问相应内存</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000886.jpg" alt="2016-05-29_200452_副本"></p><h5 id="2-声明和定义区别"><a href="#2-声明和定义区别" class="headerlink" title="2. 声明和定义区别"></a>2. 声明和定义区别</h5><ul><li>声明变量不需要建立存储空间，如：<code>extern int a;</code></li><li>定义变量需要建立存储空间，如：<code>int b;</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//extern 关键字只做声明，不能做任何定义，后面还会学习，这里先了解</span></span><br><span class="line"><span class="comment">//声明一个变量a，a在这里没有建立存储空间</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;<span class="comment">//err, 没有空间，就不可以赋值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;<span class="comment">//定义一个变量b，b的类型为int，b赋值为10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从广义的角度来讲声明中包含着定义，即<font color="red">定义是声明的一个特例</font>，所以并非所有的声明都是定义：</p><ul><li><p><code>int b</code> 它既是声明，同时又是定义</p></li><li><p>对于 <code>extern b</code>来讲它只是声明不是定义</p></li></ul><blockquote><p>一般的情况下，把建立存储空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”</p></blockquote><h4 id="2-1-5-使用示例"><a href="#2-1-5-使用示例" class="headerlink" title="2.1.5 使用示例"></a>2.1.5 使用示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10 <span class="comment">//声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;<span class="comment">//定义了一个变量，其类型为int，名字叫a</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">10</span>; <span class="comment">//定义一个const常量，名为叫b，值为10</span></span><br><span class="line"><span class="comment">//b = 11; //err,常量的值不能改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MAX = 100;//err,常量的值不能改变</span></span><br><span class="line"></span><br><span class="line">a = MAX;<span class="comment">//将abc的值设置为MAX的值</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//打印变量a的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-整数：int"><a href="#2-2-整数：int" class="headerlink" title="2.2 整数：int"></a>2.2 整数：int</h3><h4 id="2-2-1-整型变量的定义和输出"><a href="#2-2-1-整型变量的定义和输出" class="headerlink" title="2.2.1 整型变量的定义和输出"></a>2.2.1 整型变量的定义和输出</h4><table><thead><tr><th><strong>打印格式</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>%d</td><td>输出一个<font color="red">有符号</font>的10进制int类型</td></tr><tr><td>%o(字母o)</td><td>输出8进制的int类型</td></tr><tr><td>%x</td><td>输出16进制的int类型，字母以小写输出</td></tr><tr><td>%X</td><td>输出16进制的int类型，字母以大写输出</td></tr><tr><td>%u</td><td>输出一个10进制的<font color="red">无符号</font>数</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">123</span>;<span class="comment">//定义变量a，以10进制方式赋值为123</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">0567</span>;<span class="comment">//定义变量b，以8进制方式赋值为0567</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">0xabc</span>;<span class="comment">//定义变量c，以16进制方式赋值为0xabc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;8进制：b = %o\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;10进制：b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;16进制：c = %x\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;16进制：c = %X\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;10进制：c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> d = <span class="number">0xffffffff</span>; <span class="comment">//定义无符号int变量d，以16进制方式赋值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;有符号方式打印：d = %d\n&quot;</span>, d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无符号方式打印：d = %u\n&quot;</span>, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000887.png" alt="image-20200919133924510"></p><h4 id="2-2-2-整型变量的输入"><a href="#2-2-2-整型变量的输入" class="headerlink" title="2.2.2 整型变量的输入"></a>2.2.2 整型变量的输入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入a的值：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不要加&quot;\n&quot;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a); <span class="comment">//打印a的值</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-3-short、int、long、long-long"><a href="#2-2-3-short、int、long、long-long" class="headerlink" title="2.2.3 short、int、long、long long"></a>2.2.3 short、int、long、long long</h4><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td></tr><tr><td>int(整型)</td><td>4字节</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型</li><li><font color="red">当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位</font></li></ul><table><thead><tr><th><strong>整型常量</strong></th><th><strong>所需类型</strong></th></tr></thead><tbody><tr><td>10</td><td>代表int类型</td></tr><tr><td>10l, 10L</td><td>代表long类型</td></tr><tr><td>10ll, 10LL</td><td>代表long long类型</td></tr><tr><td>10u, 10U</td><td>代表unsigned int类型</td></tr><tr><td>10ul, 10UL</td><td>代表unsigned long类型</td></tr><tr><td>10ull, 10ULL</td><td>代表unsigned long long类型</td></tr></tbody></table><table><thead><tr><th><strong>打印格式</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>%hd</td><td>输出short类型</td></tr><tr><td><font color="red">%d  </font></td><td><font color="red">  输出int类型 </font></td></tr><tr><td>%ld</td><td>输出long类型</td></tr><tr><td>%lld</td><td>输出long long类型</td></tr><tr><td>%hu</td><td>输出unsigned short类型</td></tr><tr><td><font color="red">%u</font></td><td><font color="red">输出unsigned int类型  </font></td></tr><tr><td><font color="red">%lu  </font></td><td><font color="red">输出unsigned long类&lt;&#x2F;型</font></td></tr><tr><td>%llu</td><td>输出unsigned long long类型</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">short</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> c = <span class="number">10l</span>; <span class="comment">//或者10L</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d = <span class="number">10ll</span>; <span class="comment">//或者10LL</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a) = %u\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(b) = %u\n&quot;</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(c) = %u\n&quot;</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(c) = %u\n&quot;</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short a = %hd\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long c = %ld\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long long d = %lld\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a2 = <span class="number">20u</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b2 = <span class="number">20u</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> c2= <span class="number">20ul</span>; </span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> d2 = <span class="number">20ull</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;unsigned short a = %hu\n&quot;</span>, a2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;unsigned int b = %u\n&quot;</span>, b2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;unsigned long c = %lu\n&quot;</span>, c2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;unsigned long long d = %llu\n&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.2.3 </span><br><span class="line">sizeof(a) = 2</span><br><span class="line">sizeof(b) = 4</span><br><span class="line">sizeof(c) = 8</span><br><span class="line">sizeof(c) = 8</span><br><span class="line">short a = 10</span><br><span class="line">int b = 10</span><br><span class="line">long c = 10</span><br><span class="line">long long d = 10</span><br><span class="line">unsigned short a = 20</span><br><span class="line">unsigned int b = 20</span><br><span class="line">unsigned long c = 20</span><br><span class="line">unsigned long long d = 20</span><br></pre></td></tr></table></figure><h4 id="2-2-4-有符号数和无符号数区别"><a href="#2-2-4-有符号数和无符号数区别" class="headerlink" title="2.2.4 有符号数和无符号数区别"></a>2.2.4 有符号数和无符号数区别</h4><h5 id="1-有符号数"><a href="#1-有符号数" class="headerlink" title="1. 有符号数"></a>1. 有符号数</h5><blockquote><p>有符号数是最高位为符号位，0代表正数，1代表负数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">signed</span> <span class="type">int</span> a = <span class="number">-1089474374</span>; <span class="comment">//定义有符号整型变量a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>, a); <span class="comment">//结果为 BF0FF0BA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//B    F    0    F    F    0    B A</span></span><br><span class="line"><span class="comment">//1011 1111 0000 1111 1111 0000 1011 1010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出： BF0FF0BA</p></blockquote><h5 id="2-无符号数"><a href="#2-无符号数" class="headerlink" title="2. 无符号数"></a>2. 无符号数</h5><p><font color="red">无符号数最高位不是符号位</font>, 而就是数的一部分，无符号数不可能是负数</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000888.jpg" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">3236958022</span>; <span class="comment">//定义无符号整型变量a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>, a); <span class="comment">//结果为 C0F00F46</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们写程序要处理一个不可能出现负值的时候，一般用无符号数，这样可以增大数的表达最大值</p></blockquote><h5 id="3-有符号和无符号整型取值范围"><a href="#3-有符号和无符号整型取值范围" class="headerlink" title="3. 有符号和无符号整型取值范围"></a>3. 有符号和无符号整型取值范围</h5><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>取值范围</strong></th></tr></thead><tbody><tr><td>short</td><td>2字节</td><td>-32768 到 32767 ($-2^{15}$  ~ 2$^{15}$-1)</td></tr><tr><td>int</td><td>4字节</td><td>-2147483648 到  2147483647 ($-2^{31}$ ~ $2^{31}$-1)</td></tr><tr><td>long</td><td>4字节</td><td>-2147483648 到  2147483647($-2^{31}$ ~ $2^{31}$-1)</td></tr><tr><td>unsigned short</td><td>2字节</td><td>0 到 65535 (0 ~ 2$^{16}$-1)</td></tr><tr><td>unsigned int</td><td>4字节</td><td>0 到 4294967295 (0  ~ 2$^{32}$-1)</td></tr><tr><td>unsigned long</td><td>4字节</td><td>0 到 4294967295 (0  ~ 2$^{32}$-1)</td></tr></tbody></table><h3 id="2-3-sizeof-关键字"><a href="#2-3-sizeof-关键字" class="headerlink" title="2.3 sizeof 关键字"></a>2.3 sizeof 关键字</h3><ul><li><code>sizeof</code>不是函数，所以不需要包含任何头文件，它的功能是<font color="red">计算一个数据类型的大小</font>，单位为字节</li><li><code>sizeof</code>的返回值为<code>size_t</code></li><li><code>size_t</code>类型在32位操作系统下是<code>unsigned int</code>，是一个无符号的整数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b = <span class="keyword">sizeof</span>(a);<span class="comment">//sizeof得到指定值占用内存的大小，单位：字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> c = <span class="keyword">sizeof</span>(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %u\n&quot;</span>, c);<span class="comment">//用无符号数的方式输出c的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.3 </span><br><span class="line">b = 4</span><br><span class="line">c = 4</span><br></pre></td></tr></table></figure><h3 id="2-4-字符型：char"><a href="#2-4-字符型：char" class="headerlink" title="2.4  字符型：char"></a>2.4  字符型：char</h3><h4 id="2-4-1-字符变量的定义和输出"><a href="#2-4-1-字符变量的定义和输出" class="headerlink" title="2.4.1 字符变量的定义和输出"></a>2.4.1 字符变量的定义和输出</h4><p>字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节。在给字符型变量赋值时，需要用一对英文半角格式的单引号(<code>&#39; &#39;</code>)把字符括起来</p><p>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。<font color="red">char的本质就是一个1字节大小的整型</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(ch) = %u\n&quot;</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch[%%c] = %c\n&quot;</span>, ch); <span class="comment">//打印字符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch[%%d] = %d\n&quot;</span>, ch); <span class="comment">//打印‘a’ ASCII的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> A = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);<span class="comment">//97</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A = %d\n&quot;</span>, A);<span class="comment">//65</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A = %c\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> - <span class="number">32</span>); <span class="comment">//小写a转大写A</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %c\n&quot;</span>, <span class="string">&#x27;A&#x27;</span> + <span class="number">32</span>); <span class="comment">//大写A转小写a</span></span><br><span class="line"></span><br><span class="line">ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;空字符：%d\n&quot;</span>, ch); <span class="comment">//空字符ASCII的值为32</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A = %c\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27; &#x27;</span>); <span class="comment">//小写a转大写A</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %c\n&quot;</span>, <span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27; &#x27;</span>); <span class="comment">//大写A转小写a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ao@Taoc:~/Desktop/C/<span class="number">2</span>$ ./<span class="number">2.4</span><span class="number">.1</span> </span><br><span class="line"><span class="keyword">sizeof</span>(ch) = <span class="number">1</span></span><br><span class="line">ch[%c] = a</span><br><span class="line">ch[%d] = <span class="number">97</span></span><br><span class="line">a = <span class="number">97</span></span><br><span class="line">A = <span class="number">65</span></span><br><span class="line">A = A</span><br><span class="line">a = a</span><br><span class="line">空字符：<span class="number">32</span></span><br><span class="line">A = A</span><br><span class="line">a = a</span><br></pre></td></tr></table></figure><h4 id="2-4-2-字符变量的输入"><a href="#2-4-2-字符变量的输入" class="headerlink" title="2.4.2 字符变量的输入"></a>2.4.2 字符变量的输入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入ch的值：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不要加“\n”</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch = %c\n&quot;</span>, ch); <span class="comment">//打印ch的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.4.2 </span><br><span class="line">请输入ch的值：a</span><br><span class="line">ch = a</span><br></pre></td></tr></table></figure><h4 id="2-4-3-ASCII-对照表"><a href="#2-4-3-ASCII-对照表" class="headerlink" title="2.4.3 ASCII 对照表"></a>2.4.3 ASCII 对照表</h4><table><thead><tr><th><font color="blue"><strong>ASCII值</strong></font></th><th><font color="blue"> <strong>控制字符</strong>  </font></th><th><font color="blue"><strong>ASCII值</strong></font></th><th><font color="blue"> <strong>字符</strong>  </font></th><th><font color="blue"><strong>ASCII值</strong></font></th><th><font color="blue"> <strong>字符</strong>  </font></th><th><font color="blue"><strong>ASCII值</strong></font></th><th><font color="blue"> <strong>字符</strong>  </font></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>&#x2F;</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>&#x2F;</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>&#x3D;</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>&#96;</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下两部分组成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备</li><li>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令</li></ul><h4 id="2-4-4-转义字符"><a href="#2-4-4-转义字符" class="headerlink" title="2.4.4 转义字符"></a>2.4.4 转义字符</h4><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII****码值（十进制）</strong></th></tr></thead><tbody><tr><td><font color="red">\a</font></td><td>警报</td><td>007</td></tr><tr><td><font color="red">\b  </font></td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td><font color="red">\f  </font></td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><font color="red">\n  </font></td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td><font color="red"> \r  </font></td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><font color="red">\t  </font></td><td>水平制表(HT)  （跳到下一个TAB位置）</td><td>009</td></tr><tr><td><font color="red"> \v  </font></td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><code>\\  </code></td><td>代表一个反斜线字符”&quot;</td><td>092</td></tr><tr><td><code>\&#39; </code></td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td><code>\&quot; </code></td><td>代表一个双引号字符</td><td>034</td></tr><tr><td><code>\? </code></td><td>代表一个问号</td><td>063</td></tr><tr><td><code>\0 </code></td><td>数字0</td><td>000</td></tr><tr><td><code>\ddd </code></td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td><code> \xhh</code></td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><blockquote><p>注意：红色字体标注的为不可打印字符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\refg\n&quot;</span>); <span class="comment">//\r切换到句首， \n为换行键</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\befg\n&quot;</span>);<span class="comment">//\b为退格键， \n为换行键</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;\123&#x27;</span>);<span class="comment">// &#x27;\123&#x27;为8进制转义字符，0123对应10进制数为83</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;\x23&#x27;</span>);<span class="comment">// &#x27;\x23&#x27;为16进制转义字符，0x23对应10进制数为35</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.4.4 </span><br><span class="line">efg</span><br><span class="line">abefg</span><br><span class="line">83</span><br><span class="line">35</span><br></pre></td></tr></table></figure><h3 id="2-5-实型-浮点型-：float、double"><a href="#2-5-实型-浮点型-：float、double" class="headerlink" title="2.5 实型(浮点型)：float、double"></a>2.5 实型(浮点型)：float、double</h3><p>实型变量也可以称为浮点型变量，浮点型变量是用来存储小数数值的。在C语言中， 浮点型变量分为两种： 单精度浮点数(<code>float</code>)、 双精度浮点数(<code>double</code>)， 但是<code>double</code>型变量所表示的浮点数比 float 型变量更精确。</p><p>由于浮点型变量是由有限的存储单元组成的，因此只能提供有限的有效数字。在有效位以外的数字将被舍去，这样可能会产生一些误差。</p><p>不以f结尾的常量是<code>double</code>类型，以f结尾的常量(如3.14f)是<code>float</code>类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//传统方式赋值</span></span><br><span class="line"><span class="type">float</span> a = <span class="number">3.14f</span>; <span class="comment">//或3.14F</span></span><br><span class="line"><span class="type">double</span> b = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %f\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %lf\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学法赋值</span></span><br><span class="line">a = <span class="number">3.2e3</span>f; <span class="comment">//3.2*1000 = 3200，e可以写E</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a1 = %f\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">a = <span class="number">100e-3</span>f; <span class="comment">//100*0.001 = 0.1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a2 = %f\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">a = <span class="number">3.1415926f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a3 = %f\n&quot;</span>, a); <span class="comment">//结果为3.141593</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.5 </span><br><span class="line">a = 3.140000</span><br><span class="line">b = 3.140000</span><br><span class="line">a1 = 3200.000000</span><br><span class="line">a2 = 0.100000</span><br><span class="line">a3 = 3.141593</span><br></pre></td></tr></table></figure><h3 id="2-6-进制"><a href="#2-6-进制" class="headerlink" title="2.6 进制"></a>2.6 进制</h3><p>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位</p><table><thead><tr><th><strong>十进制</strong></th><th><strong>二进制</strong></th><th><strong>八进制</strong></th><th><strong>十六进制</strong></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h4 id="2-6-1-二进制"><a href="#2-6-1-二进制" class="headerlink" title="2.6.1 二进制"></a>2.6.1 二进制</h4><p>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”</p><blockquote><p>当前的计算机系统使用的基本上是二进制系统，<font color="red">数据在计算机中主要是以补码的形式存储的</font></p></blockquote><table><thead><tr><th><strong>术语</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>bit(比特)</td><td>一个二进制代表一位，一个位只能表示0或1两种状态。数据传输是习惯以“位”（bit）为单位。</td></tr><tr><td>Byte(字节)</td><td>一个字节为8个二进制，称为8位，<font color="red">计算机中存储的最小单位是字节</font>。数据存储是习惯以“字节”（Byte）为单位。</td></tr><tr><td>WORD(双字节)</td><td>2个字节，16位</td></tr><tr><td>DWORD</td><td>两个WORD，4个字节，32位</td></tr><tr><td>1b</td><td>1bit，1位</td></tr><tr><td>1B</td><td>1Byte,1字节，8位</td></tr><tr><td>1k，1K</td><td>1024</td></tr><tr><td>1M(1兆)</td><td>1024k, 1024*1024</td></tr><tr><td>1G</td><td>1024M</td></tr><tr><td>1T</td><td>1024G</td></tr><tr><td>1Kb(千位)</td><td>1024bit,1024位</td></tr><tr><td>1KB(千字节)</td><td>1024Byte，1024字节</td></tr><tr><td>1Mb(兆位)</td><td>1024Kb &#x3D; 1024 * 1024bit</td></tr><tr><td>1MB(兆字节)</td><td>1024KB &#x3D; 1024 * 1024Byte</td></tr></tbody></table><p>十进制转化二进制的方法：用十进制数除以2，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000889.png" alt="img"></p><p>十进制的小数转换成二进制：小数部分和2相乘，取整数，不足1取0，<font color="red">每次相乘都是小数部分</font>，顺序看取整后的数就是转化后的结果</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000890.jpg" alt="无标题"></p><h4 id="2-6-2-八进制"><a href="#2-6-2-八进制" class="headerlink" title="2.6.2 八进制"></a>2.6.2 八进制</h4><p>八进制，<code>Octal</code>，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制</p><p>八进制的数和二进制数可以按位对应（<font color="red">八进制一位对应二进制三位</font>），因此常应用在计算机语言中</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000891.jpg" alt="2016-06-01_172043"></p><p>十进制转化八进制的方法：</p><p>用十进制数除以8，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000892.jpg" alt="10转_副本1"></p><h4 id="2-6-3-十六进制"><a href="#2-6-3-十六进制" class="headerlink" title="2.6.3 十六进制"></a>2.6.3 十六进制</h4><p>十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，<font color="red">字母不区分大小写</font>。与10进制的对应关系是：0-9对应0-9，A-F对应10-15</p><p>十六进制的数和二进制数可以按位对应（<font color="red">十六进制一位对应二进制四位</font>），因此常应用在计算机语言中</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000893.jpg" alt="2016-06-01_180102"></p><p>十进制转化十六进制的方法：</p><p>用十进制数除以16，分别取余数和商数，商数为0的时候，将余数倒着数就是转化后的结果</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000894.jpg" alt="10转"></p><h4 id="2-6-4-C语言如何表示相应进制数"><a href="#2-6-4-C语言如何表示相应进制数" class="headerlink" title="2.6.4 C语言如何表示相应进制数"></a>2.6.4 C语言如何表示相应进制数</h4><table><thead><tr><th>十进制</th><th>以正常数字1-9开头，如123</th></tr></thead><tbody><tr><td>八进制</td><td>以数字0开头，如0123</td></tr><tr><td>十六进制</td><td>以0x开头，如0x123</td></tr><tr><td>二进制</td><td>C语言不能直接书写二进制数</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">123</span>;<span class="comment">//十进制方式赋值</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">0123</span>;<span class="comment">//八进制方式赋值， 以数字0开头</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">0xABC</span>;<span class="comment">//十六进制方式赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;十进制：%d\n&quot;</span>,a );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;八进制：%o\n&quot;</span>, b);<span class="comment">//%o,为字母o,不是数字</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;十六进制：%x\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.6.4 </span><br><span class="line">十进制：123</span><br><span class="line">八进制：123</span><br><span class="line">十六进制：abc</span><br></pre></td></tr></table></figure><h3 id="2-7-计算机内存数值存储方式"><a href="#2-7-计算机内存数值存储方式" class="headerlink" title="2.7 计算机内存数值存储方式"></a>2.7 计算机内存数值存储方式</h3><blockquote><p> <a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">原码, 反码, 补码 详解</a></p></blockquote><h4 id="2-7-1-原码"><a href="#2-7-1-原码" class="headerlink" title="2.7.1 原码"></a>2.7.1 原码</h4><p>一个数的原码(原始的二进制码)有如下特点：</p><ul><li>最高位做为符号位，0表示正,为1表示负</li><li>其它数值部分就是数值本身绝对值的二进制数</li><li>负数的原码是在其绝对值的基础上，最高位变为1</li></ul><p>下面数值以1字节的大小描述：</p><table><thead><tr><th><strong>十进制数</strong></th><th><strong>原码</strong></th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1000 1111</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td></tr></tbody></table><p>原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算</p><h4 id="2-7-2-反码"><a href="#2-7-2-反码" class="headerlink" title="2.7.2 反码"></a>2.7.2 反码</h4><ul><li>对于正数，反码与原码相同</li><li><font color="red">对于负数，符号位不变，其它部分取反(1变0,0变1)</font></li></ul><table><thead><tr><th><strong>十进制数</strong></th><th><strong>反码</strong></th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1111 0000</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1111 1111</td></tr></tbody></table><blockquote><p> 反码运算也不方便，通常用来作为求补码的中间过渡</p></blockquote><h4 id="2-7-3-补码"><a href="#2-7-3-补码" class="headerlink" title="2.7.3 补码"></a>2.7.3 补码</h4><p><font color="red"><strong>在计算机系统中，数值一律用补码来存储</strong></font></p><p>补码特点：</p><ul><li>对于正数，原码、反码、补码相同</li><li><font color="red">对于负数，其补码为它的反码加1</font></li><li>补码符号位不动，其他位求反，最后整个数加1，得到原码</li></ul><table><thead><tr><th><strong>十进制数</strong></th><th><strong>补码</strong></th></tr></thead><tbody><tr><td>+15</td><td>0000 1111</td></tr><tr><td>-15</td><td>1111 0001</td></tr><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>0000 0000</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">-15</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//结果为 fffffff1</span></span><br><span class="line"><span class="comment">//fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001</span></span><br><span class="line"><span class="comment">//符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110</span></span><br><span class="line"><span class="comment">//上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-4-补码的意义"><a href="#2-7-4-补码的意义" class="headerlink" title="2.7.4 补码的意义"></a>2.7.4 补码的意义</h4><p>示例1：用8位二进制数分别表示+0和-0</p><table><thead><tr><th><strong>十进制数</strong></th><th><strong>原码</strong></th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td></tr></tbody></table><table><thead><tr><th><strong>十进制数</strong></th><th><strong>反码</strong></th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>1111 1111</td></tr></tbody></table><p>不管以原码方式存储，还是以反码方式存储，0也有两种表示形式。为什么同样一个0有两种不同的表示方法呢？</p><p>但是如果以补码方式存储，补码统一了零的编码：</p><table><thead><tr><th><strong>十进制数</strong></th><th><strong>补码</strong></th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td></tr><tr><td>-0</td><td>10000 0000由于只用8位描述，最高位1丢弃，变为0000 0000</td></tr></tbody></table><p>示例2：计算9-6的结果</p><p>以原码方式相加：</p><table><thead><tr><th><strong>十进制数</strong></th><th><strong>原码</strong></th></tr></thead><tbody><tr><td>9</td><td>0000 1001</td></tr><tr><td>-6</td><td>1000 0110</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000895.jpg" alt="2016-06-01_225835"></p><p>结果为-15，不正确。</p><p>以补码方式相加：</p><table><thead><tr><th><strong>十进制数</strong></th><th><strong>补码</strong></th></tr></thead><tbody><tr><td>9</td><td>0000 1001</td></tr><tr><td>-6</td><td>1111 1010</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000896.jpg" alt="2016-06-01_230938"></p><p>最高位的1溢出,剩余8位二进制表示的是3，正确</p><p><font color="red"><strong>在计算机系统中，数值一律用补码来存储</strong></font>主要原因是：</p><ul><li>统一了零的编码</li><li>将符号位和其它位统一处理</li><li>将减法运算转变为加法运算</li><li>两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</li></ul><h4 id="2-7-5-数值溢出"><a href="#2-7-5-数值溢出" class="headerlink" title="2.7.5 数值溢出"></a>2.7.5 数值溢出</h4><p>当超过一个数据类型能够存放最大的范围时，数值会溢出</p><p>有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>取值范围</strong></th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128到 127(-2$^{7}$  ~ 2$^{7}$-1)</td></tr><tr><td>unsigned char</td><td>1字节</td><td>0 到 255(0 ~ 2$^{8}$-1)</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//符号位溢出会导致数的正负发生改变</span></span><br><span class="line">ch = <span class="number">0x7f</span> + <span class="number">2</span>; <span class="comment">//127+2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ch);</span><br><span class="line"><span class="comment">//0111 1111</span></span><br><span class="line"><span class="comment">//+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最高位的溢出会导致最高位丢失</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ch2;</span><br><span class="line">ch2 = <span class="number">0xff</span>+<span class="number">1</span>; <span class="comment">//255+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, ch2);</span><br><span class="line"><span class="comment">//  1111 1111</span></span><br><span class="line"><span class="comment">//+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0</span></span><br><span class="line"></span><br><span class="line">ch2 = <span class="number">0xff</span> + <span class="number">2</span>; <span class="comment">//255+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, ch2);</span><br><span class="line"><span class="comment">//  1111 1111</span></span><br><span class="line"><span class="comment">//+1后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">2</span>$ gcc <span class="number">2.7</span><span class="number">.5</span>.c -o <span class="number">2.7</span><span class="number">.5</span></span><br><span class="line"><span class="number">2.7</span><span class="number">.5</span>.c: In function ‘main’:</span><br><span class="line"><span class="number">2.7</span><span class="number">.5</span>.c:<span class="number">15</span>:<span class="number">8</span>: warning: <span class="type">unsigned</span> conversion from ‘<span class="type">int</span>’ to ‘<span class="type">unsigned</span> <span class="type">char</span>’ changes value from ‘<span class="number">256</span>’ to ‘<span class="number">0</span>’ [-Woverflow]</span><br><span class="line">  ch2 = <span class="number">0xff</span>+<span class="number">1</span>; <span class="comment">//255+1</span></span><br><span class="line">        ^~~~</span><br><span class="line"><span class="number">2.7</span><span class="number">.5</span>.c:<span class="number">20</span>:<span class="number">8</span>: warning: <span class="type">unsigned</span> conversion from ‘<span class="type">int</span>’ to ‘<span class="type">unsigned</span> <span class="type">char</span>’ changes value from ‘<span class="number">257</span>’ to ‘<span class="number">1</span>’ [-Woverflow]</span><br><span class="line">  ch2 = <span class="number">0xff</span> + <span class="number">2</span>; <span class="comment">//255+1</span></span><br><span class="line">        ^~~~</span><br><span class="line">tao@Taoc:~/Desktop/C/<span class="number">2</span>$ ./<span class="number">2.7</span><span class="number">.5</span> </span><br><span class="line"><span class="number">-127</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-8-类型限定符"><a href="#2-8-类型限定符" class="headerlink" title="2.8 类型限定符"></a>2.8 类型限定符</h3><table><thead><tr><th><strong>限定符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>extern</td><td>声明一个变量，extern声明的变量没有建立存储空间。  extern int a;&#x2F;&#x2F;变量在定义的时候创建存储空间</td></tr><tr><td>const</td><td>定义一个常量，常量的值不能修改。  const int a &#x3D; 10;</td></tr><tr><td>Volatile</td><td>防止编译器优化代码</td></tr><tr><td>register</td><td>定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</td></tr></tbody></table><h3 id="2-9-字符串格式化输出和输入"><a href="#2-9-字符串格式化输出和输入" class="headerlink" title="2.9 字符串格式化输出和输入"></a>2.9 字符串格式化输出和输入</h3><h4 id="2-9-1-字符串常量"><a href="#2-9-1-字符串常量" class="headerlink" title="2.9.1 字符串常量"></a>2.9.1 字符串常量</h4><ul><li>字符串是内存中一段连续的char空间，以’<code>\0</code>‘(数字0)结尾</li><li>字符串常量是由双引号括起来的字符序列，如“china”、“C program”，“$12.5”等都是合法的字符串常量</li></ul><p>字符串常量与字符常量的不同：</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000897.jpg" alt="2016-06-02_122416"></p><p>每个字符串的结尾，编译器会自动的添加一个结束标志位’<code>\0</code>‘，即 “a” 包含两个字符’<code>a</code>‘和’<code>\0</code>’</p><h4 id="2-9-2-printf函数和putchar函数"><a href="#2-9-2-printf函数和putchar函数" class="headerlink" title="2.9.2  printf函数和putchar函数"></a>2.9.2  printf函数和putchar函数</h4><p><code>printf</code>是输出一个字符串，<code>putchar</code>输出一个char</p><p>printf格式字符：</p><table><thead><tr><th><strong>打印格式</strong></th><th><strong>对应数据类型</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>%d</td><td>int</td><td>接受整数值并将它表示为有符号的十进制整数</td></tr><tr><td>%hd</td><td>short int</td><td>短整数</td></tr><tr><td>%hu</td><td>unsigned short</td><td>无符号短整数</td></tr><tr><td>%o</td><td>unsigned int</td><td>无符号8进制整数</td></tr><tr><td>%u</td><td>unsigned int</td><td>无符号10进制整数</td></tr><tr><td>%x,%X</td><td>unsigned int</td><td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td></tr><tr><td>%f</td><td>float</td><td>单精度浮点数</td></tr><tr><td>%lf</td><td>double</td><td>双精度浮点数</td></tr><tr><td>%e,%E</td><td>double</td><td>科学计数法表示的数，此处”e”的大小写代表在输出时用的”e”的大小写</td></tr><tr><td>%c</td><td>char</td><td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td></tr><tr><td>%s</td><td>char *</td><td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td></tr><tr><td>%p</td><td>void *</td><td>以16进制形式输出指针</td></tr><tr><td>%%</td><td>%</td><td>输出一个百分号</td></tr></tbody></table><p>printf附加格式：</p><table><thead><tr><th><strong>字符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>l(字母l)</td><td>附加在d,u,x,o前面，表示长整数</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>m(代表一个整数)</td><td>数据最小宽度</td></tr><tr><td>0(数字0)</td><td>将输出的前面补上0直到占满指定列宽为止不可以搭配使用-</td></tr><tr><td>m.n(代表一个整数)</td><td>m指域宽，即对应的输出项在输出设备上所占的字符数。n指精度，用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n&#x3D;6位。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);<span class="comment">//格式化输出一个字符串</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;a);<span class="comment">//输出变量a在内存中的地址编号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%%d\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">putchar</span>(c);<span class="comment">//putchar只有一个参数，就是要输出的char</span></span><br><span class="line"><span class="type">long</span> a2 = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld, %lx, %lo\n&quot;</span>, a2, a2, a2);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a3 = <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld, %llx, %llo\n&quot;</span>, a3, a3, a3);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> abc = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc = &#x27;%6d&#x27;\n&quot;</span>, abc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc = &#x27;%-6d&#x27;\n&quot;</span>, abc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc = &#x27;%06d&#x27;\n&quot;</span>, abc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc = &#x27;%-06d&#x27;\n&quot;</span>, abc);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> d = <span class="number">12.3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = \&#x27; %-10.3lf \&#x27;\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.9.2 </span><br><span class="line">a = 100</span><br><span class="line">0x7ffd3443b718</span><br><span class="line">%d</span><br><span class="line">a100, 64, 144</span><br><span class="line">1000, 3e8, 1750</span><br><span class="line">abc = <span class="string">&#x27;    10&#x27;</span></span><br><span class="line">abc = <span class="string">&#x27;10    &#x27;</span></span><br><span class="line">abc = <span class="string">&#x27;000010&#x27;</span></span><br><span class="line">abc = <span class="string">&#x27;10    &#x27;</span></span><br><span class="line">d = <span class="string">&#x27; 12.300     &#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-9-3-scanf函数与getchar函数"><a href="#2-9-3-scanf函数与getchar函数" class="headerlink" title="2.9.3 scanf函数与getchar函数"></a>2.9.3 scanf函数与getchar函数</h4><ul><li>getchar是从标准输入设备读取一个char</li><li>scanf通过%转义的方式可以得到用户通过标准输入设备输入的数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch1;</span><br><span class="line"><span class="type">char</span> ch2;</span><br><span class="line"><span class="type">char</span> ch3;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入ch1的字符：&quot;</span>);</span><br><span class="line">ch1 = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch1 = %c\n&quot;</span>, ch1);</span><br><span class="line"></span><br><span class="line">getchar(); <span class="comment">//测试此处getchar()的作用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入ch2的字符：&quot;</span>);</span><br><span class="line">ch2 = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\&#x27;ch2 = %ctest\&#x27;\n&quot;</span>, ch2);</span><br><span class="line"></span><br><span class="line">getchar(); <span class="comment">//测试此处getchar()的作用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入ch3的字符：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch3);<span class="comment">//这里第二个参数一定是变量的地址，而不是变量名</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch3 = %c\n&quot;</span>, ch3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入a的值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入b的值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/2$ gcc 2.9.3.c -o 2.9.3</span><br><span class="line">tao@Taoc:~/Desktop/C/2$ ./2.9.3 </span><br><span class="line">请输入ch1的字符：a</span><br><span class="line">ch1 = a</span><br><span class="line">请输入ch2的字符：b</span><br><span class="line"><span class="string">&#x27;ch2 = btest&#x27;</span></span><br><span class="line">请输入ch3的字符：c</span><br><span class="line">ch3 = c</span><br><span class="line">请输入a的值：d</span><br><span class="line">a = 1513391056</span><br><span class="line">请输入b的值：b = 32765</span><br></pre></td></tr></table></figure><h2 id="3-运算符与表达式"><a href="#3-运算符与表达式" class="headerlink" title="3. 运算符与表达式"></a>3. 运算符与表达式</h2><h3 id="3-1-常用运算符分类"><a href="#3-1-常用运算符分类" class="headerlink" title="3.1 常用运算符分类"></a>3.1 常用运算符分类</h3><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr><tr><td>位运算符</td><td>用于处理数据的位运算</td></tr><tr><td>sizeof运算符</td><td>用于求字节数长度</td></tr></tbody></table><h3 id="3-2-算术运算符"><a href="#3-2-算术运算符" class="headerlink" title="3.2 算术运算符"></a>3.2 算术运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前自增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>++</td><td>后自增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前自减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>–</td><td>后自减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><h3 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%2;</td><td>a&#x3D;1;</td></tr></tbody></table><h3 id="3-4-比较运算符"><a href="#3-4-比较运算符" class="headerlink" title="3.4 比较运算符"></a>3.4 比较运算符</h3><blockquote><p>C 语言的比较运算中， “<code>真</code>”用数字“<code>1</code>”来表示， “<code>假</code>”用数字“<code>0</code>”来表示</p></blockquote><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><h3 id="3-5-逻辑运算符"><a href="#3-5-逻辑运算符" class="headerlink" title="3.5 逻辑运算符"></a>3.5 逻辑运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><h3 id="3-6-运算符优先级"><a href="#3-6-运算符优先级" class="headerlink" title="3.6 运算符优先级"></a><font color="red">3.6 运算符优先级</font></h3><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000898.png" alt="image-20200920092724191"></p><h3 id="3-7-类型转换"><a href="#3-7-类型转换" class="headerlink" title="3.7 类型转换"></a>3.7 类型转换</h3><p>数据有不同的类型，不同类型数据之间进行混合运算时必然涉及到类型的转换问题</p><p>转换的方法有两种：</p><ul><li>自动转换(隐式转换)：遵循一定的规则,由编译系统自动完成。</li><li>强制类型转换：把表达式的运算结果强制转换成所需的数据类型。</li></ul><p>类型转换的原则：<font color="red">占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低</font></p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000899.jpg" alt="2016-06-02_202741"></p><h4 id="3-7-1-隐式转换"><a href="#3-7-1-隐式转换" class="headerlink" title="3.7.1 隐式转换"></a>3.7.1 隐式转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s1=%d\n&quot;</span>, num / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s2=%lf\n&quot;</span>, num / <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">3</span>$ ./<span class="number">3.7</span><span class="number">.1</span> </span><br><span class="line">S1 = <span class="number">2</span></span><br><span class="line">S2 = <span class="number">2.500000</span></span><br></pre></td></tr></table></figure><h4 id="3-7-2-强制转换"><a href="#3-7-2-强制转换" class="headerlink" title="3.7.2 强制转换"></a>3.7.2 强制转换</h4><p>强制类型转换指的是使用强制类型转换运算符，将一个变量或表达式转化成所需的类型，其基本语法格式如下所示：</p><p><code>(类型说明符) (表达式)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">float</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">x = <span class="number">3.6f</span>;</span><br><span class="line"></span><br><span class="line">i = x;</span><br><span class="line">i = (<span class="type">int</span>)x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%f, i=%d\n&quot;</span>, x, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/3$ ./3.7.2 </span><br><span class="line">x=3.600000, i=3</span><br></pre></td></tr></table></figure><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4. 程序流程结构"></a>4. 程序流程结构</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>C语言支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构。</p><ul><li><p>顺序结构：程序按顺序执行，不发生跳转。</p></li><li><p>选择结构：依据是否满足条件，有选择的执行相应功能。</p></li><li><p>循环结构：依据条件是否满足，循环多次执行某段代码。</p></li></ul><h3 id="4-2-选择结构"><a href="#4-2-选择结构" class="headerlink" title="4.2 选择结构"></a>4.2 选择结构</h3><h4 id="4-2-1-if语句"><a href="#4-2-1-if语句" class="headerlink" title="4.2.1 if语句"></a>4.2.1 if语句</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000900.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="4-2-2-if…else语句"><a href="#4-2-2-if…else语句" class="headerlink" title="4.2.2 if…else语句"></a>4.2.2 if…else语句</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000901.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-3-if…else-if…else语句"><a href="#4-2-3-if…else-if…else语句" class="headerlink" title="4.2.3 if…else if…else语句"></a>4.2.3 if…else if…else语句</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000902.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;个位\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;十位\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;百位\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很大\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-三目运算符"><a href="#4-2-4-三目运算符" class="headerlink" title="4.2.4 三目运算符"></a>4.2.4 三目运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000903.gif"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">c = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c1 = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">c = ( a &gt; b ? a : b );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c2 = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-5-switch语句"><a href="#4-2-5-switch语句" class="headerlink" title="4.2.5 switch语句"></a>4.2.5 switch语句</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">c = getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (c) <span class="comment">//参数只能是整型变量</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//switch遇到break就中断了</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not OK\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//如果上面的条件都不满足，那么执行default</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;are u ok?\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/4$ ./4.2.5 </span><br><span class="line">t</span><br><span class="line">are u ok?</span><br></pre></td></tr></table></figure><h3 id="4-3-循环语句"><a href="#4-3-循环语句" class="headerlink" title="4.3 循环语句"></a>4.3 循环语句</h3><h4 id="4-3-1-while语句"><a href="#4-3-1-while语句" class="headerlink" title="4.3.1 while语句"></a>4.3.1 while语句</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000904.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">while</span> (a &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-do…while语句"><a href="#4-3-2-do…while语句" class="headerlink" title="4.3.2 do…while语句"></a>4.3.2 do…while语句</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000905.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125; <span class="keyword">while</span> (a &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3-3-for-语句"><a href="#4-3-3-for-语句" class="headerlink" title="4.3.3 for 语句"></a>4.3.3 for 语句</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">int sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;sum = %d\n&quot;, sum);</span><br><span class="line"></span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-嵌套循环"><a href="#4-3-4-嵌套循环" class="headerlink" title="4.3.4 嵌套循环"></a>4.3.4 嵌套循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-跳转语句break、continue、goto"><a href="#4-4-跳转语句break、continue、goto" class="headerlink" title="4.4 跳转语句break、continue、goto"></a>4.4 跳转语句break、continue、goto</h3><h4 id="4-3-1-break-语句"><a href="#4-3-1-break-语句" class="headerlink" title="4.3.1 break 语句"></a>4.3.1 break 语句</h4><p>在switch条件语句和循环语句中都可以使用<code>break</code>语句：</p><ul><li>当它出现在<code>switch</code>条件语句中时，作用是终止某个<code>case</code>并跳出<code>switch</code>结构。</li><li>当它出现在循环语句中，作用是跳出当前内循环语句，执行后面的代码。</li><li>当它出现在嵌套循环语句中，跳出最近的内循环语句，执行后面的代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line"><span class="keyword">while</span> (1)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == 10)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>; //跳出<span class="keyword">while</span>循环</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int flag = 0;</span><br><span class="line">int m = 0;</span><br><span class="line">int n = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (m = 0; m &lt; 10; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (n = 0; n &lt; 10; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == 5)</span><br><span class="line">&#123;</span><br><span class="line">flag = 1;</span><br><span class="line"><span class="built_in">break</span>; //跳出<span class="keyword">for</span> (n = 0; n &lt; 10; n++)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == 1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">break</span>; //跳出<span class="keyword">for</span> (m = 0; m &lt; 10; m++)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/4$ ./4.3.1</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 3</span><br><span class="line">i = 4</span><br><span class="line">i = 5</span><br><span class="line">i = 6</span><br><span class="line">i = 7</span><br><span class="line">i = 8</span><br><span class="line">i = 9</span><br><span class="line">i = 10</span><br></pre></td></tr></table></figure><h4 id="4-4-2-continue语句"><a href="#4-4-2-continue语句" class="headerlink" title="4.4.2 continue语句"></a>4.4.2 continue语句</h4><p>在循环语句中，如果希望立即终止本次循环，并执行下一次循环，此时就需要使用<code>continue</code>语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;           <span class="comment">//定义变量sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)   <span class="comment">//如果i是一个偶数，执行if语句中的代码</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;      <span class="comment">//结束本次循环</span></span><br><span class="line">&#125;</span><br><span class="line">sum += i;          <span class="comment">//实现sum和i的累加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/4$ ./4.4.2</span><br><span class="line"><span class="built_in">sum</span> = 2500</span><br></pre></td></tr></table></figure><h4 id="4-4-3-goto语句-无条件跳转，尽量少用"><a href="#4-4-3-goto语句-无条件跳转，尽量少用" class="headerlink" title="4.4.3 goto语句(无条件跳转，尽量少用)"></a>4.4.3 goto语句(无条件跳转，尽量少用)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> End; <span class="comment">//无条件跳转到End的标识</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaaaaa\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">End:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbbbbbb\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">4</span>$ ./<span class="number">4.4</span><span class="number">.3</span> </span><br><span class="line">bbbbbbbb</span><br></pre></td></tr></table></figure><h2 id="5-数组和字符串"><a href="#5-数组和字符串" class="headerlink" title="5. 数组和字符串"></a>5. 数组和字符串</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><blockquote><p>在程序设计中，为了方便处理数据把具有相同类型的若干变量按有序形式组织起来——称为数组</p></blockquote><p><font color="red">数组就是在内存中连续的相同类型的变量空间</font>。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000906.png" alt="img"></p><p>数组属于构造数据类型：</p><ul><li><p>一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型</p></li><li><pre><code class="c">int a[10];struct Stu boy[10]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别</span><br><span class="line"></span><br><span class="line">- ```c</span><br><span class="line">  int a[10];</span><br><span class="line">  char s[10];</span><br><span class="line">  char *p[10];</span><br></pre></td></tr></table></figure>通常情况下，数组元素下标的个数也称为维数，根据维数的不同，可将数组分为一维数组、二维数组、三维数组、四维数组等。通常情况下，&lt;font color=&quot;red&quot;&gt;我们将二维及以上的数组称为多维数组&lt;/font&gt;</code></pre></li></ul><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组的定义和使用"><a href="#5-2-1-一维数组的定义和使用" class="headerlink" title="5.2.1  一维数组的定义和使用"></a>5.2.1  一维数组的定义和使用</h4><ul><li><p>数组名字符合标识符的书写规定(数字、英文字母、下划线)</p></li><li><p><font color="red">数组名不能与其它变量名相同，同一作用域内是唯一的</font></p></li><li><p>方括号[]中常量表达式表示数组元素的个数</p></li><li><pre><code class="c">int a[3]表示数组a有3个元素其下标从0开始计算，因此3个元素分别a[0],a[1],a[2]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;font color=&quot;red&quot;&gt;定义数组时[]内最好是常量，使用数组时[]内即可是常量，也可以是变量&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[10];//定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span><br><span class="line">//a[0]…… a[9]，没有a[10]</span><br><span class="line">//没有a这个变量，a是数组的名字，但不是变量名，它是常量</span><br><span class="line">a[0] = 0;</span><br><span class="line">//……</span><br><span class="line">a[9] = 9;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = i; //给数组赋值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//遍历数组，并输出每个成员的值</span><br><span class="line">for (i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.2.1 </span><br><span class="line">0123456789</span><br></pre></td></tr></table></figure><h4 id="5-2-2-一维数组的初始化"><a href="#5-2-2-一维数组的初始化" class="headerlink" title="5.2.2 一维数组的初始化"></a>5.2.2 一维数组的初始化</h4><p>在定义数组的同时进行赋值，称为初始化。全局数组若不初始化，编译器将其初始化为零。<font color="red">局部数组若不初始化，内容为随机值。</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;<span class="comment">//定义一个数组，同时初始化所有成员变量</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;<span class="comment">//初始化前三个成员，后面所有元素都设置为0</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//所有的成员都设置为0</span></span><br><span class="line"><span class="comment">//[]中不定义元素个数，定义时必须初始化</span></span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;<span class="comment">//定义了一个数组，有5个成员</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-数组名"><a href="#5-2-3-数组名" class="headerlink" title="5.2.3 数组名"></a>5.2.3 数组名</h4><p><font color="red">数组名是一个地址的常量，代表数组中首元素的地址</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;<span class="comment">//定义一个数组，同时初始化所有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="keyword">sizeof</span>(a); <span class="comment">//数组占用内存的大小，10个int类型，10 * 4  = 40</span></span><br><span class="line"><span class="type">int</span> n0 = <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);<span class="comment">//数组第0个元素占用内存大小，第0个元素为int，4</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.2.3 </span><br><span class="line">a = 0x7ffcfbfe16d0</span><br><span class="line">&amp;a[0]=0x7ffcfbfe16d0</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure><h4 id="5-2-4-强化训练"><a href="#5-2-4-强化训练" class="headerlink" title="5.2.4 强化训练"></a>5.2.4 强化训练</h4><h5 id="1-一维数组的最值"><a href="#1-一维数组的最值" class="headerlink" title="1. 一维数组的最值"></a>1. 一维数组的最值</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123;  <span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>,- <span class="number">4</span>, <span class="number">5</span>, <span class="number">-6</span>, <span class="number">7</span>, <span class="number">-8</span>, <span class="number">-9</span>, <span class="number">10</span> &#125;;<span class="comment">//定义一个数组，同时初始化所有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">max = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数组中最大值为：%d\n&quot;</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.2.4-1 </span><br><span class="line">数组中最大值为:10</span><br></pre></td></tr></table></figure><h5 id="2-一维数组的逆置"><a href="#2-一维数组的逆置" class="headerlink" title="2. 一维数组的逆置"></a>2. 一维数组的逆置</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123;  <span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>,- <span class="number">4</span>, <span class="number">5</span>, <span class="number">-6</span>, <span class="number">7</span>, <span class="number">-8</span>, <span class="number">-9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">tmp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = tmp;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]); i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.2.4-2 </span><br><span class="line">10, -9, -8, 7, -6, 5, -4, 3, -2, 1, </span><br></pre></td></tr></table></figure><blockquote><p>源文件的代码是有问题的，因为它<code>i++, j++</code> 放在了交换位置的前面，导致数组的第一个没有反转</p></blockquote><h5 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3. 冒泡排序"></a>3. 冒泡排序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">int a[] = &#123;  1, -2, 3,- 4, 5, -6, 7, -8, -9, 10 &#125;;</span><br><span class="line">int i = 0;</span><br><span class="line">int j = 0;</span><br><span class="line">int n = sizeof(a)/sizeof(a[0]);</span><br><span class="line">int tmp;</span><br><span class="line"></span><br><span class="line">// 1. 流程</span><br><span class="line">// 2. 试数</span><br><span class="line"><span class="keyword">for</span>(i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = 0; j &lt; n - i - 1; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[j+1])</span><br><span class="line">&#123;</span><br><span class="line">tmp = a[j];</span><br><span class="line">a[j] = a[j+1];</span><br><span class="line">a[j+1] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.2.4-3 </span><br><span class="line">-9-8-6-4-2135710</span><br></pre></td></tr></table></figure><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><h4 id="5-3-1-二维数组的定义和使用"><a href="#5-3-1-二维数组的定义和使用" class="headerlink" title="5.3.1 二维数组的定义和使用"></a>5.3.1 二维数组的定义和使用</h4><blockquote><p>二维数组定义的一般形式是：</p><p><code>类型说明符 数组名[常量表达式1][常量表达式2]</code></p></blockquote><p>其中常量表达式1表示第一维下标的长度，常量表达式2 表示第二维下标的长度。</p><p><code>int a[3][4];</code></p><ul><li>命名规则同一维数组</li><li>定义了一个三行四列的数组，数组名为a其元素类型为整型，该数组的元素个数为3×4个，即：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000907.png" alt="img"></p><p>二维数组a是按行进行存放的，先存放a[0]行，再存放a[1]行、a[2]行，并且每行有四个元素，也是依次存放的</p><ul><li>二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标。</li><li>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，<font color="red">也就是说内存中只有一维数组</font>，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 定义一个二维数组，名字叫a</span></span><br><span class="line">    <span class="comment">// 由3个一维数组组成，这个一维数组是int[4]</span></span><br><span class="line">    <span class="comment">// 这3个一维数组的数组名分别为a[0],a[1],a[2]</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">    </span><br><span class="line">    a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    a[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给数组每个元素赋值</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; j &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历数组，并输出每个成员的值</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-二维数组的初始化"><a href="#5-3-2-二维数组的初始化" class="headerlink" title="5.3.2 二维数组的初始化"></a>5.3.2 二维数组的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分段赋值 int a[3][4] = &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = </span><br><span class="line">&#123; </span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">&#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, &#125;,</span><br><span class="line">&#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 连续赋值</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> , <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>  &#125;;</span><br><span class="line"><span class="comment">// 可以只给部分元素赋初值，未初始化则为0</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有的成员都设置为0</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[]中不定义元素个数，定义时必须初始化</span></span><br><span class="line"><span class="type">int</span> a[][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-3-3-数组名"><a href="#5-3-3-数组名" class="headerlink" title="5.3.3 数组名"></a>5.3.3 数组名</h4><p><font color="red">数组名是一个地址的常量，代表数组中首元素的地址</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义了一个二维数组，名字叫a</span></span><br><span class="line"><span class="comment">//二维数组是本质上还是一维数组，此一维数组有3个元素</span></span><br><span class="line"><span class="comment">//每个元素又是一个一维数组int[4]</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> , <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名为数组首元素地址，二维数组的第0个元素为一维数组</span></span><br><span class="line"><span class="comment">//第0个一维数组的数组名为a[0]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0] = %p\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4</span></span><br><span class="line"><span class="comment">//sizeof(a) = 3 * 4 * 4 = 48</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="comment">//测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4=16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a[0]) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a[0][0]) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">//求二维数组行数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求二维数组列数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">//求二维数组行*列总数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">5</span>$ ./<span class="number">5.3</span><span class="number">.3</span> </span><br><span class="line">a = <span class="number">0x7ffe09fd1e60</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0x7ffe09fd1e60</span></span><br><span class="line"><span class="keyword">sizeof</span>(a) = <span class="number">48</span></span><br><span class="line"><span class="keyword">sizeof</span>(a[<span class="number">0</span>]) = <span class="number">16</span></span><br><span class="line"><span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]) = <span class="number">4</span></span><br><span class="line">i = <span class="number">3</span></span><br><span class="line">j = <span class="number">4</span></span><br><span class="line">n = <span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="5-3-4-强化训练"><a href="#5-3-4-强化训练" class="headerlink" title="5.3.4 强化训练"></a>5.3.4 强化训练</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二维数组：  五行、三列</span></span><br><span class="line"><span class="comment">//行代表人：  老大到老五</span></span><br><span class="line"><span class="comment">//列代表科目：语、数、外</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> a[<span class="number">5</span>][<span class="number">3</span>] =  &#123; &#123; <span class="number">80</span>, <span class="number">75</span>, <span class="number">56</span> &#125;, &#123; <span class="number">59</span>, <span class="number">65</span>, <span class="number">71</span> &#125;, &#123; <span class="number">59</span>, <span class="number">63</span>, <span class="number">70</span> &#125;, &#123; <span class="number">85</span>, <span class="number">45</span>, <span class="number">90</span> &#125;, &#123; <span class="number">76</span>, <span class="number">77</span>, <span class="number">45</span> &#125; &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> i,j,person_low[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> s=<span class="number">0</span>,lesson_aver[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s + a[i][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] &lt; <span class="number">60</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                person_low[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lesson_aver[i] = s/<span class="number">5</span>;</span><br><span class="line">        s = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">printf</span>(<span class="string">&quot;各科的平均成绩:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, lesson_aver[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;各科不及格的人数:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%d\n&quot;</span>, person_low[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/5$ ./5.3.4 </span><br><span class="line">各科的平均成绩:</span><br><span class="line">67.00</span><br><span class="line">63.40</span><br><span class="line">64.40</span><br><span class="line">各科不及格的人数:</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="5-4-多维数组-了解"><a href="#5-4-多维数组-了解" class="headerlink" title="5.4 多维数组(了解)"></a>5.4 多维数组(了解)</h3><p>多维数组的定义与二维数组类似，其语法格式具体如下：</p><p><code>数组类型修饰符 数组名 [n1][n2]…[nn];</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>定义了一个三维数组，数组的名字是a，数组的长度为3，每个数组的元素又是一个二维数组，这个二维数组的长度是4，并且这个二维数组中的每个元素又是一个一维数组，这个一维数组的长度是5，元素类型是<code>int</code>;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// int a[3][4][5]; //定义了一个三维数组，有3个二维数组int[4][5]</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>][<span class="number">5</span>] = &#123; &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;, &#123; <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;, &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125; &#125;, &#123; &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125; &#125;, &#123; &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125;, &#123; <span class="number">0</span> &#125; &#125; &#125;;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//添加访问元素代码</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a[i][j][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">5</span>$ ./<span class="number">5.4</span> </span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, </span><br><span class="line"><span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br></pre></td></tr></table></figure><h3 id="5-5-字符数组与字符串"><a href="#5-5-字符数组与字符串" class="headerlink" title="5.5 字符数组与字符串"></a>5.5 字符数组与字符串</h3><h4 id="5-5-1-字符数组与字符串区别"><a href="#5-5-1-字符数组与字符串区别" class="headerlink" title="5.5.1 字符数组与字符串区别"></a>5.5.1 字符数组与字符串区别</h4><ul><li>C语言中没有字符串这种数据类型，可以通过char的数组来替代；</li><li>字符串一定是一个char的数组，但char的数组未必是字符串；</li><li><font color="red">数字0(和字符‘<code>\0</code>’等价)结尾的char数组就是一个字符串</font>，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以<font color="red">字符串是一种特殊的char的数组</font></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c1[] = &#123; <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span> &#125;; <span class="comment">//普通字符数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c1 = %s\n&quot;</span>, c1); <span class="comment">//乱码，因为没有’\0’结束符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以‘\0’(‘\0’就是数字0)结尾的字符数组是字符串</span></span><br><span class="line"><span class="type">char</span> c2[] = &#123; <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c2 = %s\n&quot;</span>, c2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串处理以‘\0’(数字0)作为结束符，后面的&#x27;h&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;o&#x27;不会输出</span></span><br><span class="line"><span class="type">char</span> c3[] = &#123; <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c3 = %s\n&quot;</span>, c3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000908.png" alt="image-20200920211035690"></p><h4 id="5-5-2-字符串的初始化"><a href="#5-5-2-字符串的初始化" class="headerlink" title="5.5.2 字符串的初始化"></a>5.5.2 字符串的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言没有字符串类型，通过字符数组模拟</span></span><br><span class="line"><span class="comment">// C语言字符串，以字符&#x27;\0&#x27;, 数字0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//不指定长度, 没有0结束符，有多少个元素就有多长</span></span><br><span class="line">    <span class="type">char</span> buf[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf = %s\n&quot;</span>, buf);<span class="comment">//乱码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定长度，后面没有赋值的元素，自动补0</span></span><br><span class="line"><span class="type">char</span> buf2[<span class="number">100</span>] = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">1000</span>]=&#123;<span class="string">&quot;hello&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf2 = %s\n&quot;</span>, buf2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有元素赋值为0</span></span><br><span class="line"><span class="type">char</span> buf3[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//char buf4[2] = &#123; &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27; &#125;;//数组越界</span></span><br><span class="line">    <span class="type">char</span> buf5[<span class="number">50</span>] = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;7&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf5 = %s\n&quot;</span>, buf5);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf6[<span class="number">50</span>] = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;7&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf6 = %s\n&quot;</span>, buf6);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> buf7[<span class="number">50</span>] = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;7&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf7 = %s\n&quot;</span>, buf7);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字符串初始化，编译器自动在后面补0，常用</span></span><br><span class="line"><span class="type">char</span> buf8[] = <span class="string">&quot;agjdslgjlsdjg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#x27;\0&#x27;后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符</span></span><br><span class="line"><span class="comment">//&#x27;\ddd&#x27;八进制字义字符，&#x27;\xdd&#x27;十六进制转移字符</span></span><br><span class="line"><span class="comment">// \012相当于\n</span></span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;\012abc&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str == %s\n&quot;</span>, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-3-字符串的输入输出"><a href="#5-5-3-字符串的输入输出" class="headerlink" title="5.5.3 字符串的输入输出"></a>5.5.3 字符串的输入输出</h4><blockquote><p>由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">   </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input string1 : \n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);<span class="comment">//scanf(“%s”,str)默认以空格分隔</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;output:%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-gets"><a href="#1-gets" class="headerlink" title="1. gets()"></a>1. gets()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure><p>功能：从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止。<br>参数：<br>    <code>s</code>：字符串首地址<br>返回值：<br>    成功：读入的字符串<br>    失败：NULL</p><p><code>gets(str)</code>与<code>scanf(“%s”,str)</code>的区别：</p><ul><li><code>gets(str)</code>允许输入的字符串含有空格</li><li><code>scanf(“%s”,str)</code>不允许含有空格</li></ul><blockquote><p>注意：由于<code>scanf()</code>和<code>gets()</code>无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界(缓冲区溢出)的情况</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入str: &quot;</span>);</span><br><span class="line">gets(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>, str);</span><br></pre></td></tr></table></figure><h5 id="2-fgets"><a href="#2-fgets" class="headerlink" title="2. fgets()"></a>2. fgets()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> size, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p> 功能：从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了<code>size - 1</code>个字符为止，最后会自动加上字符 ‘<code>\0</code>‘ 作为字符串结束。<br>参数：<br>    <code>s</code>：字符串<br>    <code>size</code>：指定最大读取字符串的长度（size - 1）<br>    <code>stream</code>：文件指针，如果读键盘输入的字符串，固定写为stdin<br>返回值：<br>    成功：成功读取的字符串<br>    读到文件尾或出错： NULL</p></blockquote><blockquote><p> <code>fgets()</code>在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过<code>scanf</code>和<code>gets</code>输入一个字符串的时候，不包含结尾的“<code>\n</code>”，但通过<code>fgets</code>结尾多了“<code>\n</code>”。<code>fgets()</code>函数是安全的，不存在缓冲区溢出的问题</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入str: &quot;</span>);</span><br><span class="line">fgets(str, <span class="keyword">sizeof</span>(str), <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str = \&quot;%s\&quot;\n&quot;</span>, str);</span><br></pre></td></tr></table></figure><h5 id="3-puts"><a href="#3-puts" class="headerlink" title="3. puts()"></a>3. puts()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：标准设备输出s字符串，<font color="red">在输出完成后自动输出一个’\n’。</font></p><p>参数：</p><p>​    s：字符串首地址</p><p>返回值：</p><p>​    成功：非负数</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-fputs"><a href="#4-fputs" class="headerlink" title="4. fputs()"></a>4. fputs()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * str, FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将str所指定的字符串写入到stream指定的文件中， 字符串结束符 ‘\0’  不写入文件。 </p><p>参数：</p><p>​    str：字符串</p><p>​    stream：文件指针，<font color="red">如果把字符串输出到屏幕，固定写为stdout</font></p><p>返回值：</p><p>​    成功：0</p><p>​    失败：-1</p></blockquote><p><code>fputs()</code>是<code>puts()</code>的文件操作版本，但<code>fputs()</code><font color="red">不会</font>自动输出一个’<code>\n</code>‘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;hello world&quot;</span>, <span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure><h5 id="5-strlen"><a href="#5-strlen" class="headerlink" title="5. strlen()"></a>5. strlen()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：计算指定指定字符串s的长度，<font color="red">不包含字符串结束符‘<code>\0</code>’</font></p><p>参数：</p><p>​s：字符串首地址</p><p>返回值：字符串s的长度，size_t为unsigned int类型</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;abc\0defg&quot;</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 n = 3</span></span><br></pre></td></tr></table></figure><h4 id="5-5-4-字符串追加"><a href="#5-5-4-字符串追加" class="headerlink" title="5.5.4 字符串追加"></a>5.5.4 字符串追加</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">char</span> dst[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str1[i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dst[i] = str1[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str2[j] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dst[i + j] = str2[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">dst[i + j] = <span class="number">0</span>; <span class="comment">//字符串结束符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dst = %s\n&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><h4 id="6-1-1-函数分类"><a href="#6-1-1-函数分类" class="headerlink" title="6.1.1 函数分类"></a>6.1.1 函数分类</h4><p>C 程序是由函数组成的，我们写的代码都是由主函数 main()开始执行的。函数是 C 程序的基本模块，是用于完成特定任务的程序代码单元</p><p>从函数定义的角度看，函数可分为系统函数和用户定义函数两种：</p><ul><li><p>系统函数，即库函数：这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们，如我们常用的打印函数printf()。</p></li><li><p>用户定义函数：用以解决用户的专门需要</p></li></ul><h4 id="6-1-2-函数的作用"><a href="#6-1-2-函数的作用" class="headerlink" title="6.1.2 函数的作用"></a>6.1.2 函数的作用</h4><blockquote><p>函数的使用可以省去重复代码的编写，降低代码重复率</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 求两数的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a1 = <span class="number">10</span>, b1 = <span class="number">20</span>, c1 = <span class="number">0</span>;</span><br><span class="line">    c1 = max(a1, b1); <span class="comment">// 调用max()</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a2 = <span class="number">11</span>, b2 = <span class="number">21</span>, c2 = <span class="number">0</span>;</span><br><span class="line">    c2 = max(a2, b2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">6</span>$ ./<span class="number">6.1</span><span class="number">.2</span> </span><br><span class="line">c1= <span class="number">20</span>, c2 = <span class="number">21</span></span><br></pre></td></tr></table></figure><blockquote><p>函数可以让程序更加模块化，从而有利于程序的阅读，修改和完善</p></blockquote><p>假如我们编写一个实现以下功能的程序：读入一行数字；对数字进行排序；找到它们的平均值；打印出一个柱状图。如果我们把这些操作直接写在main()里，这样可能会给用户感觉代码会有点凌乱。但，假如我们使用函数，这样可以让程序更加清晰、模块化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> <span class="built_in">list</span>[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里只是举例，函数还没有实现</span></span><br><span class="line">readlist(<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">sort(<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">average(<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">bargraph(<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们可以这么理解，<font color="red">程序就像公司，公司是由部门组成的，这个部门就类似于C程序的函数</font>。默认情况下，公司就是一个大部门( 只有一个部门的情况下 )，相当于C程序的<code>main()</code>函数。如果公司比较小( 程序比较小 )，因为任务少而简单，一个部门即可( <code>main()</code>函数 )胜任。但是，如果这个公司很大( 大型应用程序 )，任务多而杂，如果只是一个部门管理( 相当于没有部门，没有分工 )，我们可想而知，公司管理、运营起来会有多混乱，不是说这样不可以运营，只是这样不完美而已，如果根据公司要求分成一个个部门( 根据功能封装一个一个函数 )，招聘由行政部门负责，研发由技术部门负责等，这样就可以分工明确，结构清晰，方便管理，各部门之间还可以相互协调</p><h4 id="6-1-3-函数的调用：产生随机数"><a href="#6-1-3-函数的调用：产生随机数" class="headerlink" title="6.1.3 函数的调用：产生随机数"></a>6.1.3 函数的调用：产生随机数</h4><p>当调用函数时，需要关心5要素：</p><ul><li><p>头文件：包含指定的头文件</p></li><li><p>函数名字：函数名字必须和头文件声明的名字一样</p></li><li><p>功能：需要知道此函数能干嘛后才调用</p></li><li><p>参数：参数类型要匹配</p></li><li><p>返回值：根据需要接收返回值</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span> *t)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：获取当前系统时间</p><p>参数：常设置为NULL</p><p>返回值：当前系统时间, <em>time_t</em> 相当于long类型，单位为毫秒</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">srand</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：用来设置<code>rand()</code>产生随机数时的随机种子</p><p>参数：如果每次seed相等，<code>rand()</code>产生随机数相等</p><p>返回值：无</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：返回一个随机数值</p><p>参数：无</p><p>返回值：随机数</p></blockquote><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><h4 id="6-2-1-函数定义格式"><a href="#6-2-1-函数定义格式" class="headerlink" title="6.2.1 函数定义格式"></a>6.2.1 函数定义格式</h4><p>函数定义的一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回类型 函数名(形式参数列表)</span><br><span class="line">&#123;</span><br><span class="line">数据定义部分;</span><br><span class="line">执行语句部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000909.jpg" alt="20150310105403075"></p><h4 id="6-2-2-函数名字、形参、函数体、返回值"><a href="#6-2-2-函数名字、形参、函数体、返回值" class="headerlink" title="6.2.2 函数名字、形参、函数体、返回值"></a>6.2.2 函数名字、形参、函数体、返回值</h4><h5 id="1-函数名"><a href="#1-函数名" class="headerlink" title="1. 函数名"></a>1. 函数名</h5><p>理论上是可以随意起名字，最好起的名字见名知意，应该让用户看到这个函数名字就知道这个函数的功能。注意，函数名的后面有个圆换号()，代表这个为函数，不是普通的变量名。</p><h5 id="2-形参列表"><a href="#2-形参列表" class="headerlink" title="2. 形参列表"></a>2. 形参列表</h5><p>在定义函数时指定的形参，<font color="red">在未出现函数调用时，它们并不占内存中的存储单元</font>，因此称它们是形式参数或虚拟参数，简称形参，表示它们并不是实际存在的数据，所以，形参里的变量不能赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">20</span>)</span> <span class="comment">// error, 形参不能赋值</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在定义函数时指定的形参，必须是，类型+变量的形式：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1: right, 类型+变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2: error, 只有类型，没有变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3: error, 只有变量，没有类型</span></span><br><span class="line"><span class="type">int</span> a, <span class="type">int</span> b;</span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(a, b)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义函数时指定的形参，可有可无，根据函数的需要来设计，<font color="red">如果没有形参，圆括号内容为空，或写一个<code>void</code>关键字：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没形参， 圆括号内容为空</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没形参， 圆括号内容为void关键字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-函数体"><a href="#3-函数体" class="headerlink" title="3. 函数体"></a>3. 函数体</h5><p>花括号{ }里的内容即为函数体的内容，这里<font color="red">为函数功能实现的过程</font>，这和以前的写代码没太大区别，以前我们把代码写在main()函数里，现在只是把这些写到别的函数里。</p><h5 id="4-返回值"><a href="#4-返回值" class="headerlink" title="4. 返回值"></a>4. 返回值</h5><p>函数的返回值是通过函数中的return语句获得的，return后面的值也可以是一个表达式</p><ul><li><p>尽量保证return语句中表达式的值和函数返回类型是同一类型</p></li><li><pre><code class="c">int max() // 函数的返回值为int类型&#123;    int a = 10;    return a;// 返回值a为int类型，函数返回类型也是int，匹配&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果函数返回的类型和return语句中表达式的值不一致，则以函数返回类型为准，即&lt;font color=&quot;red&quot;&gt;函数返回类型决定返回值的类型&lt;/font&gt;。对数值型数据，可以自动进行类型转换</span><br><span class="line"></span><br><span class="line">- ```c</span><br><span class="line">  double max() // 函数的返回值为double类型</span><br><span class="line">  &#123;</span><br><span class="line">  int a = 10;</span><br><span class="line">  return a;// 返回值a为int类型，它会转为double类型再返回</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>&gt; 注意：如果函数返回的类型和return语句中表达式的值不一致，而它又无法自动进行类型转换，程序则会报错</code></pre></li><li><p>return语句的另一个作用为中断return所在的执行函数，类似于break中断循环、switch语句一样</p></li><li><pre><code class="c">int max()&#123;    return 1;// 执行到，函数已经被中断，所以下面的return 2无法被执行到    return 2;// 没有执行&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果函数带返回值，return后面必须跟着一个值，如果函数没有返回值，函数名字的前面必须写一个`void`关键字，这时候，我们写代码时也可以通过return中断函数(也可以不用)，只是这时，`return`后面不带内容( 分号“`;`”除外)</span><br><span class="line"></span><br><span class="line">- ```c</span><br><span class="line">  void max()// 最好要有void关键字</span><br><span class="line">  &#123;</span><br><span class="line">  return; // 中断函数，这个可有可无</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><font color="red">定义函数后，我们需要调用此函数才能执行到这个函数里的代码段</font>。这和main()函数不一样，main()为编译器设定好自动调用的主函数，无需人为调用，我们都是在main()函数里调用别的函数，<font color="red">一个 C 程序里有且只有一个main()函数</font></p><h4 id="6-3-1-函数执行流程"><a href="#6-3-1-函数执行流程" class="headerlink" title="6.3.1 函数执行流程"></a>6.3.1 函数执行流程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is for test\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">print_test();<span class="comment">// print_test函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1.进入<code>mian()</code>函数</li><li>2.调用<code>print_test()</code>函数<ul><li>a. 它会在main()函数的前寻找有没有一个名字叫“print_test”的函数定义；</li><li>b. 如果找到，接着检查函数的参数，这里调用函数时没有传参，函数定义也没有形参，参数类型匹配；</li><li>c. 开始执行<code>print_test()</code>函数，这时候，<code>main()</code>函数里面的执行会阻塞( 停 )在<code>print_test()</code>这一行代码，等待<code>print_test()</code>函数的执行</li></ul></li><li><code>print_test()</code>函数执行完( 这里打印一句话 )，<code>main()</code>才会继续往下执行，执行到<code>return 0</code>, 程序执行完毕</li></ul><h4 id="6-3-2-函数的形参和实参"><a href="#6-3-2-函数的形参和实参" class="headerlink" title="6.3.2 函数的形参和实参"></a>6.3.2 函数的形参和实参</h4><ul><li>形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用</li><li>实参出现在主调函数中，进入被调函数后，实参也不能使用</li><li>实参变量对形参变量的数据传递是“值传递”，即单向传递，只<font color="red">由实参传给形参，而不能由形参传回来给实参</font></li><li>在调用函数时，编译系统临时给形参分配存储单元。调用结束后，形参单元被释放</li><li>实参单元与形参单元是不同的单元。调用结束后，形参单元被释放，函数调用结束返回主调函数后则不能再使用该形参变量。实参单元仍保留并维持原值。<font color="red">因此，在执行一个被调用函数时，形参的值如果发生改变，并不会改变主调函数中实参的值</font></li></ul><h4 id="6-3-3-无参函数调用"><a href="#6-3-3-无参函数调用" class="headerlink" title="6.3.3 无参函数调用"></a>6.3.3 无参函数调用</h4><blockquote><p>如果是调用无参函数，则不能加上“实参”，但括号不能省略</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line">test();<span class="comment">// right, 圆括号()不能省略</span></span><br><span class="line">test(<span class="number">250</span>); <span class="comment">// error, 函数定义时没有参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-4-有参函数调用"><a href="#6-3-4-有参函数调用" class="headerlink" title="6.3.4 有参函数调用"></a>6.3.4 有参函数调用</h4><blockquote><p>如果实参表列包含多个实参，则各参数间用逗号隔开</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">10</span>, q = <span class="number">20</span>;</span><br><span class="line">test(p, q);<span class="comment">// 函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实参与形参的个数应相等，类型应匹配(相同或赋值兼容)。实参与形参按顺序对应，一对一地传递数据</li><li>实参可以是常量、变量或表达式，<font color="red">无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参</font>。所以，这里的变量是在圆括号( )外面定义好、赋好值的变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line"><span class="type">int</span> p = <span class="number">10</span>, q = <span class="number">20</span>;</span><br><span class="line">test(p, q);<span class="comment">// right</span></span><br><span class="line">test(<span class="number">11</span>, <span class="number">30</span> - <span class="number">10</span>); <span class="comment">// right</span></span><br><span class="line"></span><br><span class="line">test(<span class="type">int</span> a, <span class="type">int</span> b); <span class="comment">// error, 不应该在圆括号里定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-5-函数返回值"><a href="#6-3-5-函数返回值" class="headerlink" title="6.3.5 函数返回值"></a>6.3.5 函数返回值</h4><blockquote><p>如果函数定义没有返回值，函数调用时不能写<code>void</code>关键字，调用函数时也不能接收函数的返回值</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line">test(); <span class="comment">// right</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>; <span class="comment">// error, void关键字只能出现在定义，不可能出现在调用的地方</span></span><br><span class="line"><span class="type">int</span> a = test();<span class="comment">// error, 函数定义根本就没有返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数定义有返回值，这个返回值我们根据用户需要可用可不用，但是，假如我们需要使用这个函数返回值，<font color="red">我们需要定义一个匹配类型的变量来接收</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义, 返回值为int类型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line"><span class="type">int</span> a = test(); <span class="comment">// right, a为int类型</span></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">b = test();<span class="comment">// right, 和上面等级</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p = test(); <span class="comment">// 虽然调用成功没有意义, p为char *, 函数返回值为int, 类型不匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error, 必须定义一个匹配类型的变量来接收返回值</span></span><br><span class="line"><span class="comment">// int只是类型，没有定义变量</span></span><br><span class="line"><span class="type">int</span> = test();</span><br><span class="line"></span><br><span class="line"><span class="comment">// error, 必须定义一个匹配类型的变量来接收返回值</span></span><br><span class="line"><span class="comment">// int只是类型，没有定义变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-4-函数的声明"><a href="#6-4-函数的声明" class="headerlink" title="6.4 函数的声明"></a>6.4 函数的声明</h3><p>如果使用用户自己定义的函数，而该函数与调用它的函数（即主调函数）不在同一文件中，或者<font color="red">函数定义的位置在主调函数之后</font>，则必须在调用此函数之前对被调用的函数作声明</p><p>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行</p><blockquote><p>注意：一个函数只能被定义一次，但可以声明多次</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>; <span class="comment">// 函数的声明，分号不能省略</span></span><br><span class="line"><span class="comment">// int max(int, int); // 另一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">25</span>, num_max = <span class="number">0</span>;</span><br><span class="line">num_max = max(a, b); <span class="comment">// 函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num_max = %d\n&quot;</span>, num_max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数定义和声明的区别：</strong></p><ul><li>定义是指对函数功能的确立，包括指定函数名、函数类型、形参及其类型、函数体等，它是一个完整的、独立的函数单位</li><li>声明的作用则是把函数的名字、函数类型以及形参的个数、类型和顺序(注意，不包括函数体)通知编译系统，以便在对包含函数调用的语句进行编译时，据此对其进行对照检查（例如函数名是否正确，实参与形参的类型和个数是否一致）</li></ul><h3 id="6-5-main函数与exit函数"><a href="#6-5-main函数与exit函数" class="headerlink" title="6.5 main函数与exit函数"></a>6.5 main函数与exit函数</h3><p>在<code>main</code>函数中调用<code>exit</code>和<code>return</code>结果是一样的，但在子函数中调用<code>return</code>只是代表子函数终止了，在子函数中调用<code>exit</code>，那么程序终止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fun\n&quot;</span>);</span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">fun();</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-多文件-分文件-编程"><a href="#6-6-多文件-分文件-编程" class="headerlink" title="6.6 多文件(分文件)编程"></a>6.6 多文件(分文件)编程</h3><h4 id="6-6-1-分文件编程"><a href="#6-6-1-分文件编程" class="headerlink" title="6.6.1 分文件编程"></a>6.6.1 分文件编程</h4><ul><li>把函数声明放在头文件<code>xxx.h</code>中，在主函数中包含相应头文件</li><li>在头文件对应的<code>xxx.c</code>中实现<code>xxx.h</code>声明的函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000910.jpg" alt="2016-06-04_014552"></p><h4 id="6-6-2-防止头文件重复包含"><a href="#6-6-2-防止头文件重复包含" class="headerlink" title="6.6.2 防止头文件重复包含"></a>6.6.2 防止头文件重复包含</h4><blockquote><p>当一个项目比较大时，往往都是分文件，这时候有可能不小心把同一个头文件 include 多次，或者头文件嵌套包含</p></blockquote><p>a.h 中包含 b.h ：<code>#include &quot;b.h&quot;</code></p><p>b.h 中包含 a.h：<code>#include &quot;a.h&quot;</code></p><p>main.c中使用其中头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译报错!!!</p><p>为了避免同一个文件被include多次，C&#x2F;C++中有两种方式解决：</p><ul><li><p>法1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SOMEFILE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SOMEFILE_H__</span></span><br><span class="line"><span class="comment">// 声明语句</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>法2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">// 声明语句</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7. 指针"></a>7. 指针</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><h4 id="7-1-1-内存"><a href="#7-1-1-内存" class="headerlink" title="7.1.1 内存"></a>7.1.1 内存</h4><p>内存含义：</p><ul><li><p>存储器：计算机的组成中，用来存储程序和数据，辅助CPU进行运算处理的重要部分。</p></li><li><p>内存：内部存贮器，暂存程序&#x2F;数据——掉电丢失 SRAM、DRAM、DDR、DDR2、DDR3。</p></li><li><p>外存：外部存储器，长时间保存程序&#x2F;数据—掉电不丢ROM、ERRROM、FLASH（NAND、NOR）、硬盘、光盘</p></li></ul><p>内存是沟通CPU与硬盘的桥梁：</p><ul><li><p>暂存放CPU中的运算数据</p></li><li><p>暂存与硬盘等外部存储器交换的数据</p></li></ul><h4 id="7-1-2-物理存储器和存储地址空间"><a href="#7-1-2-物理存储器和存储地址空间" class="headerlink" title="7.1.2 物理存储器和存储地址空间"></a>7.1.2 物理存储器和存储地址空间</h4><blockquote><p>有关内存的两个概念：物理存储器和存储地址空间</p></blockquote><p>物理存储器：实际存在的具体存储器芯片。</p><ul><li><p>主板上装插的内存条</p></li><li><p>显示卡上的显示RAM芯片</p></li><li><p>各种适配卡上的RAM芯片和ROM芯片</p></li></ul><p>存储地址空间：对存储器编码的范围。我们在软件上常说的内存是指这一层含义</p><ul><li>编码：对每个物理存储单元（一个字节）分配一个号码</li><li>寻址：可以根据分配的号码找到相应的存储单元，完成数据的读写</li></ul><h4 id="7-1-3-内存地址"><a href="#7-1-3-内存地址" class="headerlink" title="7.1.3 内存地址"></a>7.1.3 内存地址</h4><ul><li><p>将内存抽象成一个很大的一维字符数组</p></li><li><p>编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）</p></li><li><p>这个内存编号我们称之为内存地址。</p><p>内存中的每一个数据都会分配相应的地址：</p><ul><li><code>char</code>:占一个字节分配一个地址</li><li><code>int</code>: 占四个字节分配四个地址</li><li><code>float</code>、<code>struct</code>、函数、数组等</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000911.png" alt="图片1"></p><h4 id="7-1-4-指针和指针变量"><a href="#7-1-4-指针和指针变量" class="headerlink" title="7.1.4 指针和指针变量"></a>7.1.4 指针和指针变量</h4><ul><li><font color="red">内存区的每一个字节都有一个编号，这就是“地址”</font></li><li>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</li><li>指针的实质就是内存“地址”。指针就是地址，地址就是指针</li><li><font color="red">指针是内存单元的编号，指针变量是存放地址的变量</font></li><li>通常我们叙述时会把指针变量简称为指针，实际他们含义并不一样</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000912.png" alt="图片2"></p><h3 id="7-2-指针基础知识"><a href="#7-2-指针基础知识" class="headerlink" title="7.2 指针基础知识"></a>7.2 指针基础知识</h3><h4 id="7-2-1-指针变量的定义和使用"><a href="#7-2-1-指针变量的定义和使用" class="headerlink" title="7.2.1 指针变量的定义和使用"></a>7.2.1 指针变量的定义和使用</h4><ul><li><p>指针也是一种数据类型，指针变量也是一种变量</p></li><li><p>指针变量指向谁，就把谁的地址赋值给指针变量</p></li><li><p>“*”操作符操作的是指针变量指向的内存空间</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p, %p\n&quot;</span>, &amp;a, &amp;b); <span class="comment">//打印a, b的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int *代表是一种数据类型，int*指针类型，p才是变量名</span></span><br><span class="line"><span class="comment">//定义了一个指针类型的变量，可以指向一个int类型变量的地址</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;<span class="comment">//将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p);<span class="comment">//p指向了a的地址，*p就是a的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p1 = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, *p1);<span class="comment">//*p1指向了b的地址，*p1就是b的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>&amp;</code>可以取得一个变量在内存中的地址。但是，<font color="red">不能取寄存器变量</font>，因为寄存器变量不在内存里，而在CPU里面，所以是没有地址的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/7$ ./7.2.1 </span><br><span class="line">0x7ffda2091cf4, 0x7ffda2091cf3</span><br><span class="line">0</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h4 id="7-2-2-通过指针间接修改变量的值"><a href="#7-2-2-通过指针间接修改变量的值" class="headerlink" title="7.2.2 通过指针间接修改变量的值"></a>7.2.2 通过指针间接修改变量的值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d, *p=%d\n&quot;</span>, a, *p);</span><br><span class="line"></span><br><span class="line">p = &amp;b</span><br><span class="line">*p = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d, *p = %d\n&quot;</span>, b, *p);</span><br></pre></td></tr></table></figure><h4 id="7-2-3-指针大小"><a href="#7-2-3-指针大小" class="headerlink" title="7.2.3 指针大小"></a>7.2.3 指针大小</h4><ul><li><font color="red">使用sizeof()测量指针的大小，得到的总是：4或8</font></li><li><code>sizeof()</code>测的是指针变量指向存储地址的大小</li><li>在32位平台，所有的指针（地址）都是32位(4字节)</li><li>在64位平台，所有的指针（地址）都是64位(8字节)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p1;</span><br><span class="line">    <span class="type">int</span> **p2;</span><br><span class="line">    <span class="type">char</span> *p3;</span><br><span class="line">    <span class="type">char</span> **p4;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p1) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(p1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p2) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(p2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p3) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(p3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p4) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(p4));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(double *) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span> *));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(p1) = <span class="number">8</span></span><br><span class="line"><span class="keyword">sizeof</span>(p2) = <span class="number">8</span></span><br><span class="line"><span class="keyword">sizeof</span>(p3) = <span class="number">8</span></span><br><span class="line"><span class="keyword">sizeof</span>(p4) = <span class="number">8</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="type">double</span> *) = <span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="7-2-4-野指针和空指针"><a href="#7-2-4-野指针和空指针" class="headerlink" title="7.2.4 野指针和空指针"></a>7.2.4 野指针和空指针</h4><p>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，<font color="red">任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针</font>，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，<font color="red">野指针不会直接引发错误，操作野指针指向的内存区域才会出问题</font>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = a; <span class="comment">//把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0x12345678</span>; <span class="comment">//给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span></span><br><span class="line"></span><br><span class="line">*p = <span class="number">1000</span>;  <span class="comment">//操作野指针指向未知区域，内存出问题，err</span></span><br></pre></td></tr></table></figure><p>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>NULL是一个值为0的宏常量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NULL    ((void *)0)</span></span><br></pre></td></tr></table></figure><h4 id="7-2-5-万能指针void"><a href="#7-2-5-万能指针void" class="headerlink" title="7.2.5 万能指针void *"></a>7.2.5 万能指针void *</h4><blockquote><p><code>void *</code>指针可以指向任意变量的内存空间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">p = (<span class="type">void</span> *)&amp;a; <span class="comment">//指向变量时，最好转换为void *</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用指针变量指向的内存时，转换为int *</span></span><br><span class="line">*( (<span class="type">int</span> *)p ) = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br></pre></td></tr></table></figure><h4 id="7-2-6-const修饰的指针变量"><a href="#7-2-6-const修饰的指针变量" class="headerlink" title="7.2.6 const修饰的指针变量"></a>7.2.6 const修饰的指针变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//指向常量的指针</span></span><br><span class="line"><span class="comment">//修饰*，指针指向内存区域不能修改，指针指向可以变</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * p1 = &amp;a;</span><br><span class="line"><span class="comment">// *p1 = 111 // err</span></span><br><span class="line">p1 = &amp;b; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">//指针常量</span></span><br><span class="line"><span class="comment">//修饰p1，指针指向不能变，指针指向的内存可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p2 = &amp;a;</span><br><span class="line"><span class="comment">// p2 = &amp;b; //err</span></span><br><span class="line">*p2 = <span class="number">333</span>; <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p><font color="red">在编辑程序时，指针作为函数参数，如果不想修改指针对应内存空间的值，需要使用const修饰指针数据类型</font></p><h3 id="7-3-指针和数组"><a href="#7-3-指针和数组" class="headerlink" title="7.3 指针和数组"></a>7.3 指针和数组</h3><h4 id="7-3-1-数组名"><a href="#7-3-1-数组名" class="headerlink" title="7.3.1 数组名"></a>7.3.1 数组名</h4><p>数组名字是数组的首元素地址，但它是一个地址常量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 10; //err, 数组名只是常量，不能修改</span></span><br></pre></td></tr></table></figure><h4 id="7-3-2-指针操作数组元素"><a href="#7-3-2-指针操作数组元素" class="headerlink" title="7.3.2 指针操作数组元素"></a>7.3.2 指针操作数组元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// printf(&quot;%d, &quot; a[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, *(a+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> *p = a;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    p[i] = <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">7</span>$ ./<span class="number">7.3</span><span class="number">.2</span> </span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br><span class="line"><span class="number">0246810121416</span></span><br></pre></td></tr></table></figure><h4 id="7-3-3-指针加减运算"><a href="#7-3-3-指针加减运算" class="headerlink" title="7.3.3 指针加减运算"></a>7.3.3 指针加减运算</h4><h5 id="1-加法运算"><a href="#1-加法运算" class="headerlink" title="1. 加法运算"></a>1. 加法运算</h5><ul><li><font color="red">指针计算不是简单的整数相加</font></li><li>如果是一个<code>int *</code>，+1的结果是增加一个int的大小</li><li>如果是一个<code>char *</code>，+1的结果是增加一个char大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> *p = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">    p += <span class="number">2</span>; <span class="comment">//移动了2个int</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *p1 = &amp;b;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p1);</span><br><span class="line">    p1 += <span class="number">2</span>;<span class="comment">// 移动了2个char</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p1);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过改变指针指向操作数组元素：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-减法运算"><a href="#2-减法运算" class="headerlink" title="2. 减法运算"></a>2. 减法运算</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = a+n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *p);</span><br><span class="line">p--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/7$ ./7.3.3-2 </span><br><span class="line">9, 8, 7, 6, 5, 4, 3, 2, 1, </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> *p2 = &amp;a[<span class="number">2</span>]; <span class="comment">//第2个元素地址</span></span><br><span class="line"><span class="type">int</span> *p1 = &amp;a[<span class="number">1</span>]; <span class="comment">//第1个元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p1 = %p, p2 = %p\n&quot;</span>, p1, p2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1 = p2 - p1; <span class="comment">//n1 = 1</span></span><br><span class="line"><span class="type">int</span> n2 = (<span class="type">int</span>)p2 - (<span class="type">int</span>)p1; <span class="comment">//n2 = 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n1 = %d, n2 = %d\n&quot;</span>, n1, n2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-4-指针数组"><a href="#7-3-4-指针数组" class="headerlink" title="7.3.4  指针数组"></a>7.3.4  指针数组</h4><p>指针数组，它是数组，数组的每个元素都是指针类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 指针数组</span></span><br><span class="line"><span class="type">int</span> *p[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>] = &amp;b;</span><br><span class="line">p[<span class="number">1</span>] = &amp;b;</span><br><span class="line">p[<span class="number">2</span>] = &amp;c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(p)/<span class="keyword">sizeof</span>(p[<span class="number">0</span>]);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, *(p[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-多级指针"><a href="#7-4-多级指针" class="headerlink" title="7.4 多级指针"></a>7.4 多级指针</h3><ul><li>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针</li><li>二级指针就是指向一个一级指针变量地址的指针</li><li>三级指针基本用不着，但考试会考</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a; <span class="comment">//一级指针</span></span><br><span class="line">*p = <span class="number">100</span>; <span class="comment">//*p就是a</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> **q = &amp;p;</span><br><span class="line"><span class="comment">//*q就是p</span></span><br><span class="line"><span class="comment">//**q就是a</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ***t = &amp;q;</span><br><span class="line"><span class="comment">//*t就是q</span></span><br><span class="line"><span class="comment">//**t就是p</span></span><br><span class="line"><span class="comment">//***t就是a</span></span><br></pre></td></tr></table></figure><h3 id="7-5-指针和函数"><a href="#7-5-指针和函数" class="headerlink" title="7.5 指针和函数"></a>7.5 指针和函数</h3><h4 id="7-5-1-函数形参改变实参的值"><a href="#7-5-1-函数形参改变实参的值" class="headerlink" title="7.5.1 函数形参改变实参的值"></a>7.5.1 函数形参改变实参的值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d, y=%d\n&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap2</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line">*y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">swap1(a, b); <span class="comment">// 值传递</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">b = <span class="number">5</span>;</span><br><span class="line">swap2(&amp;a, &amp;b);<span class="comment">// 地址传递</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a2 = %d, b2=%d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/7$ ./7.5.1 </span><br><span class="line">x=5, y=3</span><br><span class="line">a = 3, b = 5</span><br><span class="line">a2 = 5, b2=3</span><br></pre></td></tr></table></figure><h4 id="7-5-2-数组名做函数参数"><a href="#7-5-2-数组名做函数参数" class="headerlink" title="7.5.2 数组名做函数参数"></a>7.5.2 数组名做函数参数</h4><blockquote><p>数组名做函数参数，函数的形参会退化为指针：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArrary</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名做函数参数</span></span><br><span class="line">printArrary(a, n); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, </span><br></pre></td></tr></table></figure><h4 id="7-5-3-指针做为函数的返回值"><a href="#7-5-3-指针做为函数的返回值" class="headerlink" title="7.5.3 指针做为函数的返回值"></a>7.5.3 指针做为函数的返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">getA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">*(getA()) = <span class="number">111</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="comment">// 输出： a = 111;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-指针和字符串"><a href="#7-6-指针和字符串" class="headerlink" title="7.6 指针和字符串"></a>7.6 指针和字符串</h3><h4 id="7-6-1-字符指针"><a href="#7-6-1-字符指针" class="headerlink" title="7.6.1 字符指针"></a>7.6.1 字符指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = str;</span><br><span class="line">*p = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">p++;</span><br><span class="line">*p=<span class="string">&#x27;i&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;mike Tao&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *q = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">7</span>$ ./<span class="number">7.6</span><span class="number">.1</span> </span><br><span class="line">millo world</span><br><span class="line">mike Tao</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h4 id="7-6-2-字符指针做函数参数"><a href="#7-6-2-字符指针做函数参数" class="headerlink" title="7.6.2 字符指针做函数参数"></a>7.6.2 字符指针做函数参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mystract</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(dest[len1])</span><br><span class="line">    &#123;</span><br><span class="line">        len1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(src[len2])</span><br><span class="line">    &#123;</span><br><span class="line">        len2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dest[len1 + i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> dst[<span class="number">100</span>] = <span class="string">&quot;hello mike&quot;</span>;</span><br><span class="line">    <span class="type">char</span> src[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    mystract(dst,src);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dst = %s\n&quot;</span>, dst);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">7</span>$ ./<span class="number">7.7</span><span class="number">.3</span> </span><br><span class="line">dst = hello mike123456</span><br></pre></td></tr></table></figure><h4 id="7-6-3-const-修饰的指针变量"><a href="#7-6-3-const-修饰的指针变量" class="headerlink" title="7.6.3 const 修饰的指针变量"></a>7.6.3 const 修饰的指针变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// const 修饰一个变量为只读</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// a = 100; //error</span></span><br><span class="line">    </span><br><span class="line">    /指针变量， 指针指向的内存， <span class="number">2</span>个不同概念</span><br><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;aklgjdlsgjlkds&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从左往右看，跳过类型，看修饰哪个字符</span></span><br><span class="line"><span class="comment">//如果是*， 说明指针指向的内存不能改变</span></span><br><span class="line"><span class="comment">//如果是指针变量，说明指针的指向不能改变，指针的值不能修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *p = buf;</span><br><span class="line">    <span class="comment">// 等价于上同  char const *p1 = buf;</span></span><br><span class="line">    <span class="comment">//p[1] = &#x27;2&#x27;; //err</span></span><br><span class="line">    </span><br><span class="line">    p = <span class="string">&quot;agdlsjaglkdsajgl&quot;</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> p2 = buf;</span><br><span class="line">    p2[<span class="number">1</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line"><span class="comment">//p2 = &quot;salkjgldsjaglk&quot;; //err</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//p3为只读，指向不能变，指向的内存也不能变</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> p3 = buf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-4-指针数组做为main函数的形参"><a href="#7-6-4-指针数组做为main函数的形参" class="headerlink" title="7.6.4 指针数组做为main函数的形参"></a>7.6.4 指针数组做为main函数的形参</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>;</span><br></pre></td></tr></table></figure><ul><li><code>main</code>函数是操作系统调用的，第一个参数标明<code>argc</code>数组的成员数量，<code>argv</code>数组的每个成员都是<code>char *</code>类型</li><li><code>argv</code>是命令行参数的字符串数组</li><li><code>argc</code>代表命令行参数的数量，程序名字本身算一个参数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//argc: 传参数的个数（包含可执行程序）</span></span><br><span class="line"><span class="comment">//argv：指针数组，指向输入的参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针数组，它是数组，每个元素都是指针</span></span><br><span class="line"><span class="type">char</span> *a[] = &#123; <span class="string">&quot;aaaaaaa&quot;</span>, <span class="string">&quot;bbbbbbbbbb&quot;</span>, <span class="string">&quot;ccccccc&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>, argc);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-5-项目开发常用字符串应用模型"><a href="#7-6-5-项目开发常用字符串应用模型" class="headerlink" title="7.6.5 项目开发常用字符串应用模型"></a>7.6.5 项目开发常用字符串应用模型</h4><h5 id="1-strstr中的while和do-while模型"><a href="#1-strstr中的while和do-while模型" class="headerlink" title="1. strstr中的while和do-while模型"></a>1. strstr中的while和do-while模型</h5><blockquote><p>利用strstr标准库函数找出一个字符串中substr出现的个数</p></blockquote><h6 id="a-while模型"><a href="#a-while模型" class="headerlink" title="a. while模型"></a>a. while模型</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((p = <span class="built_in">strstr</span>(p, <span class="string">&quot;abcd&quot;</span>)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//能进来，肯定有匹配的子串</span></span><br><span class="line"><span class="comment">//重新设置起点位置</span></span><br><span class="line">        p = p + <span class="built_in">strlen</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">        n++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(*p == <span class="number">0</span>) <span class="comment">// 结束符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 n = 4</span></span><br></pre></td></tr></table></figure><h6 id="b-do-while"><a href="#b-do-while" class="headerlink" title="b. do-while"></a>b. do-while</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">strstr</span>(p, <span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line"><span class="comment">// 重新设置查找的起点</span></span><br><span class="line">p = p + <span class="built_in">strlen</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(*p != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n=%d\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-两头堵模型"><a href="#5-两头堵模型" class="headerlink" title="5. 两头堵模型"></a>5. 两头堵模型</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> *p, <span class="type">int</span> *n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(p = <span class="literal">NULL</span> || n = <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(p) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//从左边开始</span></span><br><span class="line"><span class="comment">//如果当前字符为空，而且没有结束</span></span><br><span class="line">    <span class="keyword">while</span>(p[begin] = <span class="string">&#x27;&#x27; &amp;&amp; p[begin] != 0)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        begin++;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    //从右往左移动</span></span><br><span class="line"><span class="string">while (p[end] == &#x27;</span> <span class="string">&#x27; &amp;&amp; end &gt; 0)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">end--; //往左移动</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">if (end == 0)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">return -2;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//非空元素个数</span></span><br><span class="line"><span class="string">*n = end - begin + 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int main(void)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    char *p = &quot;      abcddsgadsgefg      &quot;;</span></span><br><span class="line"><span class="string">    int ret = 0;</span></span><br><span class="line"><span class="string">    int n = 0;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ret = fun(p, &amp;n);</span></span><br><span class="line"><span class="string">    if(ret != 0)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return ret;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    printf(&quot;非空字符串元素个数：%d\n&quot;, n);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">7</span>$ ./<span class="number">7.6</span><span class="number">.5</span><span class="number">-2</span> </span><br><span class="line">非空字符串元素个数：<span class="number">14</span></span><br></pre></td></tr></table></figure><h5 id="3-字符串反转模型-逆置"><a href="#3-字符串反转模型-逆置" class="headerlink" title="3. 字符串反转模型(逆置)"></a>3. 字符串反转模型(逆置)</h5><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000913.png" alt="图片1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">inverse</span><span class="params">(<span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *str = p;</span><br><span class="line">    <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end = <span class="built_in">strlen</span>(str) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(begin &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 交换元素</span></span><br><span class="line">        tmp = str[begin];</span><br><span class="line">        str[begin] = str[end];</span><br><span class="line">        str[end] = tmp;</span><br><span class="line">        </span><br><span class="line">        begin++;  <span class="comment">//往右移动位置</span></span><br><span class="line">        end--;<span class="comment">// 往左移动位置</span></span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//char *str = &quot;abcdefg&quot;; //文件常量区，内容不允许修改</span></span><br><span class="line">        <span class="type">char</span> str[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = inverse(str);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">7</span>$ ./<span class="number">7.6</span><span class="number">.5</span><span class="number">-3</span> </span><br><span class="line">str = fedcba</span><br></pre></td></tr></table></figure><h4 id="7-6-6-字符串处理函数"><a href="#7-6-6-字符串处理函数" class="headerlink" title="7.6.6 字符串处理函数"></a>7.6.6 字符串处理函数</h4><h5 id="1-strcpy"><a href="#1-strcpy" class="headerlink" title="1. strcpy()"></a>1. strcpy()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：把src所指向的字符串复制到dest所指向的空间中，<font color="red">‘\0’也会拷贝过去</font></p><p>参数：</p><p>​    dest：目的字符串首地址</p><p>​    src：源字符首地址</p><p>返回值：</p><p>​    成功：返回dest字符串的首地址</p><p>​    失败：NULL</p></blockquote><p><font color="red">注意：如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>] = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(dest, src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dest);</span><br></pre></td></tr></table></figure><h5 id="2-strncpy"><a href="#2-strncpy" class="headerlink" title="2. strncpy()"></a>2. strncpy()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：把src指向字符串的前n个字符复制到dest所指向的空间中，<font color="red">是否拷贝结束符看指定的长度是否包含’\0’。</font>&gt;</p><p>参数：</p><p>​    dest：目的字符串首地址</p><p>​    src：源字符首地址</p><p>​    n：指定需要拷贝字符串个数</p><p>返回值：</p><p>​    成功：返回dest字符串的首地址</p><p>​    失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>] ;</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(dest, src, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dest);</span><br><span class="line"></span><br><span class="line">dest[<span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dest);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-strcat"><a href="#3-strcat" class="headerlink" title="3. strcat()"></a>3. strcat()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将src字符串连接到dest的尾部，‘\0’也会追加过去</p><p>参数：</p><p>​    dest：目的字符串首地址</p><p>​    src：源字符首地址</p><p>返回值：</p><p>​    成功：返回dest字符串的首地址</p><p>​    失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strcat</span>(str, src));</span><br></pre></td></tr></table></figure><h5 id="4-strncat"><a href="#4-strncat" class="headerlink" title="4. strncat"></a>4. strncat</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将src字符串前n个字符连接到dest的尾部，‘\0’也会追加过去</p><p>参数：</p><p>​    dest：目的字符串首地址</p><p>​    src：源字符首地址</p><p>​    n：指定需要追加字符串个数</p><p>返回值：</p><p>​    成功：返回dest字符串的首地址</p><p>​    失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">strncat</span>(str, src, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h5 id="5-strcmp"><a href="#5-strcmp" class="headerlink" title="5. strcmp"></a>5. strcmp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：比较 s1 和 s2 的大小，<font color="red">比较的是字符ASCII码大小。</font></p><p>参数：</p><p>​    s1：字符串1首地址</p><p>​    s2：字符串2首地址</p><p>返回值：</p><p>​    相等：0</p><p>​    大于：&gt;0 在不同操作系统strcmp结果会不同  返回ASCII差值</p><p>​    小于：&lt;0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *str2 = <span class="string">&quot;hello mike&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1==str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1&gt;str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1&lt;str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-strncmp"><a href="#6-strncmp" class="headerlink" title="6. strncmp()"></a>6. strncmp()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：比较 s1 和 s2 前n个字符的大小，<font color="red">比较的是字符ASCII码大小。</font></p><p>参数：</p><p>​    s1：字符串1首地址</p><p>​    s2：字符串2首地址</p><p>​    n：指定比较字符串的数量</p><p>返回值：</p><p>​    相等：0</p><p>​    大于： &gt; 0</p><p>​    小于： &lt; 0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *str2 = <span class="string">&quot;hello mike&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(str1, str2, <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1==str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, <span class="string">&quot;hello world&quot;</span>) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1&gt;str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1&lt;str2\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-sprintf"><a href="#7-sprintf" class="headerlink" title="7. sprintf()"></a>7. sprintf()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 ‘<code>\0</code>‘ 为止。</p><p>参数：</p><p>​    str：字符串首地址</p><p>​    format：字符串格式，用法和printf()一样</p><p>返回值：</p><p>​    成功：实际格式化的字符个数</p><p>​    失败： - 1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dst[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, src = %s&quot;</span>, a, src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len=<span class="built_in">sprintf</span>(dst, <span class="string">&quot;a = %d, src = %s&quot;</span>, a, src);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dst = \&quot; %s\&quot;\n&quot;</span>, dst);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len = %d\n&quot;</span>, len);</span><br></pre></td></tr></table></figure><h5 id="8-sscanf"><a href="#8-sscanf" class="headerlink" title="8. sscanf()"></a>8. sscanf()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。</p><p>参数：</p><p>​    str：指定的字符串首地址</p><p>​    format：字符串格式，用法和scanf()一样</p><p>返回值：</p><p>​    成功：参数数目，成功转换的值的个数</p><p>​    失败： - 1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;a=10, b=20&quot;</span>;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="built_in">sscanf</span>(src, <span class="string">&quot;a=%d,  b=%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%d, b:%d\n&quot;</span>, a, b);</span><br></pre></td></tr></table></figure><h5 id="9-strchr"><a href="#9-strchr" class="headerlink" title="9.strchr()"></a>9.strchr()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> c)</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>功能</strong>：在字符串s中查找字母c出现的位置</p><p><strong>参数</strong>：</p><p>​    s：字符串首地址</p><p>​    c：匹配字母(字符)</p><p><strong>返回值</strong>：</p><p>​    成功：返回第一次出现的c地址</p><p>​    失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;ddda123abcd&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="built_in">strchr</span>(src, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br></pre></td></tr></table></figure><h5 id="10-strstr"><a href="#10-strstr" class="headerlink" title="10. strstr()"></a>10. strstr()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *haystack, <span class="type">const</span> <span class="type">char</span> *needle)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：在字符串haystack中查找字符串needle出现的位置</p><p>参数：</p><p>​    haystack：源字符串首地址</p><p>​    needle：匹配字符串首地址</p><p>返回值：</p><p>​    成功：返回第一次出现的needle地址</p><p>​    失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;ddddabcd123abcd333abcd&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="built_in">strstr</span>(src, <span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br></pre></td></tr></table></figure><h5 id="11-strtok"><a href="#11-strtok" class="headerlink" title="11. strtok()"></a>11. strtok()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strtok</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *delim)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：来将字符串分割成一个个片段。当<code>strtok()</code>在参数s的字符串中发现参数delim中包含的分割字符时, 则会将该字符改为\0 字符，当连续出现多个时只替换第一个为\0。</p><p>参数：</p><p>​    str：指向欲分割的字符串</p><p>​    delim：为分割字符串中包含的所有字符</p><p>返回值：</p><p>​    成功：分割后字符串首地址</p><p>​    失败：NULL</p></blockquote><ul><li>在第一次调用时：<code>strtok()</code>必需给予参数s字符串</li><li>往后的调用则将参数s设置成NULL，每次调用成功则返回指向被分割出片段的指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">100</span>] = <span class="string">&quot;adc*fvcv.ebcy*hghbdfg$casdert&quot;</span>;</span><br><span class="line"><span class="type">char</span> *s = strtok(a, <span class="string">&quot;.*$&quot;</span>);<span class="comment">//将&quot;*&quot;分割的子串取出</span></span><br><span class="line"><span class="keyword">while</span> (s != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">s = strtok(<span class="literal">NULL</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-atoi"><a href="#12-atoi" class="headerlink" title="12. atoi()"></a>12. atoi()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *nptr)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：<code>atoi()</code>会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符(‘\0’)才结束转换，并将结果返回返回值。</p><p>参数：</p><p>​    nptr：待转换的字符串</p><p>返回值：成功转换后整数</p></blockquote><p>类似的函数有：</p><ul><li><code>atof()</code>：把一个小数形式的字符串转化为一个浮点数</li><li><code>atol()</code>：将一个字符串转化为long类型</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> str1[] = <span class="string">&quot;          -10&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = atoi(str1);</span><br><span class="line">printf(<span class="string">&quot;num1 = %d\n&quot;</span>, num1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span> str2[] = <span class="string">&quot;0.123&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> num2 = atof(str2);</span><br><span class="line">printf(<span class="string">&quot;num2 = %lf\n&quot;</span>, num2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span> str3[] = <span class="string">&quot;123L&quot;</span>;</span><br><span class="line"><span class="built_in">long</span> num3 = atol(str3);</span><br><span class="line">printf(<span class="string">&quot;num3 = %ld\n&quot;</span>, num3);</span><br></pre></td></tr></table></figure><h3 id="7-7-指针小结"><a href="#7-7-指针小结" class="headerlink" title="7.7 指针小结"></a>7.7 指针小结</h3><table><thead><tr><th><strong>定义</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>int i</code></td><td>定义整形变量</td></tr><tr><td><code>int *p</code></td><td>定义一个指向int的指针变量</td></tr><tr><td><code>int a[10]</code></td><td>定义一个有10个元素的数组，每个元素类型为int</td></tr><tr><td><code>int *p[10]</code></td><td>定义一个有10个元素的数组，每个元素类型为int*</td></tr><tr><td><code>int func()</code></td><td>定义一个函数，返回值为int型</td></tr><tr><td><code>int *func()</code></td><td>定义一个函数，返回值为int *型</td></tr><tr><td><code>int **p </code></td><td>定义一个指向int的指针的指针，二级指针</td></tr></tbody></table><h2 id="8-内存管理"><a href="#8-内存管理" class="headerlink" title="8. 内存管理"></a>8. 内存管理</h2><h3 id="8-1-作用域"><a href="#8-1-作用域" class="headerlink" title="8.1 作用域"></a>8.1 作用域</h3><p>C语言变量的作用域分为：</p><ul><li><p>代码块作用域(代码块是{}之间的一段代码)</p></li><li><p>函数作用域</p></li><li><p>文件作用域</p></li></ul><h4 id="8-1-1-局部变量"><a href="#8-1-1-局部变量" class="headerlink" title="8.1.1 局部变量"></a>8.1.1 局部变量</h4><p>局部变量也叫<code>auto自动变量</code>(auto可写可不写)，一般情况下代码块<code>&#123;&#125;</code>内部定义的变量都是自动变量，它有如下特点：</p><ul><li>在一个函数内定义，只在函数范围内有效</li><li>在复合语句中定义，只在复合语句中有效</li><li><font color="red">随着函数调用的结束或复合语句的结束局部变量的声明声明周期也结束</font></li><li>如果没有赋初值，内容为随机</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// auto 写不写是一样的</span></span><br><span class="line"><span class="comment">// auto 只能出现在&#123;&#125;内部</span></span><br><span class="line"><span class="keyword">auto</span> <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// b = 100; //err 在main作用域中没有b</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在复合语句中定义，只在复合语句中有效</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a = 10;//err离开if()的复合语句，a已经不存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-2-静态-static-局部变量"><a href="#8-1-2-静态-static-局部变量" class="headerlink" title="8.1.2 静态(static)局部变量"></a>8.1.2 静态(static)局部变量</h4><ul><li>static局部变量的作用域也是在定义的函数内有效</li><li>static局部变量的生命周期和程序运行周期一样，<font color="red">同时staitc局部变量的值只初始化一次，但可以赋值多次</font></li><li>static局部变量若未赋以初值，则由系统自动赋值：数值型变量自动赋初值0，字符型变量赋空字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 静态局部变量，没有赋值，系统赋值为0，而且只会初始化一次</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    fun1();</span><br><span class="line">    fun1();</span><br><span class="line">    fun2();</span><br><span class="line">    fun2();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-3-全局变量"><a href="#8-1-3-全局变量" class="headerlink" title="8.1.3 全局变量"></a>8.1.3 全局变量</h4><ul><li>在函数外定义，可被本文件及其它文件中的函数所共用，若其它文件中的函数调用此变量,须用<code>extern</code>声明</li><li>全局变量的生命周期和程序运行周期一样</li><li>不同文件的全局变量不可重名</li></ul><h4 id="8-1-4-静态-static-全局变量"><a href="#8-1-4-静态-static-全局变量" class="headerlink" title="8.1.4 静态(static)全局变量"></a>8.1.4 静态(static)全局变量</h4><ul><li>在函数外定义,作用范围被限制在所定义的文件中</li><li>不同文件静态全局变量可以重名,但作用域不冲突</li><li><code>static</code>全局变量的生命周期和程序运行周期一样，同时staitc全局变量的值只初始化一次</li></ul><h4 id="8-1-5-extern全局变量声明"><a href="#8-1-5-extern全局变量声明" class="headerlink" title="8.1.5  extern全局变量声明"></a>8.1.5  extern全局变量声明</h4><p><code>extern int a;</code>声明一个变量，这个全局变量在别的文件中已经定义了，这里只是声明，而不是定义</p><h4 id="8-1-6-全局函数和静态函数"><a href="#8-1-6-全局函数和静态函数" class="headerlink" title="8.1.6 全局函数和静态函数"></a>8.1.6 全局函数和静态函数</h4><p>在C语言中函数默认都是全局的，使用关键字<code>static</code>可以将函数声明为静态，函数定义为<code>static</code>就意味着这个函数只能在定义这个函数的文件中使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用</p><p>对于不同文件中的<code>staitc</code>函数名字可以相同</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000914.jpg" alt="2016-06-05_011701"></p><p>注意：</p><ul><li><p>允许在不同的函数中使用相同的变量名，它们代表不同的对象，分配不同的单元，互不干扰。</p></li><li><p>同一源文件中,允许全局变量和局部变量同名，在局部变量的作用域内，全局变量不起作用。</p></li><li><p>所有的函数默认都是全局的，意味着所有的函数都不能重名，但如果是<code>staitc</code>函数，那么作用域是文件级的，所以不同的文件<code>static</code>函数名是可以相同的</p></li></ul><h4 id="8-1-7-总结"><a href="#8-1-7-总结" class="headerlink" title="8.1.7 总结"></a>8.1.7 总结</h4><table><thead><tr><th><strong>类型</strong></th><th><strong>作用域</strong></th><th><strong>生命周期</strong></th></tr></thead><tbody><tr><td>auto变量</td><td>一对{}内</td><td>当前函数</td></tr><tr><td>static局部变量</td><td>一对{}内</td><td>整个程序运行期</td></tr><tr><td>extern变量</td><td>整个程序</td><td>整个程序运行期</td></tr><tr><td>static全局变量</td><td>当前文件</td><td>整个程序运行期</td></tr><tr><td>extern函数</td><td>整个程序</td><td>整个程序运行期</td></tr><tr><td>static函数</td><td>当前文件</td><td>整个程序运行期</td></tr><tr><td>register变量</td><td>一对{}内</td><td>当前函数</td></tr><tr><td>全局变量</td><td>整个程序</td><td>整个程序运行期</td></tr></tbody></table><h3 id="8-2-内存布局"><a href="#8-2-内存布局" class="headerlink" title="8.2 内存布局"></a>8.2 内存布局</h3><h4 id="8-2-1-内存分区"><a href="#8-2-1-内存分区" class="headerlink" title="8.2.1 内存分区"></a>8.2.1 内存分区</h4><p>C代码经过<font color="red">预处理、编译、汇编、链接</font>4步后生成一个可执行程序。</p><p>在 Windows 下，程序是一个普通的可执行文件，以下列出一个二进制可执行文件的基本情况：</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000916.png" alt="image-20200925161021903"></p><p>通过上图可以得知，在没有运行程序前，也就是说<font color="red">程序没有加载到内存前</font>，可执行程序内部已经分好3段信息，分别为<font color="red">代码区（text）、数据区（data）和未初始化数据区（bss）</font>3 个部分（有些人直接把data和bss合起来叫做静态区或全局区）。</p><ul><li>代码区<ul><li>存放 CPU 执行的机器指令。通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。<font color="red">代码区通常是只读的</font>，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息</li></ul></li><li>全局初始化数据区&#x2F;静态数据区（data段）<ul><li>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）</li></ul></li><li>未初始化数据区（又叫 bss 区）<ul><li>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）</li><li>程序在加载到内存前，<font color="red">代码区和全局区(data和bss)的大小就是固定的</font>，程序运行期间不能改变。然后，运行可执行程序，系统把程序加载到内存，<font color="red">除了根据可执行程序的信息分出代码区（text）、数据区（data）和未初始化数据区（bss）之外，还额外增加了栈区、堆区</font></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000917.jpg" alt="img"></p><ul><li><p>代码区（text segment）</p><ul><li>加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</li></ul></li><li><p>未初始化数据区（BSS）</p><ul><li>加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</li></ul></li><li><p>全局初始化数据区&#x2F;静态数据区（data segment）</p><ul><li>加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</li></ul></li><li><p>栈区（stack）</p><ul><li>栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</li></ul></li><li><p>堆区（heap）</p><ul><li>堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul></li></ul><h4 id="8-2-2-存储类型总结"><a href="#8-2-2-存储类型总结" class="headerlink" title="8.2.2 存储类型总结"></a>8.2.2 存储类型总结</h4><table><thead><tr><th><strong>类型</strong></th><th><strong>作用域</strong></th><th><strong>生命周期</strong></th><th><strong>存储位置</strong></th></tr></thead><tbody><tr><td>auto变量</td><td>一对{}内</td><td>当前函数</td><td>栈区</td></tr><tr><td>static局部变量</td><td>一对{}内</td><td>整个程序运行期</td><td>初始化在data段，未初始化在BSS段</td></tr><tr><td>extern变量</td><td>整个程序</td><td>整个程序运行期</td><td>初始化在data段，未初始化在BSS段</td></tr><tr><td>static全局变量</td><td>当前文件</td><td>整个程序运行期</td><td>初始化在data段，未初始化在BSS段</td></tr><tr><td>extern函数</td><td>整个程序</td><td>整个程序运行期</td><td>代码区</td></tr><tr><td>static函数</td><td>当前文件</td><td>整个程序运行期</td><td>代码区</td></tr><tr><td>register变量</td><td>一对{}内</td><td>当前函数</td><td>运行时存储在CPU寄存器</td></tr><tr><td>字符串常量</td><td>当前文件</td><td>整个程序运行期</td><td>data段</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> f;</span><br><span class="line"><span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> h = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> c;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> *i = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">char</span> *k = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a\t %p\t //局部未初始化变量\n&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;b\t %p\t //局部初始化变量\n&quot;</span>, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;c\t %p\t //静态局部未初始化变量\n&quot;</span>, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;d\t %p\t //静态局部初始化变量\n&quot;</span>, &amp;d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;e\t %p\t //全局未初始化变量\n&quot;</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;f\t %p\t //全局静态未初始化变量\n&quot;</span>, &amp;f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;g\t %p\t //全局初始化变量\n&quot;</span>, &amp;g);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;h\t %p\t //全局静态初始化变量\n&quot;</span>, &amp;h);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i\t %p\t //只读数据(文字常量区)\n&quot;</span>, i);</span><br><span class="line">    </span><br><span class="line">k = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k\t %p\t //动态分配的内存\n&quot;</span>, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tao@Taoc:~/Desktop/C/<span class="number">8</span>$ ./<span class="number">8.2</span><span class="number">.2</span> </span><br><span class="line">&amp;a <span class="number">0x7ffe96a0a7e0</span> <span class="comment">//局部未初始化变量</span></span><br><span class="line">&amp;b <span class="number">0x7ffe96a0a7e4</span> <span class="comment">//局部初始化变量</span></span><br><span class="line">&amp;c <span class="number">0x559add9ab024</span> <span class="comment">//静态局部未初始化变量</span></span><br><span class="line">&amp;d <span class="number">0x559add9ab018</span> <span class="comment">//静态局部初始化变量</span></span><br><span class="line">&amp;e <span class="number">0x559add9ab028</span> <span class="comment">//全局未初始化变量</span></span><br><span class="line">&amp;f <span class="number">0x559add9ab020</span> <span class="comment">//全局静态未初始化变量</span></span><br><span class="line">&amp;g <span class="number">0x559add9ab010</span> <span class="comment">//全局初始化变量</span></span><br><span class="line">&amp;h <span class="number">0x559add9ab014</span> <span class="comment">//全局静态初始化变量</span></span><br><span class="line">i <span class="number">0x559add9a9008</span> <span class="comment">//只读数据(文字常量区)</span></span><br><span class="line">k <span class="number">0x559adeaac670</span> <span class="comment">//动态分配的内存</span></span><br></pre></td></tr></table></figure><h4 id="8-2-3-内存操作函数"><a href="#8-2-3-内存操作函数" class="headerlink" title="8.2.3 内存操作函数"></a>8.2.3 内存操作函数</h4><h5 id="1-memset"><a href="#1-memset" class="headerlink" title="1. memset()"></a>1. memset()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">memset</span><span class="params">(<span class="type">void</span> *s, <span class="type">int</span> c, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将s的内存区域的前n个字节以参数c填入</p><p>参数：</p><p>​    s：需要操作内存s的首地址</p><p>​    c：填充的字符，c虽然参数为int，但必须是unsigned char , 范围为0~255</p><p>​    n：指定需要设置的大小</p><p>返回值：s的首地址</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">97</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-memcpy"><a href="#2-memcpy" class="headerlink" title="2. memcpy()"></a>2. memcpy()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：拷贝src所指的内存内容的前n个字节到dest所值的内存地址上。</p><p>参数：</p><p>​    dest：目的内存首地址</p><p>​    src：源内存首地址，<font color="red">注意：dest和src所指的内存空间不可重叠，可能会导致程序报错</font></p><p>​    n：需要拷贝的字节数</p><p>返回值：dest的首地址</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//memcpy(&amp;a[3], a, 5 * sizeof(int)); //err, 内存重叠</span></span><br></pre></td></tr></table></figure><h5 id="3-memmove"><a href="#3-memmove" class="headerlink" title="3.  memmove()"></a>3.  memmove()</h5><p>memmove()功能用法和memcpy()一样，区别在于：dest和src所指的内存空间重叠时，memmove()仍然能处理，不过执行效率比memcpy()低些</p><h5 id="4-memcmp"><a href="#4-memcmp" class="headerlink" title="4.  memcmp()"></a>4.  memcmp()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">memcmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *s1, <span class="type">const</span> <span class="type">void</span> *s2, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：比较s1和s2所指向内存区域的前n个字节</p><p>参数：</p><p>​    s1：内存首地址1</p><p>​    s2：内存首地址2</p><p>​    n：需比较的前n个字节</p><p>返回值：</p><p>​    相等：&#x3D;0</p><p>​    大于：&gt;0</p><p>​    小于：&lt;0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="built_in">memcmp</span>(a, b, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag = %d\n&quot;</span>, flag);</span><br></pre></td></tr></table></figure><h4 id="8-2-4-堆区内存分配和释放"><a href="#8-2-4-堆区内存分配和释放" class="headerlink" title="8.2.4 堆区内存分配和释放"></a>8.2.4 堆区内存分配和释放</h4><h5 id="1-malloc"><a href="#1-malloc" class="headerlink" title="1. malloc()"></a>1. malloc()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：在内存的动态存储区(堆区)中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用memset初始化。</p><p>参数：</p><p>​    size：需要分配内存大小(单位：字节)</p><p>返回值：</p><p>成功：分配空间的起始地址</p><p>失败：NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count, *<span class="built_in">array</span>, n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要申请数组的个数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">array</span> = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">array</span> == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请空间失败!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将申请到空间清0</span></span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">array</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(count = <span class="number">0</span>; count &lt; n; count++)</span><br><span class="line">        <span class="built_in">array</span>[count] = count;</span><br><span class="line">    <span class="keyword">for</span>(count = <span class="number">0</span>; count &lt; n; count++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, <span class="built_in">array</span>[count]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">8</span>$ ./<span class="number">8.2</span><span class="number">.4</span><span class="number">-1</span> </span><br><span class="line">请输入要申请数组的个数：</span><br><span class="line"><span class="number">5</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>tao@Taoc:~/Desktop/C/<span class="number">8</span>$ </span><br></pre></td></tr></table></figure><h5 id="2-free"><a href="#2-free" class="headerlink" title="2. free()"></a>2. free()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。</p><p>参数：</p><p>ptr：需要释放空间的首地址，被释放区应是由malloc函数所分配的区域。</p><p>返回值：无</p></blockquote><h3 id="8-3-内存分区代码分析"><a href="#8-3-内存分区代码分析" class="headerlink" title="8.3 内存分区代码分析"></a>8.3 内存分区代码分析</h3><h4 id="1-返回栈区地址"><a href="#1-返回栈区地址" class="headerlink" title="1. 返回栈区地址"></a>1. 返回栈区地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = fun();</span><br><span class="line">    *p = <span class="number">100</span>; <span class="comment">// 操作野指针指向的内存，err</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-返回data区地址"><a href="#2-返回data区地址" class="headerlink" title="2. 返回data区地址"></a>2. 返回data区地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> &amp;a; <span class="comment">// 函数调用完毕,a不释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    p = func();</span><br><span class="line">    *p = <span class="number">100</span>; <span class="comment">// ok</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-值传递1"><a href="#3-值传递1" class="headerlink" title="3. 值传递1"></a>3. 值传递1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> *tmp)</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">*tmp = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argc[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">fun(p); <span class="comment">// 值传递，形参修改不会影响实参</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-值传递2"><a href="#4-值传递2" class="headerlink" title="4. 值传递2"></a>4. 值传递2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> *tmp)</span></span><br><span class="line">&#123;</span><br><span class="line">*tmp = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">fun(p); <span class="comment">//值传递</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p); <span class="comment">//ok，*p为100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-返回堆区地址"><a href="#5-返回堆区地址" class="headerlink" title="5. 返回堆区地址"></a>5. 返回堆区地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line">tmp = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">*tmp = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> tmp; <span class="comment">// 返回堆区地址，函数调用完毕，不释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">p = fun();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);<span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆区空间，使用完毕，手动释放</span></span><br><span class="line">    <span class="keyword">if</span>( p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-复合类型-自定义类型"><a href="#9-复合类型-自定义类型" class="headerlink" title="9. 复合类型(自定义类型)"></a>9. 复合类型(自定义类型)</h2><h3 id="9-1-结构体"><a href="#9-1-结构体" class="headerlink" title="9.1 结构体"></a>9.1 结构体</h3><h4 id="9-1-1-概述"><a href="#9-1-1-概述" class="headerlink" title="9.1.1 概述"></a>9.1.1 概述</h4><p>数组：描述一组具有相同类型数据的有序集合，用于处理大量相同类型的数据运算</p><p>有时我们需要将不同类型的数据组合成一个有机的整体，如：一个学生有学号&#x2F;姓名&#x2F;性别&#x2F;年龄&#x2F;地址等属性。显然单独定义以上变量比较繁琐，数据不便于管理</p><p>Ｃ语言中给出了另一种构造数据类型——结构体</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000918.jpg" alt="2016-06-05_152127"></p><h4 id="9-1-2-结构体变量的定义和初始化"><a href="#9-1-2-结构体变量的定义和初始化" class="headerlink" title="9.1.2 结构体变量的定义和初始化"></a>9.1.2 结构体变量的定义和初始化</h4><p>定义结构体变量的方式：</p><ul><li><p>先声明结构体类型再定义变量名</p></li><li><p>在声明类型的同时定义变量</p></li><li><p>直接定义结构体类型变量（无类型名）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000919.jpg" alt="2016-06-05_153150"></p><p>结构体类型和结构体变量关系：</p><ul><li>结构体类型：指定了一个结构体类型，它相当于一个模型，但其中并无具体数据，系统对之也不分配实际内存单元</li><li>结构体变量：系统根据结构体类型（内部成员状况）为之分配空间</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义类型，再定义变量（常用）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span> =</span> &#123;<span class="string">&quot;Taoy&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类型同时定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;s2 = &#123;<span class="string">&quot;Tao&quot;</span>, <span class="number">19</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;s3 = &#123;<span class="string">&quot;Taooo&quot;</span>, <span class="number">21</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="9-1-3-结构体成员的使用"><a href="#9-1-3-结构体成员的使用" class="headerlink" title="9.1.3  结构体成员的使用"></a>9.1.3  结构体成员的使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sring.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是普通变量，通过点运算符操作结构体成员</span></span><br><span class="line">    <span class="built_in">strcpy</span>(s1.name, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    s1.age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1.name = %s, s1.age = %d\n&quot;</span>, s1.name, s1.age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是指针变量，通过-&gt;操作结构体成员</span></span><br><span class="line">    <span class="built_in">strcpy</span>((&amp;s1)-&gt;name, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    (&amp;s1)-&gt;age = <span class="number">22</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(&amp;s1)-&gt;name = %s, (&amp;s1)-&gt;age = %d\n&quot;</span>, (&amp;s1)-&gt;name, (&amp;s1)-&gt;age);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-4-结构体数组"><a href="#9-1-4-结构体数组" class="headerlink" title="9.1.4 结构体数组"></a>9.1.4 结构体数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计学生成绩</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">boy</span>[5] =</span> &#123;</span><br><span class="line">&#123; <span class="number">101</span>, <span class="string">&quot;Li ping&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">45</span> &#125;,</span><br><span class="line">&#123; <span class="number">102</span>, <span class="string">&quot;Zhang ping&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">62.5</span> &#125;,</span><br><span class="line">&#123; <span class="number">103</span>, <span class="string">&quot;He fang&quot;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">92.5</span> &#125;,</span><br><span class="line">&#123; <span class="number">104</span>, <span class="string">&quot;Cheng ling&quot;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">87</span> &#125;,</span><br><span class="line">&#123; <span class="number">105</span>, <span class="string">&quot;Wang ming&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">58</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> ave,s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s += boy[i].score; <span class="comment">//计算总分</span></span><br><span class="line">        <span class="keyword">if</span>(boy[i].score &lt; <span class="number">60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c += <span class="number">1</span>;<span class="comment">//统计不及格人的分数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s = %f\n&quot;</span>, s); <span class="comment">// 打印总分数</span></span><br><span class="line">    ave = s / <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;average = %f\n count=%d\n\n&quot;</span>, ave, c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name = %s, score = %f\n&quot;</span>,boy[i].name, boy[i].score);</span><br><span class="line">        <span class="comment">// printf(&quot; name=%s,  score=%f\n&quot;, (boy + i )-&gt;name, (boy + i)-&gt;score);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-5-结构体套结构体"><a href="#9-1-5-结构体套结构体" class="headerlink" title="9.1.5 结构体套结构体"></a>9.1.5 结构体套结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">info</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>[2] =</span> &#123;<span class="number">1</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">2</span>, <span class="string">&quot;yuri&quot;</span>, <span class="string">&quot;M&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;id = %d\tinfo.name=%s\tinfo.sex=%c\n&quot;</span>, s[i].id, s[i].info.name, s[i].info.sex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-6-结构体赋值"><a href="#9-1-6-结构体赋值" class="headerlink" title="9.1.6 结构体赋值"></a>9.1.6 结构体赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span>;</span></span><br><span class="line">    <span class="comment">//如果是普通变量，通过点运算符操作结构体成员</span></span><br><span class="line">    <span class="built_in">strcpy</span>(s1.name, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    s1.age = <span class="number">18</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1.name = %s, s1.age = %d\n&quot;</span>, s1.name, s1.age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相同类型的两个结构体变量，可以相互赋值</span></span><br><span class="line"><span class="comment">//把s1成员变量的值拷贝给s2成员变量的内存</span></span><br><span class="line"><span class="comment">//s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s2</span> =</span> s1;</span><br><span class="line">    <span class="comment">//memcpy(&amp;s2, &amp;s1, sizeof(s1));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s2.name = %s, s2.gae = %d\n&quot;</span>, s2.name, s2.age);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-7-结构体和指针"><a href="#9-1-7-结构体和指针" class="headerlink" title="9.1.7 结构体和指针"></a>9.1.7 结构体和指针</h4><h5 id="1-指向普通结构体变量的指针"><a href="#1-指向普通结构体变量的指针" class="headerlink" title="1. 指向普通结构体变量的指针"></a>1. 指向普通结构体变量的指针</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s1</span> =</span> &#123;<span class="string">&quot;Tao&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">    <span class="comment">// 如果是指针变量，通过-&gt;操作结构体成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> &amp;s1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;</span>, p-&gt;name, p-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>,  (*p).name,  (*p).age);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-堆区结构体变量"><a href="#2-堆区结构体变量" class="headerlink" title="2. 堆区结构体变量"></a>2. 堆区结构体变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    p = (<span class="keyword">struct</span> stu *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line">    <span class="comment">// 如果是指针变量，通过-&gt;操作结构体成员</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    p-&gt;age = <span class="number">22</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;</span>, p-&gt;name, p-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>, (*p).name,  (*p).age);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-结构体套一级指针"><a href="#3-结构体套一级指针" class="headerlink" title="3. 结构体套一级指针"></a>3. 结构体套一级指针</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 机构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> *name; <span class="comment">// 一级指针</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    p = (<span class="keyword">struct</span> stu *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line">    </span><br><span class="line">    p-&gt;name = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(<span class="string">&quot;test&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    p-&gt;age = <span class="number">19</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p-&gt;name = %s, p-&gt;age = %d\n&quot;</span>, p-&gt;name, p-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>, (*p).name, (*p).age);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;name);</span><br><span class="line">        p-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-8-结构体做函数参数"><a href="#9-1-8-结构体做函数参数" class="headerlink" title="9.1.8 结构体做函数参数"></a>9.1.8 结构体做函数参数</h4><h5 id="1-结构体普通变量做函数参数"><a href="#1-结构体普通变量做函数参数" class="headerlink" title="1. 结构体普通变量做函数参数"></a>1. 结构体普通变量做函数参数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数为结构体普通变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_stu</span><span class="params">(<span class="keyword">struct</span> stu tmp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(tmp.name, <span class="string">&quot;Tao&quot;</span>);</span><br><span class="line">    tmp.age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tmp.name = %s, tmp.age = %d\n&quot;</span>, tmp.name, tmp.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    set_stu(s);<span class="comment">// 值传递</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s.name = %s, s.age = %d\n&quot;</span>, s.name, s.age);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-结构体指针变量做函数参数"><a href="#2-结构体指针变量做函数参数" class="headerlink" title="2. 结构体指针变量做函数参数"></a>2. 结构体指针变量做函数参数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_stu_pro</span><span class="params">(<span class="keyword">struct</span> stu *tmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(tmp-&gt;name, <span class="string">&quot;Tao&quot;</span>);</span><br><span class="line">tmp-&gt;age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">set_stu_pro(&amp;s); <span class="comment">// 地址传递</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %s, s.age = %d\n&quot;</span>, s.name, s.age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-const修饰结构体指针形参变量"><a href="#4-const修饰结构体指针形参变量" class="headerlink" title="4. const修饰结构体指针形参变量"></a>4. const修饰结构体指针形参变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体类型的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun1</span><span class="params">(<span class="keyword">struct</span> stu * <span class="type">const</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//p = NULL; // err</span></span><br><span class="line">    p-&gt;age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// void(struct stu const* p)</span></span><br><span class="line"><span class="type">void</span>(<span class="type">const</span> <span class="keyword">struct</span> stu * p)</span><br><span class="line">&#123;</span><br><span class="line">    p = <span class="literal">NULL</span>; <span class="comment">// ok</span></span><br><span class="line">    <span class="comment">// p-&gt;age = 10; //err</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun3</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> stu * <span class="type">const</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p = NULL; //err</span></span><br><span class="line"><span class="comment">//p-&gt;age = 10; //err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-共用体-联合体"><a href="#9-2-共用体-联合体" class="headerlink" title="9.2 共用体(联合体)"></a>9.2 共用体(联合体)</h3><ul><li>联合union是一个能在同一个存储空间存储不同类型数据的类型；</li><li>联合体所占的内存长度等于其最长成员的长度倍数，也有叫做共用体；</li><li>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用；</li><li>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖；</li><li>共用体变量的地址和它的各成员的地址都是同一地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共用体也叫联合体</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义共用体变量</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Test</span> <span class="title">tmp</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 所有成员的首地址是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p, %p, %p\n&quot;</span>, &amp;(tmp.a), &amp;(tmp.b), &amp;(tmp.c));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、共用体大小为最大成员类型的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">union</span> Test));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3、一个成员赋值，会影响另外的成员</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//左边是高位，右边是低位</span></span><br><span class="line"><span class="comment">//低位放低地址，高位放高地址</span></span><br><span class="line">tmp.b = <span class="number">0x44332211</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, tmp.a); <span class="comment">//11</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, tmp.c); <span class="comment">//2211</span></span><br><span class="line"></span><br><span class="line">tmp.a = <span class="number">0x00</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short: %x\n&quot;</span>, tmp.c); <span class="comment">//2200</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int: %x\n&quot;</span>, tmp.b); <span class="comment">//44332200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-枚举"><a href="#9-3-枚举" class="headerlink" title="9.3 枚举"></a>9.3 枚举</h3><p>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</p><p>枚举类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span>  枚举名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">枚举值表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在枚举值表中应列出所有可用值，也称为枚举元素</li><li>枚举值是常量，不能在程序中用赋值语句再对它赋值</li><li>举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">weekday</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">sun = <span class="number">2</span>, mon, tue, wed, thu, fri, sat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">bool</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="literal">false</span>, <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">weekday</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>;</span></span><br><span class="line">a = sun;</span><br><span class="line">b = mon;</span><br><span class="line">c = tue;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">bool</span> <span class="title">flag</span>;</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag为真\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Taoc:~/Desktop/C/<span class="number">9</span>$ ./<span class="number">9.3</span> </span><br><span class="line"><span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">flag为真</span><br></pre></td></tr></table></figure><h3 id="9-4-typedef"><a href="#9-4-typedef" class="headerlink" title="9.4 typedef"></a>9.4 typedef</h3><p>typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，<font color="red">不能创建新类型</font></p><ul><li>与<code>#define</code>不同，<code>typedef</code>仅限于数据类型，而不是能是表达式或具体的值</li><li><code>#define</code>发生在预处理，typedef发生在编译阶段</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BYTE;</span><br><span class="line"><span class="keyword">typedef</span> BYTE T_BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> UBYTE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">unsigned</span> <span class="title">char</span> <span class="title">UBYTE</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">type</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">UBYTE a;</span><br><span class="line">INT b;</span><br><span class="line">T_BYTE c;</span><br><span class="line">&#125;TYPE, *PTYPE;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TYPE t;</span><br><span class="line">t.a = <span class="number">254</span>;</span><br><span class="line">t.b = <span class="number">10</span>;</span><br><span class="line">t.c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">PTYPE p = &amp;t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u, %d, %c\n&quot;</span>, p-&gt;a, p-&gt;b, p-&gt;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-文件操作"><a href="#10-文件操作" class="headerlink" title="10. 文件操作"></a>10. 文件操作</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><h4 id="10-1-1磁盘文件和设备文件"><a href="#10-1-1磁盘文件和设备文件" class="headerlink" title="10.1.1磁盘文件和设备文件"></a>10.1.1磁盘文件和设备文件</h4><ul><li><p>磁盘文件</p><ul><li>指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存</li></ul></li><li><p>设备文件</p><ul><li>在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写</li></ul></li></ul><h4 id="10-1-2-磁盘文件的分类"><a href="#10-1-2-磁盘文件的分类" class="headerlink" title="10.1.2 磁盘文件的分类"></a>10.1.2 磁盘文件的分类</h4><p>计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000920.jpg" alt="2016-06-06_150022"></p><p>从用户或者操作系统使用的角度（逻辑上）把文件分为：</p><ul><li><p>文本文件：基于字符编码的文件 </p></li><li><p>二进制文件：基于值编码的文件</p></li></ul><h4 id="10-1-3-文本文件和二进制文件"><a href="#10-1-3-文本文件和二进制文件" class="headerlink" title="10.1.3 文本文件和二进制文件"></a>10.1.3 文本文件和二进制文件</h4><h5 id="1-文本文件"><a href="#1-文本文件" class="headerlink" title="1. 文本文件"></a>1. 文本文件</h5><ul><li><p>基于字符编码，常见编码有ASCII、UNICODE等</p></li><li><p>一般可以使用文本编辑器直接打开</p></li><li><p>数5678的以ASCII存储形式(ASCII码)为：</p><p>00110101 00110110 00110111 00111000</p></li></ul><h5 id="2-二进制文件"><a href="#2-二进制文件" class="headerlink" title="2. 二进制文件"></a>2. 二进制文件</h5><ul><li>基于值编码,自己根据具体应用,指定某个值是什么意思</li><li>把内存中的数据按其在内存中的存储形式原样输出到磁盘上</li><li>数5678的存储形式(二进制码)为：</li><li>00010110 00101110</li></ul><h3 id="10-2-文件的打开和关闭"><a href="#10-2-文件的打开和关闭" class="headerlink" title="10.2 文件的打开和关闭"></a>10.2 文件的打开和关闭</h3><h4 id="10-2-1-文件指针"><a href="#10-2-1-文件指针" class="headerlink" title="10.2.1 文件指针"></a>10.2.1 文件指针</h4><p>在C语言中用一个指针变量指向一个文件，这个指针称为文件指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">short</span>           level;<span class="comment">//缓冲区&quot;满&quot;或者&quot;空&quot;的程度 </span></span><br><span class="line"><span class="type">unsigned</span>        flags;<span class="comment">//文件状态标志 </span></span><br><span class="line"><span class="type">char</span>            fd;<span class="comment">//文件描述符</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>   hold;<span class="comment">//如无缓冲区不读取字符</span></span><br><span class="line"><span class="type">short</span>           bsize;<span class="comment">//缓冲区的大小</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>   *buffer;<span class="comment">//数据缓冲区的位置 </span></span><br><span class="line"><span class="type">unsigned</span>        ar; <span class="comment">//指针，当前的指向 </span></span><br><span class="line"><span class="type">unsigned</span>        istemp;<span class="comment">//临时文件，指示器</span></span><br><span class="line"><span class="type">short</span>           token;<span class="comment">//用于有效性的检查 </span></span><br><span class="line">&#125;FILE;</span><br></pre></td></tr></table></figure><p>FILE是系统使用typedef定义出来的有关文件信息的一种结构体类型，<font color="red">结构中含有文件名、文件状态和文件当前位置等信息</font></p><p>声明FILE结构体类型的信息包含在头文件“stdio.h”中，一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。通过文件指针就可对它所指的文件进行各种操作</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000921.png" alt="图片1"></p><p>C语言中有三个特殊的文件指针由系统默认打开，<font color="red">用户无需定义即可直接使用:</font></p><ul><li><code>stdin</code>：标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据</li><li><code>stdout</code>: 标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端</li><li><code>stderr</code>: 标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端</li></ul><h4 id="10-2-2-文件的打开"><a href="#10-2-2-文件的打开" class="headerlink" title="10.2.2 文件的打开"></a>10.2.2 文件的打开</h4><p>任何文件使用之前必须打开：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE * <span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> * mode)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：打开文件</p><p>参数：</p><p>​    filename：需要打开的文件名，根据需要加上路径</p><p>​    mode：打开文件的模式设置</p><p>返回值：</p><p>​    成功：文件指针</p><p>​    失败：NULL</p></blockquote><p>第一个参数的几种形式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp_passwd = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对路径：</span></span><br><span class="line"><span class="comment">//打开当前目录passdw文件：源文件(源程序)所在目录</span></span><br><span class="line">FILE *fp_passwd = fopen(<span class="string">&quot;passwd.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开当前目录(test)下passwd.txt文件</span></span><br><span class="line">fp_passwd = fopen(<span class="string">&quot;. / test / passwd.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开当前目录上一级目录（相对当前目录）passwd.txt文件</span></span><br><span class="line">fp_passwd = fopen(<span class="string">&quot;.. / passwd.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绝对路径：</span></span><br><span class="line"><span class="comment">//打开C盘test目录下一个叫passwd.txt文件</span></span><br><span class="line">fp_passwd = fopen(<span class="string">&quot;c:/test/passwd.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br></pre></td></tr></table></figure><p>第二个参数的几种形式(打开文件的方式)：</p><table><thead><tr><th><strong>打开模式</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>r或rb</td><td>以只读方式打开一个文本文件（不创建文件，若文件不存在则报错）</td></tr><tr><td>w或wb</td><td>以写方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td></tr><tr><td>a或ab</td><td>以追加方式打开文件，在末尾添加内容，若文件不存在则创建文件</td></tr><tr><td>r+或rb+</td><td>以可读、可写的方式打开文件(不创建新文件)</td></tr><tr><td>w+或wb+</td><td>以可读、可写的方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td></tr><tr><td>a+或ab+</td><td>以添加方式打开可读、可写的文件。若文件不存在则创建文件；如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留。</td></tr></tbody></table><p>注意：</p><ul><li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li><li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li><li>在Windows平台下，以“文本”方式打开文件，不加b：<ul><li>n 当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li><li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入</li><li><font color="red">n 以”二进制”方式打开文件，则读写都不会进行这样的转换</font></li></ul></li><li>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// &quot;\\&quot;这样的路径形式，只能在windows使用</span></span><br><span class="line"><span class="comment">// &quot;/&quot;这样的路径形式，windows和linux平台下都可用，建议使用这种</span></span><br><span class="line"><span class="comment">// 路径可以是相对路径，也可是绝对路径</span></span><br><span class="line">fp = fopen(<span class="string">&quot;../test&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="comment">// fp = fopen(&quot;..\\test&quot;, &quot;w&quot;);</span></span><br><span class="line"><span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//perror()是标准出错打印函数，能打印调用库函数出错原因</span></span><br><span class="line">perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-2-3-文件的关闭"><a href="#10-2-3-文件的关闭" class="headerlink" title="10.2.3 文件的关闭"></a>10.2.3 文件的关闭</h4><p>任何文件在使用后应该关闭：</p><ul><li>打开的文件会占用内存资源，如果总是打开不关闭，会消耗很多内存</li><li>一个进程同时打开的文件数是有限制的，超过最大同时打开文件数，再次调用<code>fopen</code>打开文件会失败</li><li>如果没有明确的调用<code>fclose</code>关闭打开的文件，那么程序在退出的时候，操作系统会统一关闭</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：关闭先前fopen()打开的文件。此动作让缓冲区的数据写入文件中，并释放系统所提供的文件资源。</p><p>参数：</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    成功：0</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(<span class="string">&quot;abc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure><h3 id="10-3-文件的顺序读写"><a href="#10-3-文件的顺序读写" class="headerlink" title="10.3 文件的顺序读写"></a>10.3 文件的顺序读写</h3><h4 id="10-3-1-按照字符读写文件fgetc、fputc"><a href="#10-3-1-按照字符读写文件fgetc、fputc" class="headerlink" title="10.3.1 按照字符读写文件fgetc、fputc"></a>10.3.1 按照字符读写文件fgetc、fputc</h4><h5 id="1-写文件"><a href="#1-写文件" class="headerlink" title="1. 写文件"></a>1. 写文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将ch转换为unsigned char后写入stream指定的文件中</p><p>参数：</p><p>​    ch：需要写入文件的字符</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    成功：成功写入文件的字符</p><p>​    失败：返回-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[] = <span class="string">&quot;My name is Tao.&quot;</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 往文件fp写入符buf[i]</span></span><br><span class="line"><span class="type">int</span> ch = fputc(buf[i], fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ch = %c\n&quot;</span>, ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-文件结尾"><a href="#2-文件结尾" class="headerlink" title="2. 文件结尾"></a>2. 文件结尾</h5><p>在C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，<font color="red">这种以EOF作为文件结束标志的文件，必须是文本文件。</font>在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EOF    (-1)</span></span><br></pre></td></tr></table></figure><p>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。<font color="red">feof函数既可用以判断二进制文件又可用以判断文本文件</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">feof</span><span class="params">(FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：检测是否读取到了文件结尾。<font color="red">判断的是最后一次“读操作的内容”，不是当前位置内容(上一个内容)。</font></p><p>参数：</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    非0值：已经到文件结尾</p><p>​    0：没有到文件结尾</p></blockquote><h5 id="3-读文件"><a href="#3-读文件" class="headerlink" title="3. 读文件"></a>3. 读文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：从stream指定的文件中读取一个字符</p><p>参数：</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    成功：返回读取到的字符</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">while</span>((ch = fgetc(fp)) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!feop(fp)) <span class="comment">//文件没有结束，则执行循环</span></span><br><span class="line">&#123;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="10-3-2-按照行读写文件fgets、fputs"><a href="#10-3-2-按照行读写文件fgets、fputs" class="headerlink" title="10.3.2 按照行读写文件fgets、fputs"></a>10.3.2 按照行读写文件fgets、fputs</h4><h5 id="1-写文件-1"><a href="#1-写文件-1" class="headerlink" title="1. 写文件"></a>1. 写文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * str, FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：将str所指定的字符串写入到stream指定的文件中，字符串结束符 ‘<code>\0</code>‘  不写入文件。 </p><p>参数：</p><p>​    str：字符串</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    成功：0</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *buf[] = &#123; <span class="string">&quot;123456\n&quot;</span>, <span class="string">&quot;bbbbbbbbbb\n&quot;</span>, <span class="string">&quot;ccccccccccc\n&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">fputs</span>(buf[i], fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;len = %d\n&quot;</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-读文件"><a href="#2-读文件" class="headerlink" title="2. 读文件"></a>2. 读文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">fgets</span><span class="params">(<span class="type">char</span> * str, <span class="type">int</span> size, FILE * stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：从stream指定的文件内读入字符，保存到str所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 ‘\0’ 作为字符串结束。</p><p>参数：</p><p>​    str：字符串</p><p>​    size：指定最大读取字符串的长度（size - 1）</p><p>​    stream：文件指针</p><p>返回值：</p><p>​    成功：成功读取的字符串</p><p>​    读到文件尾或出错： NULL</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(!feof(fp))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="type">char</span> *p = gets(buf, <span class="keyword">sizeof</span>(buf), fp);</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf = %s&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-强化训练：文件版四则运算"><a href="#3-强化训练：文件版四则运算" class="headerlink" title="3. 强化训练：文件版四则运算"></a>3. 强化训练：文件版四则运算</h4><p>有个文件大小不确定，每行内容都是一个四则运算表达式，还没有算出结果，写一个程序，自动算出其结果后修改文件</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000922.jpg" alt="2016-06-06_172151"></p><h4 id="10-3-3-按照格式化文件fprintf、fscanf"><a href="#10-3-3-按照格式化文件fprintf、fscanf" class="headerlink" title="10.3.3 按照格式化文件fprintf、fscanf"></a>10.3.3 按照格式化文件fprintf、fscanf</h4><h5 id="1-写文件-2"><a href="#1-写文件-2" class="headerlink" title="1. 写文件"></a>1. 写文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE * stream, <span class="type">const</span> <span class="type">char</span> * format, ...)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：根据参数format字符串来转换并格式化数据，然后将结果输出到stream指定的文件中，指定出现字符串结束符 ‘\0’ 为止。</p><p>参数：</p><p>​    stream：已经打开的文件</p><p>​    format：字符串格式，用法和printf()一样</p><p>返回值：</p><p>​    成功：实际写入文件的字符个数</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d %d %d\n&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="2-读文件-1"><a href="#2-读文件-1" class="headerlink" title="2. 读文件"></a>2. 读文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE * stream, <span class="type">const</span> <span class="type">char</span> * format, ...)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：从stream指定的文件读取字符串，并根据参数format字符串来转换并格式化数据。</p><p>参数：</p><p>​    stream：已经打开的文件</p><p>​    format：字符串格式，用法和scanf()一样</p><p>返回值：</p><p>​    成功：参数数目，成功转换的值的个数</p><p>​    失败： - 1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d %d %d\n&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, a, b, c);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000923.jpg" alt="2016-06-06_173443"></p><h4 id="10-3-4-按照块读写文件fread、fwrite"><a href="#10-3-4-按照块读写文件fread、fwrite" class="headerlink" title="10.3.4 按照块读写文件fread、fwrite"></a>10.3.4 按照块读写文件fread、fwrite</h4><h5 id="1-写文件-3"><a href="#1-写文件-3" class="headerlink" title="1. 写文件"></a>1. 写文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：以数据块的方式给文件写入内容</p><p>参数：</p><p>​    ptr：准备写入文件数据的地址</p><p>​    size： size_t 为 unsigned int类型，此参数指定写入文件内容的块数据大小</p><p>​    nmemb：写入文件的块数，写入文件数据总大小为：size * nmemb</p><p>​    stream：已经打开的文件指针</p><p>返回值：</p><p>​    成功：实际成功写入文件数据的块数目，此值和 nmemb 相等</p><p>​    失败：0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> id; </span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line">Stu s[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(s[i].name, <span class="string">&quot;stu%d%d%d&quot;</span>, i, i, i);</span><br><span class="line">    s[i].id = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = fwrite(s, <span class="keyword">sizeof</span>(Stu), <span class="number">3</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br></pre></td></tr></table></figure><h5 id="2-读文件-2"><a href="#2-读文件-2" class="headerlink" title="2. 读文件"></a>2. 读文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：以数据块的方式从文件中读取内容</p><p>参数：</p><p>​    ptr：存放读取出来数据的内存空间</p><p>​    size： size_t 为 unsigned int类型，此参数指定读取文件内容的块数据大小</p><p>​    nmemb：读取文件的块数，读取文件数据总大小为：size * nmemb</p><p>​    stream：已经打开的文件指针</p><p>返回值：</p><p>​    成功：实际成功读取到内容的块数，如果此值比nmemb小，但大于0，说明读到文件的结尾。</p><p>​    失败：0</p><p>​    0: 表示读到文件结尾。(feof())</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line">Stu s[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> ret = fread(s, <span class="keyword">sizeof</span>(Stu), <span class="number">3</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s = %s, %d\n&quot;</span>, s[i].name, s[i].id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-文件的随机读写"><a href="#10-4-文件的随机读写" class="headerlink" title="10.4 文件的随机读写"></a>10.4 文件的随机读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：移动文件流（文件光标）的读写位置。</p><p>参数：</p><p>​    stream：已经打开的文件指针</p><p> offset：根据whence来移动的位移数（偏移量），可以是正数，也可以负数，如果正数，则相对于whence往右移动，如果是负数，则相对于whence往左移动。如果向前移动的字节数超过了文件开头则出错返回，如果向后移动的字节数超过了文件末尾，再次写入时将增大文件尺寸。</p><p>​    whence：其取值如下：</p><p>​       SEEK_SET：从文件开头移动offset个字节</p><p>​       SEEK_CUR：从当前位置移动offset个字节</p><p>​       SEEK_END：从文件末尾移动offset个字节</p><p>返回值：</p><p>​    成功：0</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：获取文件流（文件光标）的读写位置。</p><p>参数：</p><p>​    stream：已经打开的文件指针</p><p>返回值：</p><p>​    成功：当前文件流（文件光标）的读写位置</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：把文件流（文件光标）的读写位置移动到文件开头。</p><p>参数：</p><p>​    stream：已经打开的文件指针</p><p>返回值：</p><p>​    无返回值</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如已经往文件写入3个结构体</span></span><br><span class="line"><span class="comment">//fwrite(s, sizeof(Stu), 3, fp);</span></span><br><span class="line">Stu s[<span class="number">3</span>];</span><br><span class="line">Stu tmp; </span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件光标读写位置从开头往右移动2个结构体的位置</span></span><br><span class="line">fseek(fp, <span class="number">2</span> * <span class="keyword">sizeof</span>(Stu), SEEK_SET);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读第3个结构体</span></span><br><span class="line">ret = fread(&amp;tmp, <span class="keyword">sizeof</span>(Stu), <span class="number">1</span>, fp);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[tmp]%s, %d\n&quot;</span>, tmp.name, tmp.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把文件光标移动到文件开头</span></span><br><span class="line"><span class="comment">//fseek(fp, 0, SEEK_SET);</span></span><br><span class="line">rewind(fp);</span><br><span class="line"></span><br><span class="line">ret = fread(s, <span class="keyword">sizeof</span>(Stu), <span class="number">3</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s === %s, %d\n&quot;</span>, s[i].name, s[i].id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-5-Windows和Linux文本文件区别"><a href="#10-5-Windows和Linux文本文件区别" class="headerlink" title="10.5 Windows和Linux文本文件区别"></a>10.5 Windows和Linux文本文件区别</h3><ul><li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li><li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li><li>在Windows平台下，以“文本”方式打开文件，不加b：<ul><li>n 当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li><li>n 当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入 </li><li><font color="red">n 以”二进制”方式打开文件，则读\写都不会进行这样的转换</font></li></ul></li><li>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li></ul><p>判断文本文件是Linux格式还是Windows格式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    FILE *p = fopen(args[<span class="number">1</span>], <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fgets(a, <span class="keyword">sizeof</span>(a),p);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[len])</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span>(a[len] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[len - <span class="number">1</span>] == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;windows file\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;linux file\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-获取文件状态"><a href="#10-6-获取文件状态" class="headerlink" title="10.6 获取文件状态"></a>10.6 获取文件状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span>int stat(const char *path, struct stat *buf);</span></span><br></pre></td></tr></table></figure><blockquote><p>功能：获取文件状态信息</p><p>参数：</p><p>​path：文件名</p><p>​buf：保存文件信息的结构体</p><p>返回值：</p><p>​成功：0</p><p>​失败-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line"><span class="type">dev_t</span>         st_dev;         <span class="comment">//文件的设备编号</span></span><br><span class="line"><span class="type">ino_t</span>         st_ino;          <span class="comment">//节点</span></span><br><span class="line"><span class="type">mode_t</span>        st_mode;   <span class="comment">//文件的类型和存取的权限</span></span><br><span class="line"><span class="type">nlink_t</span>       st_nlink;     <span class="comment">//连到该文件的硬连接数目，刚建立的文件值为1</span></span><br><span class="line"><span class="type">uid_t</span>         st_uid;         <span class="comment">//用户ID</span></span><br><span class="line"><span class="type">gid_t</span>         st_gid;         <span class="comment">//组ID</span></span><br><span class="line"><span class="type">dev_t</span>         st_rdev;      <span class="comment">//(设备类型)若此文件为设备文件，则为其设备编号</span></span><br><span class="line"><span class="type">off_t</span>         st_size;        <span class="comment">//文件字节数(文件大小)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> st_blksize;   <span class="comment">//块大小(文件系统的I/O 缓冲区大小)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> st_blocks;    <span class="comment">//块数</span></span><br><span class="line"><span class="type">time_t</span>        st_atime;     <span class="comment">//最后一次访问时间</span></span><br><span class="line"><span class="type">time_t</span>        st_mtime;    <span class="comment">//最后一次修改时间</span></span><br><span class="line"><span class="type">time_t</span>        st_ctime;     <span class="comment">//最后一次改变时间(指属性)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">at</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    stat(args[<span class="number">1</span>], &amp;st);</span><br><span class="line">    <span class="type">int</span> size = st.st_size;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, size);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-7-删除文件、重命名文件名"><a href="#10-7-删除文件、重命名文件名" class="headerlink" title="10.7 删除文件、重命名文件名"></a>10.7 删除文件、重命名文件名</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：删除文件</p><p>参数：</p><p>​    pathname：文件名</p><p>返回值：</p><p>​    成功：0</p><p>​    失败：-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rename</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *oldpath, <span class="type">const</span> <span class="type">char</span> *newpath)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：把oldpath的文件名改为newpath</p><p>参数：</p><p>oldpath：旧文件名</p><p>newpath：新文件名</p><p>返回值：</p><p>成功：0</p><p>失败： - 1</p></blockquote><h3 id="10-8-文件缓冲区"><a href="#10-8-文件缓冲区" class="headerlink" title="10.8 文件缓冲区"></a>10.8 文件缓冲区</h3><h4 id="10-8-1-文件缓冲区"><a href="#10-8-1-文件缓冲区" class="headerlink" title="10.8.1 文件缓冲区"></a>10.8.1 文件缓冲区</h4><p>ANSI C标准采用“缓冲文件系统”处理数据文件。</p><p>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</p><p>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。</p><h4 id="10-8-2-磁盘文件的存取"><a href="#10-8-2-磁盘文件的存取" class="headerlink" title="10.8.2 磁盘文件的存取"></a>10.8.2 磁盘文件的存取</h4><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202206010000924.jpg" alt="2016-06-06_182106"></p><ul><li>磁盘文件，一般保存在硬盘、U盘等掉电不丢失的磁盘设备中，在需要时调入内存</li><li>在内存中对文件进行编辑处理后，保存到磁盘中</li><li>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率</li></ul><h4 id="10-8-3更新缓冲区"><a href="#10-8-3更新缓冲区" class="headerlink" title="10.8.3更新缓冲区"></a>10.8.3更新缓冲区</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>功能：更新缓冲区，让缓冲区的数据立马写到文件中。</p><p>参数：</p><p>​stream：文件指针</p><p>返回值：</p><p>​成功：0</p><p>​失败：-1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程</title>
      <link href="/posts/58900.html"/>
      <url>/posts/58900.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-并发与并行"><a href="#1-并发与并行" class="headerlink" title="1.并发与并行"></a>1.并发与并行</h1><ul><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时执行）。</li><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生(交替执行)。</li></ul><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311822581.bmp"></p><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h1 id="2-线程与进程"><a href="#2-线程与进程" class="headerlink" title="2.线程与进程"></a>2.线程与进程</h1><ul><li><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</li><li><strong>线程</strong>：是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</li></ul><p><strong>进程</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311821512.png"></p><p><strong>线程</strong></p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311821513.png"></p><p><strong>进程与线程的区别</strong></p><ul><li>进程：有独立的内存空间，进程中的数据存放空间（堆空间和栈空间）是独立的，至少有一个线程。</li><li>线程：堆空间是共享的，栈空间是独立的，线程消耗的资源比进程小的多。</li></ul><blockquote><p><strong>注意：</strong>下面内容为了解知识点</p><p>1:因为一个进程中的多个线程是并发运行的，那么从微观角度看也是有先后顺序的，哪个线程执行完全取决于 CPU 的调度，程序员是干涉不了的。而这也就造成的多线程的随机性。</p><p>2:Java 程序的进程里面至少包含两个线程，主进程也就是 main()方法线程，另外一个是垃圾回收机制线程。每当使用 java 命令执行一个类时，实际上都会启动一个 JVM，每一个 JVM 实际上就是在操作系统中启动了一个线程，java 本身具备了垃圾的收集机制，所以在 Java 运行时至少会启动两个线程。</p><p>3:由于创建一个线程的开销比创建一个进程的开销小的多，那么我们在开发多任务运行的时候，通常考虑创建多线程，而不是创建多进程。</p></blockquote><p><strong>线程调度:</strong></p><ul><li><p>分时调度</p><p>​所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>​优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li><p>设置线程的优先级</p><p><img src="https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200616100646.bmp"></p></li><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着“。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</p><p><img src="https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200616101035.bmp"></p></li></ul></li></ul><h1 id="3-Thread类"><a href="#3-Thread类" class="headerlink" title="3.Thread类"></a>3.Thread类</h1><p>线程开启我们需要用到了<code>java.lang.Thread</code>类，API中该类中定义了有关线程的一些方法，具体如下：</p><p><strong>构造方法：</strong></p><ul><li><code>public Thread()</code>:分配一个新的线程对象。</li><li><code>public Thread(String name)</code>:分配一个指定名字的新的线程对象。</li><li><code>public Thread(Runnable target)</code>:分配一个带有指定目标新的线程对象。</li><li><code>public Thread(Runnable target,String name)</code>:分配一个带有指定目标新的线程对象并指定名字。</li></ul><p><strong>常用方法：</strong></p><ul><li><code>public String getName()</code>:获取当前线程名称。</li><li><code>public void start()</code>:导致此线程开始执行; Java虚拟机调用此线程的run方法。</li><li><code>public void run()</code>:此线程要执行的任务在此处定义代码。</li><li><code>public static void sleep(long millis)</code>:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li><code>public static Thread currentThread()  </code>:返回对当前正在执行的线程对象的引用。</li></ul><p>翻阅API后得知创建线程的方式总共有两种，一种是继承Thread类方式，一种是实现Runnable接口方式。</p><h1 id="4-创建线程方式一-继承方式"><a href="#4-创建线程方式一-继承方式" class="headerlink" title="4.创建线程方式一:继承方式"></a>4.创建线程方式一:继承方式</h1><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>代码如下：</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建自定义线程对象</span></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;新的线程！&quot;</span>);</span><br><span class="line"><span class="comment">//开启新线程</span></span><br><span class="line">mt.start();</span><br><span class="line"><span class="comment">//在主方法中执行for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main线程！&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="comment">//定义指定线程名称的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="comment">//调用父类的String参数的构造方法，指定线程的名称</span></span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//不指定线程的名字,线程有默认的名字Thread-0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写run方法，完成该线程执行的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">System.out.println(getName()+<span class="string">&quot;：正在执行！&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-创建线程的方式二-实现方式"><a href="#5-创建线程的方式二-实现方式" class="headerlink" title="5.创建线程的方式二:实现方式"></a>5.创建线程的方式二:实现方式</h1><p>采用<code>java.lang.Runnable</code>也是非常常见的一种，我们只需要重写run方法即可。</p><p>步骤如下：</p><ol><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建自定义类对象  线程任务对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr, <span class="string">&quot;小强&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;旺财 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个执行目标。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p><p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p><p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p><blockquote><p>tips:</p><p>Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run()方法仅作为线程执行体。而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的run()方法。</p></blockquote><p><strong>Thread和Runnable的区别</strong></p><p><strong>总结：</strong></p><p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现Runable或Callable类线程。</li></ol><h1 id="6-匿名内部类方式"><a href="#6-匿名内部类方式" class="headerlink" title="6.匿名内部类方式"></a>6.匿名内部类方式</h1><p>使用线程的内匿名内部类方式，可以方便的实现每个线程执行不同的线程任务操作。</p><p>使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的run方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoNameInnerClassThread</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;   </span><br><span class="line"><span class="comment">//new Runnable()&#123;</span></span><br><span class="line"><span class="comment">//public void run()&#123;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;张宇:&quot;+i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;  </span></span><br><span class="line"><span class="comment">//   &#125;; //---这个整体  相当于new MyRunnable()</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;张宇:&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;费玉清:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字</title>
      <link href="/posts/8509.html"/>
      <url>/posts/8509.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承API中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写的情况，Java提供了<code>final</code> 关键字，用于修饰<strong>不可改变</strong>内容。</p><ul><li><strong>final</strong>：  不可改变，最终的含义。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，有且仅能被赋值一次。</li></ul></li></ul><h1 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. 使用方式</h1><h2 id="2-1-修饰类"><a href="#2-1-修饰类" class="headerlink" title="2.1 修饰类"></a>2.1 修饰类</h2><p>final修饰的类，不能被继承。</p><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span></span><br></pre></td></tr></table></figure><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h2 id="2-2-修饰方法"><a href="#2-2-修饰方法" class="headerlink" title="2.2 修饰方法"></a>2.2 修饰方法</h2><p>final修饰的方法，不能被重写。<br>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi2</span> <span class="keyword">extends</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void show1() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Zi2 show1&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-修饰变量-局部变量"><a href="#2-3-修饰变量-局部变量" class="headerlink" title="2.3 修饰变量-局部变量"></a>2.3 修饰变量-局部变量</h2><p>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，如下两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><h2 id="2-4-修饰变量-实例成员变量"><a href="#2-4-修饰变量-实例成员变量" class="headerlink" title="2.4 修饰变量-实例成员变量"></a>2.4 修饰变量-实例成员变量</h2><p>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造器初始化，只能选择其中一个：</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造器初始化(在构造器中赋值一次)。</p><p><strong>注意：每个构造器中都要赋值一次！</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/posts/27497.html"/>
      <url>/posts/27497.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>我们已经学完了抽象类，抽象类中可以有抽象方法，也可以有普通方法，构造器，成员变量等。那么什么是接口呢？<strong>接口是更加彻底的抽象，接口中全部是抽象方法。（JDK8之前），接口同样是不能创建对象的</strong>。</p><h1 id="2-定义格式"><a href="#2-定义格式" class="headerlink" title="2. 定义格式"></a>2. 定义格式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">修饰符 interface 接口名称&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修饰符：public|缺省</span></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure><h1 id="3-接口成分的特点"><a href="#3-接口成分的特点" class="headerlink" title="3. 接口成分的特点"></a>3. 接口成分的特点</h1><p> 在JDK8之前，接口中的成分包含：抽象方法和常量</p><h2 id="3-1-抽象方法"><a href="#3-1-抽象方法" class="headerlink" title="3.1 抽象方法"></a>3.1 抽象方法</h2><p> 注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！<br> 按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h2 id="3-2-常量"><a href="#3-2-常量" class="headerlink" title="3.2 常量"></a>3.2 常量</h2><p>在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h2 id="3-3-案例演示"><a href="#3-3-案例演示" class="headerlink" title="3.3 案例演示"></a>3.3 案例演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;家里蹲&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-基本实现"><a href="#4-基本实现" class="headerlink" title="4. 基本实现"></a>4. 基本实现</h1><h2 id="4-1-实现接口的概述"><a href="#4-1-实现接口的概述" class="headerlink" title="4.1 实现接口的概述"></a>4.1 实现接口的概述</h2><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h2 id="4-2-实现接口的格式"><a href="#4-2-实现接口的格式" class="headerlink" title="4.2 实现接口的格式"></a>4.2 实现接口的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[修饰符] class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面格式可以看出，接口是可以被多实现的。</p><h2 id="4-3-类实现接口的要求和意义"><a href="#4-3-类实现接口的要求和意义" class="headerlink" title="4.3 类实现接口的要求和意义"></a>4.3 类实现接口的要求和意义</h2><ol><li>必须重写实现的全部接口中所有抽象方法。</li><li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li><li><strong>意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。</strong></li></ol><h2 id="4-4-类与接口的基本案例"><a href="#4-4-类与接口的基本案例" class="headerlink" title="4.4 类与接口的基本案例"></a>4.4 类与接口的基本案例</h2><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">compittion</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现：</span></span><br><span class="line"><span class="comment"> *    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment"> *    实现类的格式:</span></span><br><span class="line"><span class="comment"> *      [修饰符] class 类名 implements 接口1,接口2,接口3...&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">compittion</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span>+project+<span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-类与接口的多实现案例"><a href="#4-5-类与接口的多实现案例" class="headerlink" title="4.5 类与接口的多实现案例"></a>4.5 类与接口的多实现案例</h2><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment"> *    一个类可以实现多个接口: Law ,SportMan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;遵纪守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h1 id="5-接口与接口的多继承"><a href="#5-接口与接口的多继承" class="headerlink" title="5.接口与接口的多继承"></a>5.接口与接口的多继承</h1><p>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：</p><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p><p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *  总结：</span><br><span class="line"> *     接口与类之间是多实现的。</span><br><span class="line"> *     接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-JDK8之后接口的新增方法"><a href="#6-JDK8之后接口的新增方法" class="headerlink" title="6. JDK8之后接口的新增方法"></a>6. JDK8之后接口的新增方法</h1><p>从JDK 8开始之后，接口不再纯洁了，接口中不再只是抽象方法，接口还可以有<strong>默认方法</strong>（也就是实例方法），和<strong>静态方法</strong>了，还包含了私有实例方法和私有静态方法。</p><h2 id="6-1-默认方法和静态方法"><a href="#6-1-默认方法和静态方法" class="headerlink" title="6.1 默认方法和静态方法"></a>6.1 默认方法和静态方法</h2><p><strong>默认方法：使用 <code>default</code> 修饰，不可省略，供子类调用或者子类重写。</strong></p><p><strong>静态方法：使用 <code>static</code> 修饰，供接口直接调用。</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFaceName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-私有方法和私有静态方法"><a href="#6-2-私有方法和私有静态方法" class="headerlink" title="6.2 私有方法和私有静态方法"></a>6.2 私有方法和私有静态方法</h2><p>私有方法：使用 <code>private</code> 修饰，供接口中的默认方法或者静态方法调用。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFaceName</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-新增方法的使用"><a href="#6-3-新增方法的使用" class="headerlink" title="6.3 新增方法的使用"></a>6.3 新增方法的使用</h2><p><strong>默认方法和静态方法以及私有方法和私有静态方法</strong>，<strong>遵循面向对象的继承关系使用原则，实现类依然可以访问接口的非私有方法，对于接口中的非私有静态方法，可以直接通过接口名进行访问。</strong></p><p>重写默认方法注意（了解）:</p><ul><li><p>子接口重写默认方法时，default关键字可以保留。</p></li><li><p>实现类重写默认方法时，default关键字不可以保留。</p></li></ul><h1 id="7-实现多个接口的注意事项"><a href="#7-实现多个接口的注意事项" class="headerlink" title="7. 实现多个接口的注意事项"></a>7. 实现多个接口的注意事项</h1><h2 id="7-1-多个接口的同名静态方法"><a href="#7-1-多个接口的同名静态方法" class="headerlink" title="7.1 多个接口的同名静态方法"></a>7.1 多个接口的同名静态方法</h2><p>如果实现了多个接口，多个接口中存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span>  <span class="title class_">A</span> , B&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        A.test();</span><br><span class="line">        B.test();</span><br><span class="line">       <span class="comment">// C.test(); // 编译出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-优先级的问题"><a href="#7-2-优先级的问题" class="headerlink" title="7.2 优先级的问题"></a>7.2 优先级的问题</h2><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAAAAAAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DDDDDDDDDDDD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="comment">// 未重写methodA方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.methodA(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDDDDDDDDDDD</span><br></pre></td></tr></table></figure><h1 id="8-接口小结"><a href="#8-接口小结" class="headerlink" title="8. 接口小结"></a>8. 接口小结</h1><ul><li>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。</li><li>接口中的方法全是抽象方法，默认会自动加上public abstract修饰</li><li>JDK 8开始，接口不再纯洁，支持静态方法，默认方法，私有方法。</li><li>接口中，没有构造器，<strong>不能创建对象</strong>。</li><li>类与接口是多实现的</li><li>接口与接口是多继承的</li><li>接口体现的规范。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/posts/43723.html"/>
      <url>/posts/43723.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-抽象类引入"><a href="#1-1-抽象类引入" class="headerlink" title="1.1 抽象类引入"></a>1.1 抽象类引入</h2><p>父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类完全只需要提供一个没有方法体的方法签名即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h1 id="2-abstract使用格式"><a href="#2-abstract使用格式" class="headerlink" title="2 abstract使用格式"></a>2 abstract使用格式</h1><p><strong>abstract是抽象的意思，用于修饰方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><h2 id="2-1-抽象方法"><a href="#2-1-抽象方法" class="headerlink" title="2.1 抽象方法"></a>2.1 抽象方法</h2><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表)；</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><h2 id="2-2-抽象类"><a href="#2-2-抽象类" class="headerlink" title="2.2 抽象类"></a>2.2 抽象类</h2><p>如果一个类包含抽象方法，那么该类必须是抽象类。<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong></p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-抽象类的使用"><a href="#2-3-抽象类的使用" class="headerlink" title="2.3 抽象类的使用"></a>2.3 抽象类的使用</h2><p><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line"><span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//e.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建子类</span></span><br><span class="line"><span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h1 id="3-抽象类的特征"><a href="#3-抽象类的特征" class="headerlink" title="3 抽象类的特征"></a>3 抽象类的特征</h1><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><p>其他成员（构造器，实例方法，静态方法等）抽象类中都是具备的。</p><h1 id="4-抽象类的注意事项"><a href="#4-抽象类的注意事项" class="headerlink" title="4 抽象类的注意事项"></a>4 抽象类的注意事项</h1><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造器，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><h1 id="5-抽象类存在的意义"><a href="#5-抽象类存在的意义" class="headerlink" title="5 抽象类存在的意义"></a>5 抽象类存在的意义</h1><p>抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义，<strong>抽象类体现的是模板思想</strong>，模板是通用的东西，抽象类中已经是具体的实现（抽象类中可以有成员变量和实现方法），而模板中不能决定的东西定义成抽象方法，让使用模板（继承抽象类的类）的类去重写抽象方法实现需求，这是典型的模板思想。</p><h1 id="6-第一个设计模式：模板模式"><a href="#6-第一个设计模式：模板模式" class="headerlink" title="6 第一个设计模式：模板模式"></a>6 第一个设计模式：模板模式</h1><p>我们现在使用抽象类设计一个模板模式的应用，例如在小学的时候，我们经常写作文，通常都是有模板可以套用的。假如我现在需要定义新司机和老司机类，新司机和老司机都有开车功能，开车的步骤都一样，只是驾驶时的姿势有点不同，<code>新司机:开门,点火,双手紧握方向盘,刹车,熄火</code>，<code>老司机:开门,点火,右手握方向盘左手抽烟,刹车,熄火</code>。我们可以将固定流程写到父类中，不同的地方就定义成抽象方法，让不同的子类去重写，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 司机开车的模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开门&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;点火&quot;</span>);</span><br><span class="line">        <span class="comment">// 开车姿势不确定?定义为抽象方法</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">&quot;刹车&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;熄火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">ziShi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在定义两个使用模板的司机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewDriver</span> <span class="keyword">extends</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新司机双手紧握方向盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OldDriver</span> <span class="keyword">extends</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老司机右手握方向盘左手抽烟...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NewDriver</span> <span class="variable">nd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewDriver</span>();</span><br><span class="line">        nd.go();</span><br><span class="line"></span><br><span class="line">        <span class="type">OldDriver</span> <span class="variable">od</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OldDriver</span>();</span><br><span class="line">        od.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以看出，模板模式的优势是，模板已经定义了通用架构，使用者只需要关心自己需要实现的功能即可！非常的强大！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用类型使用小结</title>
      <link href="/posts/26302.html"/>
      <url>/posts/26302.html</url>
      
        <content type="html"><![CDATA[<p>实际的开发中，引用类型的使用非常重要，也是非常普遍的。我们可以在理解基本类型的使用方式基础上，进一步去掌握引用类型的使用方式。基本类型可以作为成员变量、作为方法的参数、作为方法的返回值，那么当然引用类型也是可以的。</p><h1 id="1-引用类型作为方法参数和返回值"><a href="#1-引用类型作为方法参数和返回值" class="headerlink" title="1. 引用类型作为方法参数和返回值"></a>1. 引用类型作为方法参数和返回值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line">   <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> createPerson();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//引用类型作为方法参数</span></span><br><span class="line">  pubic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">       p.eat();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//引用类型作为返回值</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title function_">createPerson</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-引用类型作为成员变量"><a href="#2-引用类型作为成员变量" class="headerlink" title="2. 引用类型作为成员变量"></a>2. 引用类型作为成员变量</h1><p>​我们每个人(Person)都有一个身份证(IDCard) , 为了表示这种关系 , 就需要在Person中定义一个IDCard的成员变量。定义Person类时，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​使用使用<code>String</code> 类型表示姓名 , <code>int</code> 类型表示年龄。其实，<code>String</code>本身就是引用类型，我们往往忽略了它是引用类型。如果我们继续丰富这个类的定义，给<code>Person</code> 增加身份证号 , 身份证签发机关等属性，我们将如何编写呢？这时候就需要编写一个IDCard类了</p><p>定义IDCard(身份证)类，添加身份证号 , 签发地等属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;</span><br><span class="line">    String idNum;<span class="comment">//身份证号</span></span><br><span class="line">    String authority;<span class="comment">//签发地</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//getter和setter方法</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//toString方法</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    IDCard idCard;<span class="comment">//表示自己的身份证信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//name和age的getter、setter方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IDCard <span class="title function_">getIdCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdCard</span><span class="params">(IDCard idCard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建IDCard对象</span></span><br><span class="line">        <span class="type">IDCard</span> <span class="variable">idCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IDCard</span>();</span><br><span class="line">        <span class="comment">//设置身份证号</span></span><br><span class="line">        idCard.setIdNum(<span class="string">&quot;110113201606066666&quot;</span>);</span><br><span class="line">        <span class="comment">//设置签发地</span></span><br><span class="line">        idCard.setAuthority(<span class="string">&quot;北京市公安局&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//设置姓名</span></span><br><span class="line">        p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//设置年龄</span></span><br><span class="line">        p.setAge(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//设置身份证信息</span></span><br><span class="line">        p.setIdCard(idCard);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印张三的信息</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">Person&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">2</span>, idCard=IDCard&#123;idNum=<span class="string">&#x27;110113201606066666&#x27;</span>, authority=<span class="string">&#x27;北京市公安局&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类作为成员变量时，对它进行赋值的操作，实际上，是赋给它该类的一个对象。同理 , 接口也是如此 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="/posts/59840.html"/>
      <url>/posts/59840.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是static关键字"><a href="#1-什么是static关键字" class="headerlink" title="1. 什么是static关键字"></a>1. 什么是static关键字</h1><p>​在Java中static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，当然也可以修饰代码块。</p><p>​     Java把内存分为栈内存和堆内存，其中栈内存用来存放一些基本类型的变量、数组和对象的引用，堆内存主要存放一些对象。在JVM加载一个类的时候，若该类存在static修饰的成员变量和成员方法，则会为这些成员变量和成员方法在固定的位置开辟一个固定大小的内存区域（只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们），有了这些“固定”的特性，那么JVM就可以非常方便地访问他们。</p><p>​      同时被static修饰的成员变量和成员方法是独立于该类的，它不依赖于某个特定的实例变量，也就是说它被该类的所有实例共享。所有实例的引用都指向同一个地方，任何一个实例对其的修改都会导致其他实例的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">userNumber</span>  <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        userNumber ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;user1 userNumber：&quot;</span> + User.userNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2 userNumber：&quot;</span> + User.userNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user1 userNumber：2</span><br><span class="line">user2 userNumber：2</span><br></pre></td></tr></table></figure><h1 id="2-static关键字的用途"><a href="#2-static关键字的用途" class="headerlink" title="2. static关键字的用途"></a>2. static关键字的用途</h1><h2 id="2-1-static变量"><a href="#2-1-static变量" class="headerlink" title="2.1 static变量"></a>2.1 static变量</h2><p>　static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</p><p>　static成员变量的初始化顺序按照定义的顺序进行初始化。</p><p>​所以我们一般在这两种情况下使用静态变量：对象之间共享数据、访问方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStatic</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        TestStatic test1=<span class="keyword">new</span> <span class="title class_">TestStatic</span>();</span><br><span class="line">        System.out.println(test1.count);</span><br><span class="line">        TestStatic test2=<span class="keyword">new</span> <span class="title class_">TestStatic</span>();</span><br><span class="line">        test2.count++;</span><br><span class="line">        System.out.println(test1.count+<span class="string">&quot; &quot;</span>+test2.count+<span class="string">&quot; &quot;</span>+TestStatic.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><p>​可见，static变量并不是所在类的某个具体对象所有，而是该类的所有对象所共有的，静态变量既能被对象调用，也能直接拿类来调用。</p><h2 id="2-2-static方法"><a href="#2-2-static方法" class="headerlink" title="2.2 static方法"></a>2.2 static方法</h2><p>​static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法&#x2F;变量都是必须依赖具体的对象才能够被调用。</p><p>​但是要注意的是，虽然在静态方法中不能访问非静态成员方法和非静态成员变量，但是在非静态成员方法中是可以访问静态成员方法&#x2F;变量的。<br>​     因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p><p>总结一下，对于静态方法需要注意以下几点：<br>（1）它们仅能调用其他的static 方法。<br>（2）它们只能访问static数据。<br>（3）它们不能以任何方式引用this 或super。</p><p>举个简单的例子：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311921166.png"></p><p>　　在上面的代码中，由于print2方法是独立于对象存在的，可以直接用过类名调用。假如说可以在静态方法中访问非静态方法&#x2F;变量的话，那么如果在main方法中有下面一条语句：</p><p>　　MyObject.print2();</p><p>　　此时对象都没有，str2根本就不存在，所以就会产生矛盾了。同样对于方法也是一样，由于你无法预知在print1方法中是否访问了非静态成员变量，所以也禁止在静态成员方法中访问非静态成员方法。</p><p>　　而对于非静态成员方法，它访问静态成员方法&#x2F;变量显然是毫无限制的。</p><p>　　因此，如果说想在不创建对象的情况下调用某个方法，就可以将这个方法设置为static。我们最常见的static方法就是main方法，至于为什么main方法必须是static的，现在就很清楚了。因为程序在执行main方法的时候没有创建任何对象，因此只有通过类名来访问。</p><h2 id="2-3-static代码块"><a href="#2-3-static代码块" class="headerlink" title="2.3 static代码块"></a>2.3 static代码块</h2><p>　　static关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>　　为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候执行一次。下面看个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Date birthDate; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Date birthDate)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate; </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isBornBoomer</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> Date.valueOf(<span class="string">&quot;1946&quot;</span>); </span><br><span class="line">        <span class="type">Date</span> <span class="variable">endDate</span> <span class="operator">=</span> Date.valueOf(<span class="string">&quot;1964&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>　　isBornBoomer是用来这个人是否是1946-1964年出生的，而每次isBornBoomer被调用的时候，都会生成startDate和birthDate两个对象，造成了空间浪费，如果改成这样效率会更好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Date birthDate; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Date startDate,endDate; </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        startDate = Date.valueOf(<span class="string">&quot;1946&quot;</span>); </span><br><span class="line">        endDate = Date.valueOf(<span class="string">&quot;1964&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Date birthDate)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate; </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isBornBoomer</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> birthDate.compareTo(startDate)&gt;=<span class="number">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>　　因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p><h1 id="3-static关键字的误区"><a href="#3-static关键字的误区" class="headerlink" title="3. static关键字的误区"></a>3. static关键字的误区</h1><h2 id="3-1-static关键字会改变类中成员的访问权限吗？"><a href="#3-1-static关键字会改变类中成员的访问权限吗？" class="headerlink" title="3.1.static关键字会改变类中成员的访问权限吗？"></a>3.1.static关键字会改变类中成员的访问权限吗？</h2><p>　　有些初学的朋友会将java中的static与C&#x2F;C++中的static关键字的功能混淆了。在这里只需要记住一点：与C&#x2F;C++中的static不同，Java中的static关键字不会影响到变量或者方法的作用域。在Java中能够影响到访问权限的只有private、public、protected（包括包访问权限）这几个关键字。看下面的例子就明白了：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311921814.png"></p><p>　提示错误”age是私有的 “，这说明static关键字并不会改变变量和方法的访问权限。</p><h2 id="3-2-能通过this访问静态成员变量吗？"><a href="#3-2-能通过this访问静态成员变量吗？" class="headerlink" title="3.2 能通过this访问静态成员变量吗？"></a>3.2 能通过this访问静态成员变量吗？</h2><p>　　虽然对于静态方法来说没有this，那么在非静态方法中能够通过this访问静态成员变量吗？先看下面的一个例子，这段代码输出的结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;　　 </span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">33</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123; </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Main</span>().printValue(); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">3</span>; </span><br><span class="line">        System.out.println(<span class="built_in">this</span>.value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 输出结果：33</p><p>　　这里面主要考察队this和static的理解。this代表什么？this代表当前对象，那么通过new Main()来调用printValue的话，当前对象就是通过new Main()生成的对象。而static变量是被对象所享有的，因此在printValue中的this.value的值毫无疑问是33。在printValue方法内部的value是局部变量，根本不可能与this关联，所以输出结果是33。在这里永远要记住一点：静态成员变量虽然独立于对象，但是不代表不可以通过对象去访问，所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</p><h2 id="3-3-static能作用于局部变量么？"><a href="#3-3-static能作用于局部变量么？" class="headerlink" title="3.3 static能作用于局部变量么？"></a>3.3 <strong>static能作用于局部变量么？</strong></h2><p>　　在C&#x2F;C++中static是可以作用域局部变量的，但是在Java中切记：static是不允许用来修饰局部变量。不要问为什么，这是Java语法的规定。</p><h2 id="3-4-static和final一块用表示什么？"><a href="#3-4-static和final一块用表示什么？" class="headerlink" title="3.4 static和final一块用表示什么？"></a>3.4 <strong>static和final一块用表示什么？</strong></h2><p>​      static final用来修饰成员变量和成员方法，可简单理解为“全局常量”！ </p><p>​对于变量，表示一旦给值就不可修改，并且通过类名可以访问。 </p><p>​对于方法，表示不可覆盖，并且可以通过类名直接访问。</p><h1 id="4-常见的笔试面试题"><a href="#4-常见的笔试面试题" class="headerlink" title="4. 常见的笔试面试题"></a>4. 常见的笔试面试题</h1><h2 id="4-1-第一题"><a href="#4-1-第一题" class="headerlink" title="4.1 第一题"></a>4.1 第一题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;test static&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;test constructor&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;base static&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;base constructor&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base static</span><br><span class="line">test static</span><br><span class="line">base constructor</span><br><span class="line">test constructor</span><br></pre></td></tr></table></figure><p>　　这段代码具体的执行过程，在执行开始，先要寻找到main方法，因为main方法是程序的入口，但是在执行main方法之前，必须先加载Test类，而在加载Test类的时候发现Test类继承自Base类，因此会转去先加载Base类，在加载Base类的时候，发现有static块，便执行了static块。在Base类加载完成之后，便继续加载Test类，然后发现Test类中也有static块，便执行static块。在加载完所需的类之后，便开始执行main方法。在main方法中执行new Test()的时候会先调用父类的构造器，然后再调用自身的构造器。因此，便出现了上面的输出结果。</p><h2 id="4-2-第二题"><a href="#4-2-第二题" class="headerlink" title="4.2 第二题"></a>4.2 第二题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Test&quot;</span>); </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;test static&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;test constructor&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyClass</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;person static&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String str)</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;person &quot;</span>+str); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_">Test</span> &#123; </span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;MyClass&quot;</span>); </span><br><span class="line">    <span class="keyword">static</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;myclass static&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;myclass constructor&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test static</span><br><span class="line">myclass static</span><br><span class="line">person static</span><br><span class="line">person Test</span><br><span class="line">test constructor</span><br><span class="line">person MyClass</span><br><span class="line">myclass constructor</span><br></pre></td></tr></table></figure><p>　　这段代码的具体执行过程：首先加载Test类，因此会执行Test类中的static块。接着执行new MyClass()，而MyClass类还没有被加载，因此需要加载MyClass类。在加载MyClass类的时候，发现MyClass类继承自Test类，但是由于Test类已经被加载了，所以只需要加载MyClass类，那么就会执行MyClass类的中的static块。在加载完之后，就通过构造器来生成对象。而在生成对象的时候，必须先初始化父类的成员变量，因此会执行Test中的Person person &#x3D; new Person()，而Person类还没有被加载过，因此会先加载Person类并执行Person类中的static块，接着执行父类的构造器，完成了父类的初始化，然后就来初始化自身了，因此会接着执行MyClass中的Person person &#x3D; new Person()，最后执行MyClass的构造器。</p><h2 id="4-3-第三题"><a href="#4-3-第三题" class="headerlink" title="4.3 第三题"></a>4.3 第三题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test static 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test static 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test static 1</span><br><span class="line">test static 2</span><br></pre></td></tr></table></figure><p>　　虽然在main方法中没有任何语句，但是还是会输出，原因上面已经讲述过了。另外，static块可以出现类中的任何地方（只要不是方法内部，记住，任何方法内部都不行），并且执行是按照static块的顺序执行的。</p><h1 id="5-静态代码块的初始化顺序"><a href="#5-静态代码块的初始化顺序" class="headerlink" title="5. 静态代码块的初始化顺序"></a>5. 静态代码块的初始化顺序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent static block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;parent constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">childName</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child static block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;child constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStatic</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Child</span>();<span class="comment">// 语句(*)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parent static block</span><br><span class="line">child static block</span><br><span class="line">parent block</span><br><span class="line">parent constructor</span><br><span class="line">child block</span><br><span class="line">child constructor</span><br></pre></td></tr></table></figure><p>分析:当执行new Child()时，它首先去看父类里面有没有静态代码块，如果有，它先去执行父类里面静态代码块里面的内容，当父类的静态代码块里面的内容执行完毕之后，接着去执行子类(自己这个类)里面的静态代码块，当子类的静态代码块执行完毕之后，它接着又去看父类有没有非静态代码块，如果有就执行父类的非静态代码块，父类的非静态代码块执行完毕，接着执行父类的构造方法；父类的构造方法执行完毕之后，它接着去看子类有没有非静态代码块，如果有就执行子类的非静态代码块。子类的非静态代码块执行完毕再去执行子类的构造方法，这个就是一个对象的初始化顺序。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对象的初始化顺序:<strong>首先</strong>执行父类静态的内容，父类静态的内容执行完毕后，<strong>接着</strong>去执行子类的静态的内容，当子类的静态内容执行完毕之后，<strong>再去</strong>看父类有没有非静态代码块，如果有就执行父类的非静态代码块，父类的非静态代码块执行完毕，<strong>接着</strong>执行父类的构造方法；父类的构造方法执行完毕之后，它<strong>接着</strong>去看子类有没有非静态代码块，如果有就执行子类的非静态代码块。子类的非静态代码块执行完毕<strong>再去</strong>执行子类的构造方法。</p><p>总之一句话，<strong>静态代码块内容先执行，接着执行父类非静态代码块和构造方法，然后执行子类非静态代码块和构造方法。</strong></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>子类的构造方法，不管这个构造方法带不带参数，默认的它都会先去寻找父类的不带参数的构造方法。如果父类没有不带参数的构造方法，那么子类必须用supper关键子来调用父类带参数的构造方法，否则编译不能通过。</p><h1 id="A-static关键字使用场景"><a href="#A-static关键字使用场景" class="headerlink" title="A. static关键字使用场景"></a>A. static关键字使用场景</h1><h2 id="1-静态变量"><a href="#1-静态变量" class="headerlink" title="1. 静态变量"></a>1. 静态变量</h2><p>　把一个变量声明为静态变量通常基于以下三个目的：</p><ul><li><strong>作为共享变量使用</strong></li><li><strong>减少对象的创建</strong></li><li><strong>保留唯一副本</strong></li></ul><p>　　第一种比较容易理解，由于static变量在内存中只会存在一个副本，所以其可以作为共享变量使用，比如要定义一个全局配置、进行全局计数。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarConstants</span> &#123;</span><br><span class="line">　　<span class="comment">// 全局配置,一般全局配置会和final一起配合使用, 作为共享变量</span></span><br><span class="line">　　<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_CAR_NUM</span> <span class="operator">=</span> <span class="number">10000</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">　　<span class="comment">// 计数器</span></span><br><span class="line">　　<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">createCarNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (createCarNum &gt; CarConstants.MAX_CAR_NUM) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;超出最大可生产数量&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">Car</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">      createCarNum++;</span><br><span class="line">      <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getCreateCarNum</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> createCarNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​第二种虽然场景不多，但是基本在每个工程里面都会使用到，比如声明Loggger变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogFactory.getLoggger(MyClass.class);</span><br></pre></td></tr></table></figure><p>​实际上，如果把static去掉也是可行的，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogFactory.getLoggger(MyClass.class);</span><br></pre></td></tr></table></figure><p>　　这样一来，对于每个MyClass的实例化对象都会拥有一个LOGGER，如果创建了1000个MyClass对象，则会多出1000个Logger对象，造成资源的浪费，因此通常会将Logger对象声明为static变量，这样一来，能够减少对内存资源的占用。</p><p>　　第三种最经典的场景莫过于单例模式了，单例模式由于必须全局只保留一个副本，所以天然和static的初衷是吻合的，用static来修饰再合适不过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h2><p>　　将一个方法声明为静态方法，通常是<strong>为了方便在不创建对象的情况下调用</strong>。这种使用方式非常地常见，比如jdk的Collections类中的一些方法、单例模式的getInstance方法、工厂模式的create&#x2F;build方法、util工具类中的方法。</p><h2 id="3-静态代码块"><a href="#3-静态代码块" class="headerlink" title="3. 静态代码块"></a>3. 静态代码块</h2><p>　　静态代码块通常来说是为了对静态变量进行一些初始化操作，比如单例模式、定义枚举类：</p><ul><li><p>单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WeekDayEnum</span> &#123;</span><br><span class="line">    MONDAY(<span class="number">1</span>,<span class="string">&quot;周一&quot;</span>),</span><br><span class="line">    TUESDAY(<span class="number">2</span>, <span class="string">&quot;周二&quot;</span>),</span><br><span class="line">    WEDNESDAY(<span class="number">3</span>, <span class="string">&quot;周三&quot;</span>),</span><br><span class="line">    THURSDAY(<span class="number">4</span>, <span class="string">&quot;周四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="number">5</span>, <span class="string">&quot;周五&quot;</span>),</span><br><span class="line">    SATURDAY(<span class="number">6</span>, <span class="string">&quot;周六&quot;</span>),</span><br><span class="line">    SUNDAY(<span class="number">7</span>, <span class="string">&quot;周日&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"> </span><br><span class="line">    WeekDayEnum(<span class="type">int</span> code, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, WeekDayEnum&gt; WEEK_ENUM_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, WeekDayEnum&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 对map进行初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (WeekDayEnum weekDay : WeekDayEnum.values()) &#123;</span><br><span class="line">            WEEK_ENUM_MAP.put(weekDay.getCode(), weekDay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WeekDayEnum <span class="title function_">findByCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WEEK_ENUM_MAP.get(code);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;　</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4. 静态内部类"></a>4. 静态内部类</h2><p>  　　内部类一般情况下使用不是特别多，如果需要在外部类里面定义一个内部类，通常是基于外部类和内部类有很强关联的前提下才去这么使用。</p><p>  　　在说静态内部类的使用场景之前，我们先来看一下静态内部类和非静态内部类的区别：</p><p>  　　<strong>非静态内部类对象持有外部类对象的引用（编译器会隐式地将外部类对象的引用作为内部类的构造器参数）；而静态内部类对象不会持有外部类对象的引用</strong></p><p>  　　由于非静态内部类的实例创建需要有外部类对象的引用，所以非静态内部类对象的创建必须依托于外部类的实例；而静态内部类的实例创建只需依托外部类；</p><p>  　　并且由于非静态内部类对象持有了外部类对象的引用，因此非静态内部类可以访问外部类的非静态成员；而静态内部类只能访问外部类的静态成员；</p><p>  　　两者的根本性区别其实也决定了用static去修饰内部类的真正意图：</p><ul><li>内部类需要脱离外部类对象来创建实例</li><li>避免内部类使用过程中出现内存溢出</li></ul><p>  　　</p><p>  第一种是目前静态内部类使用比较多的场景，比如JDK集合中的Entry、builder设计模式。</p><p>　　HashMap Entry：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311922435.png"></p><p>　　builder设计模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = builder.name;</span><br><span class="line">        <span class="built_in">this</span>.age = builder.age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">age</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age=age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> Person <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在需要创建Person对象的时候</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>.Builder().name(<span class="string">&quot;张三&quot;</span>).age(<span class="number">17</span>).build();</span><br></pre></td></tr></table></figure><p>第二种情况一般出现在多线程场景下，非静态内部类可能会引发内存溢出的问题，比如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 匿名内部类, 会持有Task实例的引用</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//...耗时操作</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　上面这段代码中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">//...耗时操作</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><p>　　声明并创建了一个匿名内部类对象，该对象持有外部类Task实例的引用，如果在在run方法中做的是耗时操作，将会导致外部类Task的实例迟迟不能被回收，如果Task对象创建过多，会引发内存溢出。</p><p>​优化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SubTask</span> <span class="variable">subTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTask</span>();</span><br><span class="line">        subTask.start();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SubTask</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//...耗时操作   </span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-静态导入"><a href="#5-静态导入" class="headerlink" title="5. 静态导入"></a>5. <strong>静态导入</strong></h2><p>静态导入其实就是import static，用来导入某个类或者某个包中的静态方法或者静态变量。如下面这段代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calCircleArea</span><span class="params">(<span class="type">double</span> r)</span> &#123;</span><br><span class="line">        <span class="comment">// 可以直接用 Math类中的静态变量PI</span></span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　这样在书写代码的时候确实能省一点代码，但是会影响代码可读性，所以一般情况下不建议这么使用。</p><h1 id="B-static变量和普通成员变量区别"><a href="#B-static变量和普通成员变量区别" class="headerlink" title="B. static变量和普通成员变量区别"></a>B. static变量和普通成员变量区别</h1><p>　static变量和普通成员变量主要有以下4点区别：</p><ul><li>区别1：所属不同。static变量属于类，不单属于任何对象；普通成员变量属于某个对象</li><li>区别2：存储区域不同。static变量位于方法区；普通成员变量位于堆区。</li><li>区别3：生命周期不同。static变量生命周期与类的生命周期相同；普通成员变量和其所属的对象的生命周期相同。</li><li>区别4：在对象序列化时（Serializable），static变量会被排除在外（因为static变量是属于类的，不属于对象）</li></ul><h1 id="C-类的构造器到底是不是static方法？"><a href="#C-类的构造器到底是不是static方法？" class="headerlink" title="C. 类的构造器到底是不是static方法？"></a>C. 类的构造器到底是不是static方法？</h1><p>　　关于类的构造器是否是static方法有很多争议，在《java编程思想》一书中提到“类的构造器虽然没有用static修饰，但是实际上是static方法”，个人认为这种说法有点欠妥，原因如下：</p><p>　　1）在类的构造器中，实际上有一个隐藏的参数this引用，this是跟对象绑定的，也就是说在调用构造器之前，这个对象已经创建完毕了才能出现this引用。而构造器的作用是干什么的呢？它负责在创建一个实例对象的时候对实例进行初始化操作，即jvm在堆上为实例对象分配了相应的存储空间后，需要调用构造器对实例对象的成员变量进行初始化赋值操作。</p><p>　　2）我们再来看static方法，由于static不依赖于任何对象就可以进行访问，也就是说和this是没有任何关联的。从这一层面去讲，类的构造器不是static方法</p><p>　3）从JVM指令层面去看，类的构造器不是static方法，我们先看一下下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Person.create();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这段代码反编译之后的字节码如下：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311922674.png"></p><p>　　从上面可以看出，在调用static方法是调用的是invokestatic指令，而在调用类的构造器时实际上执行的是invokespecial指令，而这2个指令在JVM规范中的解释如下：</p><p>　　<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.invokestatic">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.invokestatic</a></p><p>!<img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311922005.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202205311922895.png"></p><p>　　可以看出，这2个指令的用途是完全不同的，invokestatic定义很清楚，就是用来调用执行static方法，而invokespecial用来调用实例方法，用来特殊调用父类方法、private方法和类的构造器。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类</title>
      <link href="/posts/46023.html"/>
      <url>/posts/46023.html</url>
      
        <content type="html"><![CDATA[<h1 id="String的原理"><a href="#String的原理" class="headerlink" title="String的原理"></a>String的原理</h1><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311817196.png"><br>由<code>=</code>创建的String对象,会存放在堆的字符串常量池中</p><h1 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法"></a>比较方法</h1><ol><li><p>equals()类的,返回的是boolean值,比较的是字符串的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span>；</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contentEquals</span><span class="params">(StringBuffer sb)</span>；</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contentEquals</span><span class="params">(CharSequence cs)</span>；</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span>；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">regionMatches</span><span class="params">(<span class="type">int</span> toffset, String other, <span class="type">int</span> ooffset,<span class="type">int</span> len)</span>  <span class="comment">//局部匹配</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">regionMatches</span><span class="params">(<span class="type">boolean</span> ignoreCase, <span class="type">int</span> toffset,String other, <span class="type">int</span> ooffset, <span class="type">int</span> len)</span>   <span class="comment">//局部匹配</span></span><br></pre></td></tr></table></figure></li><li><p>compareTo()类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span>；</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareToIgnoreCase</span><span class="params">(String str)</span>；</span><br></pre></td></tr></table></figure><p>按字典顺序比较两个字符串。该比较基于字符串中各个字符的 Unicode 值<br>两个字符串不同的情况:<br>   * 在某个索引处的字符不同<br>   *  长度不同<br>   *  以上两种兼有</p></li></ol><ul><li>如 果它们在一个或多个索引位置上的字符不同，假设 k 是这类索引的最小值；则在位置 k 上具有较小值的那个字符串（使用 &lt; 运算符确定），其字典顺序在其他字符串之前。在这种情况下，<code>compareTo</code> 返回这两个字符串在位置 k 处两个char 值的差，即值：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.charAt(k)-anotherString.charAt(k)</span><br></pre></td></tr></table></figure></li><li>如果长度不同，<code>compareTo</code> 返回这两个字符串长度的差，即值：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.length()-anotherString.length()</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>&#x3D;&#x3D;<br>判断的是否是同一个对象</li></ol><h1 id="str-lastIndexOf-Stringname"><a href="#str-lastIndexOf-Stringname" class="headerlink" title="str.lastIndexOf(Stringname)"></a>str.lastIndexOf(Stringname)</h1><p>获取指定子字符串的最后一次出现的位置</p><h1 id="从字符串中删除指定的字符"><a href="#从字符串中删除指定的字符" class="headerlink" title="从字符串中删除指定的字符"></a>从字符串中删除指定的字符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeCharAt</span><span class="params">(String s, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> s.substring(<span class="number">0</span>, pos) + s.substring(pos + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="str-replace"><a href="#str-replace" class="headerlink" title="str.replace()"></a>str.replace()</h1><p>用一个字符串替换另一个字符串中的子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.replaceFirst() <span class="comment">// 替换匹配的第一个</span></span><br><span class="line">str.replaAll() <span class="comment">// 替换匹配的全部</span></span><br></pre></td></tr></table></figure><h1 id="如何反转倒置字符串"><a href="#如何反转倒置字符串" class="headerlink" title="如何反转倒置字符串"></a>如何反转倒置字符串</h1><ol><li>使用<code>StringBuffer(String string)</code>方法缓冲输入<code>String</code>，反转缓冲区，然后使用<code>toString()</code>方法将缓冲区转换成String。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">reverse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(string).reverse().toString();</span><br></pre></td></tr></table></figure></li><li>手动实现 先把String转化为charArray数组,再从数组的最后到第一个依次输出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = str1.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=chars.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            System.out.print(chars[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="如何在字符串中查找词组"><a href="#如何在字符串中查找词组" class="headerlink" title="如何在字符串中查找词组"></a>如何在字符串中查找词组</h1><ol><li><code>indexOf()</code>方法在<code>String</code>对象中搜索单词，该方法返回字符串中的单词的位置索引(如果找到)值。 否则返回<code>-1</code>。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf();</span><br></pre></td></tr></table></figure></li><li><code>contains()</code>方法在<code>String</code>对象中搜索单词,若有该单词返回<code>true</code>,若无则返回<code>false</code> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.contains();</span><br></pre></td></tr></table></figure></li></ol><h1 id="如何拆分-x2F-分割字符串"><a href="#如何拆分-x2F-分割字符串" class="headerlink" title="如何拆分&#x2F;分割字符串"></a>如何拆分&#x2F;分割字符串</h1><p><code>split(string)</code>方法将字符串分割成多个子字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(delimeter);</span><br></pre></td></tr></table></figure><h1 id="如何字符串转转换为大写"><a href="#如何字符串转转换为大写" class="headerlink" title="如何字符串转转换为大写"></a>如何字符串转转换为大写</h1><p>使用<code>String</code>类的<code>toUpperCase()</code>方法将字符串的大小写更改为大写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.toUpperCase();</span><br></pre></td></tr></table></figure><h1 id="如何匹配字符串区域"><a href="#如何匹配字符串区域" class="headerlink" title="如何匹配字符串区域"></a>如何匹配字符串区域</h1><p><code>regionMatches()</code>方法确定两个字符串中的区域匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringRegionMatch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first_str</span> <span class="operator">=</span> <span class="string">&quot;Welcome to IBM&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">second_str</span> <span class="operator">=</span> <span class="string">&quot;I work with IBM&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> first_str.regionMatches(<span class="number">11</span>, second_str, <span class="number">12</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;first_str[11-&gt;14] == &quot;</span> + <span class="string">&quot;second_str[12 -&gt; 15]: &quot;</span></span><br><span class="line">                + match);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是几个数字参数的说明：</p><ul><li>11 - 是比较开始的源字符串中的索引号</li><li>second_str - 是目标字符串</li><li>12是从目标字符串开始比较的索引号</li><li>3是要比较的字符数</li></ul><p>执行上面示例代码，得到以下结果 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">first_str[11-&gt;</span><span class="language-bash">14] == second_str[12 -&gt; 15]: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
          <category> Api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/posts/22373.html"/>
      <url>/posts/22373.html</url>
      
        <content type="html"><![CDATA[<h1 id="this关键字的作用"><a href="#this关键字的作用" class="headerlink" title="this关键字的作用"></a>this关键字的作用</h1><ul><li>this代表了当前对象的引用</li><li>this关键字可以用在实例方法和构造器中</li><li>this用在方法中，谁调用这个方法，this就代表谁</li><li>this用在构造器中，代表构造器正在初始化的那个对象的引用</li></ul><h1 id="1-在方法中引用调用该方法的对象"><a href="#1-在方法中引用调用该方法的对象" class="headerlink" title="1. 在方法中引用调用该方法的对象"></a>1. 在方法中引用调用该方法的对象</h1><p>this关键字最大的作用就是<strong>让类中的一个方法访问该类里的另一个方法或者实例变量</strong>。</p><p>假设定义了一个Person类，这个Person对象的eat()方法需要调用它的move()方法，则如何做呢？是否应该定义如下的Person类呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个move()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行move()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个eat()方法，eat()方法需要借助move()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.move();</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行eat()方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//调用Person的eat()方法</span></span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正在执行move()方法</span><br><span class="line">正在执行eat()方法</span><br></pre></td></tr></table></figure><p>以上这种方式确实能够做到在eat()方法里调用move()方法，但从main()方法里的程序中可以看出，一共创建了两个对象：main()方法里创建一个对象；eat()方法里创建一个对象。可是真的需要创建两个对象吗？答案是否定的！因为当程序调用eat()方法时一定会提供一个Person对象，而不需要重新创建一个Person对象了。</p><p>因此需要在eat()方法中获得调用该方法的对象，通过this关键字就可以满足这个需求。</p><p><strong>this可以代表任何对象，当this出现在某个方法体中时，它所代表的对象是不确定的，但它的类型是确定的，它所代表的类型只能是当前类。只有当这个方法被调用时，它所代表的对象才被确定下来：谁在调用这个方法，this就代表谁。</strong></p><p>将上面的Person类中的eat()方法改为一下这种方式更合适：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个eat()方法，eat()方法需要借助move()方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//使用this引用调用eat()方法的对象</span></span><br><span class="line">    <span class="built_in">this</span>.move();</span><br><span class="line">    System.out.println(<span class="string">&quot;正在执行eat()方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序中eat()方法需要依赖于move()方法，现实中这种依赖情形非常常见，例如写字方法需要拿笔的方法，这种依赖都是同一个对象两个方法之间的依赖。因此，Java允许对象的的一个成员直接调用另一成员，可以省略this前缀。也就是说，上面的程序可以改为如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">    move();</span><br><span class="line">    System.out.println(<span class="string">&quot;正在执行eat()方法&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-构造器中引用该构造器正在初始化的对象"><a href="#2-构造器中引用该构造器正在初始化的对象" class="headerlink" title="2. 构造器中引用该构造器正在初始化的对象"></a>2. 构造器中引用该构造器正在初始化的对象</h1><p>this关键字可用于构造器中作为默认引用，由于构造器是直接使用new关键字来调用，而不是使用对象来调用的，所以this在构造器中代表该构造器正在初始化的对象。例如下面的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个名为age的成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//在构造器里定义一个age变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用this代表该构造器正在初始化的对象</span></span><br><span class="line">        <span class="comment">//下面的代码将会把该构造器正在初始化的对象的age成员变量设为3</span></span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用new Person()创建的对象的age成员变量都将被设为3</span></span><br><span class="line">        <span class="comment">//下面代码输出3</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>().age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与普通方法类似的是，大部分时候，在构造器中访问其它成员变量和方法时都可以省略this前缀，但如果构造器中有一个与成员变量同名的局部变量，又必须在构造器中访问这个被覆盖的成员变量，则必须使用this前缀。如上面程序所示。</p><h1 id="3-返回对象的值"><a href="#3-返回对象的值" class="headerlink" title="3. 返回对象的值"></a>3. 返回对象的值</h1><p>当this作为对象的默认引用使用时，程序可以像访问普通引用变量一样来访问这个this引用，甚至可以把this当成普通方法的返回值。请看下面程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">grow</span><span class="params">()</span> &#123;</span><br><span class="line">        age ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//可以连续调用同一个方法</span></span><br><span class="line">        p.grow().grow().grow();</span><br><span class="line">        System.out.println(<span class="string">&quot;p对象的age的值是：&quot;</span>+p.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p对象的age的值是：3</span><br></pre></td></tr></table></figure><p>从上面的程序可以看出，如果在某个方法中把this作为返回值，则可以多次连续调用同一个方法，从而使得代码更加的简洁。但这种方式容易造成实际意义的模糊，例如上面的group()方法，用于表示对象的生长，即age变量的值加1，实际上不应该有返回值。</p><p>最后需要强调一点：静态成员不能直接访问非静态成员，即static修饰的方法不能访问不适用static修饰的普通方法。对于static修饰的方法而言，可以使用类直接调用该方法，如果在static修饰的方法中使用this关键字，则这个关键字就无法指向合适的对象。所以，static修饰的方法中不能使用this引用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/posts/65056.html"/>
      <url>/posts/65056.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-内部类基础"><a href="#1-内部类基础" class="headerlink" title="1. 内部类基础"></a>1. 内部类基础</h1><p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。下面就先来了解一下这四种内部类的用法。</p><h2 id="1-1-成员内部类"><a href="#1-1-成员内部类" class="headerlink" title="1.1 成员内部类"></a>1.1 成员内部类</h2><p>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Draw</span> &#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawSahpe</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;drawshape&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来，类Draw像是类Circle的一个成员，Circle称为外部类。成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Draw</span> &#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawSahpe</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类.this.成员变量</span><br><span class="line">外部类.this.成员方法</span><br></pre></td></tr></table></figure><p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> Draw <span class="title function_">getDrawInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Draw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Draw</span> &#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawSahpe</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。创建成员内部类对象的一般方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        <span class="type">Outter</span> <span class="variable">outter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outter</span>();</span><br><span class="line">        Outter.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outter.<span class="keyword">new</span> <span class="title class_">Inner</span>();  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.<span class="type">Inner</span> <span class="variable">inner1</span> <span class="operator">=</span> outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outter</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInnerInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="literal">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">()</span> &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><h2 id="1-2-局部内部类"><a href="#1-2-局部内部类" class="headerlink" title="1.2 局部内部类"></a>1.2 局部内部类</h2><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Man</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> People <span class="title function_">getWoman</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。</p><h2 id="1-3-匿名内部类"><a href="#1-3-匿名内部类" class="headerlink" title="1.3 匿名内部类"></a>1.3 匿名内部类</h2><p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段Android事件监听代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scan_bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        history_bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这段代码为两个按钮设置监听器，这里面就使用了匿名内部类。这段代码中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就是匿名内部类的使用。代码中需要给按钮设置监听器对象，使用匿名内部类能够在实现父类或者接口中的方法情况下同时产生一个相应的对象，但是前提是这个父类或者接口必须先存在才能这样使用。当然像下面这种写法也是可以的，跟上面使用匿名内部类达到效果相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setListener</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scan_bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">Listener1</span>());       </span><br><span class="line">    history_bt.setOnClickListener(<span class="keyword">new</span> <span class="title class_">Listener2</span>());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Listener1</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Listener2</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然能达到一样的效果，但是既冗长又难以维护，所以一般使用匿名内部类的方法来编写事件监听代码。同样的，匿名内部类也是不能有访问修饰符和static修饰符的。</p><p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p><h2 id="1-4-静态内部类"><a href="#1-4-静态内部类" class="headerlink" title="1.4 静态内部类"></a>1.4 静态内部类</h2><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        Outter.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outter</span>.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outter</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">()</span> &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-深入理解内部类"><a href="#2-深入理解内部类" class="headerlink" title="2. 深入理解内部类"></a>2. 深入理解内部类</h1><h2 id="2-1-为什么成员内部类可以无条件访问外部类的成员？"><a href="#2-1-为什么成员内部类可以无条件访问外部类的成员？" class="headerlink" title="2.1 为什么成员内部类可以无条件访问外部类的成员？"></a>2.1 为什么成员内部类可以无条件访问外部类的成员？</h2><p>在此之前，我们已经讨论过了成员内部类可以无条件访问外部类的成员，那具体究竟是如何实现的呢？下面通过反编译字节码文件看看究竟。事实上，编译器在进行编译的时候，会将成员内部类单独编译成一个字节码文件，下面是Outter.java的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outter</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInnerInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="literal">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">()</span> &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后，出现了两个字节码文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/picgoimage@main/img/202205311918660.jpeg"></p><p>反编译Outter$Inner.class文件得到下面信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">javap -v Outter$Inner</span><br><span class="line">Compiled from <span class="string">&quot;Outter.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.cxh.test2.Outter$Inner <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">  SourceFile: <span class="string">&quot;Outter.java&quot;</span></span><br><span class="line">  InnerClass:</span><br><span class="line">   #<span class="number">24</span>= #<span class="number">1</span> of #<span class="number">22</span>; <span class="comment">//Inner=class com/cxh/test2/Outter$Inner of class com/cxh/tes</span></span><br><span class="line">t2/Outter</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">50</span></span><br><span class="line">  Constant pool:</span><br><span class="line">const #<span class="number">1</span> = class        #<span class="number">2</span>;     <span class="comment">//  com/cxh/test2/Outter$Inner</span></span><br><span class="line">const #<span class="number">2</span> = Asciz        com/cxh/test2/Outter$Inner;</span><br><span class="line">const #<span class="number">3</span> = class        #<span class="number">4</span>;     <span class="comment">//  java/lang/Object</span></span><br><span class="line">const #<span class="number">4</span> = Asciz        java/lang/Object;</span><br><span class="line">const #<span class="number">5</span> = Asciz        <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line">const #<span class="number">6</span> = Asciz        Lcom/cxh/test2/Outter;;</span><br><span class="line">const #<span class="number">7</span> = Asciz        &lt;init&gt;;</span><br><span class="line">const #<span class="number">8</span> = Asciz        (Lcom/cxh/test2/Outter;)V;</span><br><span class="line">const #<span class="number">9</span> = Asciz        Code;</span><br><span class="line">const #<span class="number">10</span> = Field       #<span class="number">1.</span>#<span class="number">11</span>; <span class="comment">//  com/cxh/test2/Outter$Inner.this$0:Lcom/cxh/t</span></span><br><span class="line">est2/Outter;</span><br><span class="line">const #<span class="number">11</span> = NameAndType #<span class="number">5</span>:#<span class="number">6</span>;<span class="comment">//  this$0:Lcom/cxh/test2/Outter;</span></span><br><span class="line">const #<span class="number">12</span> = Method      #<span class="number">3.</span>#<span class="number">13</span>; <span class="comment">//  java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">const #<span class="number">13</span> = NameAndType #<span class="number">7</span>:#<span class="number">14</span>;<span class="comment">//  &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">const #<span class="number">14</span> = Asciz       ()V;</span><br><span class="line">const #<span class="number">15</span> = Asciz       LineNumberTable;</span><br><span class="line">const #<span class="number">16</span> = Asciz       LocalVariableTable;</span><br><span class="line">const #<span class="number">17</span> = Asciz       <span class="built_in">this</span>;</span><br><span class="line">const #<span class="number">18</span> = Asciz       Lcom/cxh/test2/Outter$Inner;;</span><br><span class="line">const #<span class="number">19</span> = Asciz       SourceFile;</span><br><span class="line">const #<span class="number">20</span> = Asciz       Outter.java;</span><br><span class="line">const #<span class="number">21</span> = Asciz       InnerClasses;</span><br><span class="line">const #<span class="number">22</span> = class       #<span class="number">23</span>;    <span class="comment">//  com/cxh/test2/Outter</span></span><br><span class="line">const #<span class="number">23</span> = Asciz       com/cxh/test2/Outter;</span><br><span class="line">const #<span class="number">24</span> = Asciz       Inner;</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">final</span> com.cxh.test2.Outter <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</span><br><span class="line">  Code:</span><br><span class="line">   Stack=<span class="number">2</span>, Locals=<span class="number">2</span>, Args_size=<span class="number">2</span></span><br><span class="line">   <span class="number">0</span>:   aload_0</span><br><span class="line">   <span class="number">1</span>:   aload_1</span><br><span class="line">   <span class="number">2</span>:   putfield        #<span class="number">10</span>; <span class="comment">//Field this$0:Lcom/cxh/test2/Outter;</span></span><br><span class="line">   <span class="number">5</span>:   aload_0</span><br><span class="line">   <span class="number">6</span>:   invokespecial   #<span class="number">12</span>; <span class="comment">//Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="number">9</span>:   <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">   line <span class="number">16</span>: <span class="number">0</span></span><br><span class="line">   line <span class="number">18</span>: <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">  LocalVariableTable:</span><br><span class="line">   Start  Length  Slot  Name   Signature</span><br><span class="line">   <span class="number">0</span>      <span class="number">10</span>      <span class="number">0</span>    <span class="built_in">this</span>       Lcom/cxh/test2/Outter$Inner;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第11行到35行是常量池的内容，下面逐一第38行的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> com.cxh.test2.Outter <span class="built_in">this</span>$<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这行是一个指向外部类对象的指针，看到这里想必大家豁然开朗了。也就是说编译器会默认为成员内部类添加了一个指向外部类对象的引用，那么这个引用是如何赋初值的呢？下面接着看内部类的构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</span><br></pre></td></tr></table></figure><p>从这里可以看出，虽然我们在定义的内部类的构造器是无参构造器，编译器还是会默认添加一个参数，该参数的类型为指向外部类对象的一个引用，所以成员内部类中的Outter this&amp;0 指针便指向了外部类对象，因此可以在成员内部类中随意访问外部类的成员。从这里也间接说明了成员内部类是依赖于外部类的，如果没有创建外部类的对象，则无法对Outter this&amp;0引用进行初始化赋值，也就无法创建成员内部类的对象了。</p><h2 id="2-2-为什么局部内部类和匿名内部类只能访问局部final变量？"><a href="#2-2-为什么局部内部类和匿名内部类只能访问局部final变量？" class="headerlink" title="2.2 为什么局部内部类和匿名内部类只能访问局部final变量？"></a>2.2 为什么局部内部类和匿名内部类只能访问局部final变量？</h2><p>想必这个问题也曾经困扰过很多人，在讨论这个问题之前，先看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会被编译成两个class文件：Test.class和Test1.class。默认情况下，编译器会为匿名内部类和局部内部类起名为Outter1.class。默认情况下，编译器会为匿名内部类和局部内部类起名为Outterx.class（x为正整数）。</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311919845.jpeg" alt="img"></p><p>根据上图可知，test方法中的匿名内部类的名字被起为 Test$1。</p><p>上段代码中，如果把变量a和b前面的任一个final去掉，这段代码都编译不过。我们先考虑这样一个问题：</p><p>当test方法执行完毕之后，变量a的生命周期就结束了，而此时Thread对象的生命周期很可能还没有结束，那么在Thread的run方法中继续访问变量a就变成不可能了，但是又要实现这样的效果，怎么办呢？Java采用了 复制 的手段来解决这个问题。将这段代码的字节码反编译可以得到下面的内容：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311919191.png"></p><p>我们看到在run方法中有一条指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bipush 10</span><br></pre></td></tr></table></figure><p>这条指令表示将操作数10压栈，表示使用的是一个本地局部变量。这个过程是在编译期间由编译器默认进行，如果这个变量的值在编译期间可以确定，则编译器默认会在匿名内部类（局部内部类）的常量池中添加一个内容相等的字面量或直接将相应的字节码嵌入到执行字节码中。这样一来，匿名内部类使用的变量是另一个局部变量，只不过值和方法中局部变量的值相等，因此和方法中的局部变量完全独立开。</p><p>下面再看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译得到：</p><p><img src="https://alex-tyimg.oss-cn-huhehaote.aliyuncs.com/image202205311919851.png"></p><p>我们看到匿名内部类Test$1的构造器含有两个参数，一个是指向外部类对象的引用，一个是int型变量，很显然，这里是将变量test方法中的形参a以参数的形式传进来对匿名内部类中的拷贝（变量a的拷贝）进行赋值初始化。</p><p>也就说如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。</p><p>从上面可以看出，在run方法中访问的变量a根本就不是test方法中的局部变量a。这样一来就解决了前面所说的 生命周期不一致的问题。但是新的问题又来了，既然在run方法中访问的变量a和test方法中的变量a不是同一个变量，当在run方法中改变变量a的值的话，会出现什么情况？</p><p>对，会造成数据不一致性，这样就达不到原本的意图和要求。为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。</p><p>到这里，想必大家应该清楚为何 方法中的局部变量和形参都必须用final进行限定了。</p><h2 id="2-3-静态内部类有特殊的地方吗？"><a href="#2-3-静态内部类有特殊的地方吗？" class="headerlink" title="2.3 静态内部类有特殊的地方吗？"></a>2.3 静态内部类有特殊的地方吗？</h2><p>从前面可以知道，静态内部类是不依赖于外部类的，也就说可以在不创建外部类对象的情况下创建内部类的对象。另外，静态内部类是不持有指向外部类对象的引用的，这个读者可以自己尝试反编译class文件看一下就知道了，是没有Outter this&amp;0引用的。</p><h1 id="3-内部类的使用场景和好处"><a href="#3-内部类的使用场景和好处" class="headerlink" title="3. 内部类的使用场景和好处"></a>3. 内部类的使用场景和好处</h1><p>为什么在Java中需要内部类？总结一下主要有以下四点：</p><ol><li>每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，</li><li>方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</li><li>方便编写事件驱动程序</li><li>方便编写线程代码</li></ol><p>个人觉得第一点是最重要的原因之一，内部类的存在使得Java的多继承机制变得更加完善。</p><h1 id="4-常见的与内部类相关的笔试面试题"><a href="#4-常见的与内部类相关的笔试面试题" class="headerlink" title="4. 常见的与内部类相关的笔试面试题"></a>4. 常见的与内部类相关的笔试面试题</h1><h2 id="1-根据注释填写-1-，-2-，-3-处的代码"><a href="#1-根据注释填写-1-，-2-，-3-处的代码" class="headerlink" title="1. 根据注释填写(1)，(2)，(3)处的代码"></a>1. 根据注释填写(1)，(2)，(3)处的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">           <span class="comment">// 初始化Bean1</span></span><br><span class="line">           (<span class="number">1</span>)</span><br><span class="line">           bean1.I++;</span><br><span class="line">           <span class="comment">// 初始化Bean2</span></span><br><span class="line">           (<span class="number">2</span>)</span><br><span class="line">           bean2.J++;</span><br><span class="line">           <span class="comment">//初始化Bean3</span></span><br><span class="line">           (<span class="number">3</span>)</span><br><span class="line">           bean3.k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Bean1</span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="variable">I</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean2</span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="variable">J</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bean</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Bean3</span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从前面可知，对于成员内部类，必须先产生外部类的实例化对象，才能产生内部类的实例化对象。而静态内部类不用产生外部类的实例化对象即可产生内部类的实例化对象。</p><p><strong>创建静态内部类对象的一般形式为： 外部类类名.内部类类名 xxx &#x3D; new 外部类类名.内部类类名()</strong></p><p><strong>创建成员内部类对象的一般形式为： 外部类类名.内部类类名 xxx &#x3D; 外部类对象名.new 内部类类名()</strong></p><p>因此，（1），（2），（3）处的代码分别为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();    </span><br><span class="line"></span><br><span class="line">Test.<span class="type">Bean1</span> <span class="variable">bean1</span> <span class="operator">=</span> test.<span class="keyword">new</span> <span class="title class_">Bean1</span>(); </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.<span class="type">Bean2</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>.Bean2();   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean</span>();     </span><br><span class="line"></span><br><span class="line">Bean.<span class="type">Bean3</span> <span class="variable">bean3</span> <span class="operator">=</span>  bean.<span class="keyword">new</span> <span class="title class_">Bean3</span>();   </span><br></pre></td></tr></table></figure><h2 id="2-下面这段代码的输出结果是什么？"><a href="#2-下面这段代码的输出结果是什么？" class="headerlink" title="2. 下面这段代码的输出结果是什么？"></a>2. 下面这段代码的输出结果是什么？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">Outter</span> <span class="variable">outter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outter</span>();</span><br><span class="line">        outter.<span class="keyword">new</span> <span class="title class_">Inner</span>().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;局部变量：&quot;</span> + a);</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类变量：&quot;</span> + <span class="built_in">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类变量：&quot;</span> + Outter.<span class="built_in">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>最后补充一点知识：关于成员内部类的继承问题。一般来说，内部类是很少用来作为继承用的。但是当用来继承的话，要注意两点：</p><p>1）成员内部类的引用方式必须为 Outter.Inner.</p><p>2）构造器中必须有指向外部类对象的引用，并通过这个引用调用super()。这段代码摘自《Java编程思想》</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithInner</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InheritInner</span> <span class="keyword">extends</span> <span class="title class_">WithInner</span>.Inner &#123;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// InheritInner() 是不能通过编译的，一定要加上形参</span></span><br><span class="line">    InheritInner(WithInner wi) &#123;</span><br><span class="line">        wi.<span class="built_in">super</span>(); <span class="comment">//必须有这句调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WithInner</span> <span class="variable">wi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WithInner</span>();</span><br><span class="line">        <span class="type">InheritInner</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritInner</span>(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的五大成分</title>
      <link href="/posts/63513.html"/>
      <url>/posts/63513.html</url>
      
        <content type="html"><![CDATA[<p>类中有且仅有5大成分（五大金刚）</p><ul><li>成员变量Field：描述类或者对象的属性信息的。</li><li>成员方法Method：描述类或者对象的行为的。</li><li>构造器（构造方法,Constructor）: 初始化类的一个对象返回。</li><li>代码块：代码块按照有无static可以分为静态代码块和实例代码块。</li><li>内部类：将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。</li></ul><h1 id="1-成员变量Field"><a href="#1-成员变量Field" class="headerlink" title="1. 成员变量Field"></a>1. 成员变量Field</h1><p>在Java中对象的属性称为成员变量。为了了解成员变量，在下面的代码中首先定义一个图书类，成员变量对应于类对象的属性，在Book类中设置3个成员变量，分别为id,name和category,分别对应于图书编号，图书名称和图书类别3个图书属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String name;    <span class="comment">//定义一个String类型的成员变量</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;  <span class="comment">//定义一个getName()方法</span></span><br><span class="line">   <span class="type">int</span> id=<span class="number">0</span>;               <span class="comment">//局部变量</span></span><br><span class="line">   setName=(<span class="string">&quot;java&quot;</span>);       <span class="comment">//调用类中其他方法</span></span><br><span class="line">   <span class="keyword">return</span> id+<span class="built_in">this</span>.name;  <span class="comment">//设置方法返回值</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;   <span class="comment">//定义一个setName()方法</span></span><br><span class="line">     <span class="built_in">this</span>.name=name;         <span class="comment">//将参数赋值于类中的成员变量</span></span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">public</span> Book <span class="title function_">getBook</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>;          <span class="comment">//返回Book类引用</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>成员变量可以设置初始值，也可以不设置，如果不设置初始值，则会有默认值。</p><h1 id="2-成员方法Method"><a href="#2-成员方法Method" class="headerlink" title="2. 成员方法Method"></a>2. 成员方法Method</h1><p>在Java语言中使用成员方法对应于类对象的行为。以上面代码中Book类为例，它包含getName()和setName()两个方法。</p><p>一个成员方法可以有参数，这个参数可以是对象，也可以是基本数据类型的变量。同时成员方法有返回值和不返回任何值的选择，如果需要返回值，可以在方法体中使用return关键字，返回值可以是计算结果，也可以是其他想要的数值和对象，无返回值可以使用void关键字表示。</p><p>在成员方法中可以调用其他成员方法和类成员变量，例如上述代码中getName()方法中就调用了setName()方法将图书名称赋予一个值。</p><p>注：关于权限修饰符</p><p>如果一个类的成员变量或成员方法被修饰为private，则只能在本类中使用，在子类中不可使用，并且在其他包的类中是不可见的。如果被修饰为public，则在子类和其他包的类中可以使用。</p><h1 id="3-构造器-构造方法-Constructor"><a href="#3-构造器-构造方法-Constructor" class="headerlink" title="3. 构造器(构造方法,Constructor)"></a>3. 构造器(构造方法,Constructor)</h1><h2 id="3-1-构造器的作用"><a href="#3-1-构造器的作用" class="headerlink" title="3.1 构造器的作用"></a>3.1 构造器的作用</h2><p>通过调用构造器可以返回一个类的对象，构造器同时负责帮我们把对象的数据（属性和行为等信息）初始化好。</p><h2 id="3-2-构造器的格式"><a href="#3-2-构造器的格式" class="headerlink" title="3.2 构造器的格式"></a>3.2 构造器的格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表) &#123;</span><br><span class="line">    <span class="comment">// 构造体代码，执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-构造器应用"><a href="#3-3-构造器应用" class="headerlink" title="3.3 构造器应用"></a>3.3 构造器应用</h2><p>首先定义一个学生类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;无参数构造器被调用&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来通过调用构造器得到两个学生对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateStu02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="comment">// 类名 变量名称 = new 类名();</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量，赋值</span></span><br><span class="line">        s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">20</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 输出值</span></span><br><span class="line">        System.out.println(s1.name);</span><br><span class="line">        System.out.println(s1.age); </span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 赋值</span></span><br><span class="line">        s2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">18</span> ;</span><br><span class="line">        System.out.println(s2.name);</span><br><span class="line">        System.out.println(s2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4. 代码块"></a>4. 代码块</h1><h2 id="4-1-静态代码块"><a href="#4-1-静态代码块" class="headerlink" title="4.1 静态代码块"></a>4.1 静态代码块</h2><p><strong>静态代码块</strong><br>​         必须有static修饰，必须放在类下。与类一起加载执行。</p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">     <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>每次执行类，加载类的时候都会先执行静态代码块一次。</li><li>静态代码块是自动触发执行的，只要程序启动静态代码块就会先执行一次。</li><li>作用：在启动程序之前可以做资源的初始化，一般用于初始化静态资源。</li></ul><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaimaKuaiDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化静态资源</span></span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块执行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法执行&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-实例代码块"><a href="#4-2-实例代码块" class="headerlink" title="4.2 实例代码块"></a>4.2 实例代码块</h2><p><strong>实例代码块</strong><br>​         没有static修饰，必须放在类下。与对象初始化一起加载。</p><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>无static修饰。属于对象，与对象的创建一起执行的。</li><li>每次调用构造器初始化对象，实例代码块都要自动触发执行一次。</li><li>实例代码块实际上是提取到每一个构造器中去执行的。</li><li>作用：实例代码块用于初始化对象的资源。</li></ul><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaimaKuaiDemo02</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例代码块。 无static修饰。</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例代码块执行&quot;</span>);</span><br><span class="line">        name = <span class="string">&quot;dl&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DaimaKuaiDemo02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;实例代码块执行&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DaimaKuaiDemo02</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;实例代码块执行&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 匿名对象，创建出来没有给变量。</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DaimaKuaiDemo02</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DaimaKuaiDemo02</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DaimaKuaiDemo02</span>(<span class="string">&quot;xulei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出三次：实例代码块执行</span></span><br></pre></td></tr></table></figure><h1 id="5-内部类"><a href="#5-内部类" class="headerlink" title="5. 内部类"></a>5. 内部类</h1><p>请看这一节<a href="./03.Java%E5%86%85%E9%83%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3.md">Java内部类详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的三大特征</title>
      <link href="/posts/4667.html"/>
      <url>/posts/4667.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h1><h2 id="1-1-封装的步骤"><a href="#1-1-封装的步骤" class="headerlink" title="1.1 封装的步骤"></a>1.1 封装的步骤</h2><p>1.使用 <code>private</code> 关键字来修饰成员变量。</p><p>2.使用<code>public</code>修饰getter和setter方法。</p><h2 id="1-2-封装的步骤实现"><a href="#1-2-封装的步骤实现" class="headerlink" title="1.2 封装的步骤实现"></a>1.2 封装的步骤实现</h2><ol><li>private修饰成员变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>public修饰getter和setter方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">      name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; a &lt;<span class="number">200</span>) &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><h3 id="2-1-1-引入"><a href="#2-1-1-引入" class="headerlink" title="2.1.1 引入"></a>2.1.1 引入</h3><p>假如我们要定义如下类:<br>学生类,老师类和工人类，分析如下。</p><ol><li><p>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</p></li><li><p>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</p></li><li><p>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</p></li></ol><p>如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？</p><p>假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要<strong>继承</strong>那一个类即可。如图所示：</p><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><h3 id="2-1-2-继承的含义"><a href="#2-1-2-继承的含义" class="headerlink" title="2.1.2 继承的含义"></a>2.1.2 继承的含义</h3><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><p><strong>继承</strong>：就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p><h3 id="2-1-3-继承的好处"><a href="#2-1-3-继承的好处" class="headerlink" title="2.1.3 继承的好处"></a>2.1.3 继承的好处</h3><ol><li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li><li>使类与类之间产生了关系。</li></ol><h2 id="2-2-继承的格式"><a href="#2-2-继承的格式" class="headerlink" title="2.2 继承的格式"></a>2.2 继承的格式</h2><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</strong></p><h2 id="2-3-继承案例"><a href="#2-3-继承案例" class="headerlink" title="2.3 继承案例"></a>2.3 继承案例</h2><h3 id="2-3-1-案例"><a href="#2-3-1-案例" class="headerlink" title="2.3.1 案例"></a>2.3.1 案例</h3><p>请使用继承定义以下类:</p><ol><li>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</li><li>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</li><li>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</li></ol><h3 id="2-3-2-案例图解分析"><a href="#2-3-2-案例图解分析" class="headerlink" title="2.3.2 案例图解分析"></a>2.3.2 案例图解分析</h3><p>老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。</p><h3 id="2-3-3-案例代码实现"><a href="#2-3-3-案例代码实现" class="headerlink" title="2.3.3 案例代码实现"></a>2.3.3 案例代码实现</h3><p><strong>1.父类Human类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">   <span class="comment">// 合理隐藏</span></span><br><span class="line">   <span class="keyword">private</span> String name ;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合理暴露</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.子类Teacher类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.子类Student类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.子类HeadTeacher类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadTeacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.测试类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        dlei.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(dlei.getName());</span><br><span class="line">        System.out.println(dlei.getAge());</span><br><span class="line">        System.out.println(dlei.getSalary());</span><br><span class="line">        dlei.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="type">HeadTeacher</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeadTeacher</span>();</span><br><span class="line">        linTao.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">        linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(linTao.getName());</span><br><span class="line">        System.out.println(linTao.getAge());</span><br><span class="line">        System.out.println(linTao.getSalary());</span><br><span class="line">        linTao.admin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xugan.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">        System.out.println(xugan.getName());</span><br><span class="line">        System.out.println(xugan.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-小结"><a href="#2-3-4-小结" class="headerlink" title="2.3.4 小结"></a>2.3.4 小结</h3><p>1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。</p><p>2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！</p><h2 id="2-4-子类不能继承的内容"><a href="#2-4-子类不能继承的内容" class="headerlink" title="2.4 子类不能继承的内容"></a>2.4 子类不能继承的内容</h2><h3 id="2-4-1-引入"><a href="#2-4-1-引入" class="headerlink" title="2.4.1 引入"></a>2.4.1 引入</h3><p>并不是父类的所有内容都可以给子类继承的：</p><p><strong>子类不能继承父类的构造器，因为子类有自己的构造器。</strong></p><p><strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter&#x2F;setter方法访问父类的private成员变量。</strong></p><h3 id="2-4-2-演示代码"><a href="#2-4-2-演示代码" class="headerlink" title="2.4.2 演示代码"></a>2.4.2 演示代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line"><span class="comment">//System.out.println(z.num2); // 私有的子类无法使用</span></span><br><span class="line">        <span class="comment">// 通过getter/setter方法访问父类的private成员变量</span></span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        <span class="comment">// z.show2(); // 私有的子类无法使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-继承后的特点"><a href="#2-5-继承后的特点" class="headerlink" title="2.5 继承后的特点"></a>2.5 继承后的特点</h2><h3 id="2-5-1-成员变量"><a href="#2-5-1-成员变量" class="headerlink" title="2.5.1 成员变量"></a>2.5.1 成员变量</h3><h4 id="2-5-1-1-成员变量不重名"><a href="#2-5-1-1-成员变量不重名" class="headerlink" title="2.5.1.1 成员变量不重名"></a>2.5.1.1 成员变量不重名</h4><p>如果子类父类中出现<strong>不重名</strong>的成员变量，这时的访问是<strong>没有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Zi中的成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span>+num); <span class="comment">// 继承而来，所以直接访问。</span></span><br><span class="line"><span class="comment">// 访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num2=&quot;</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z.show();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="2-5-1-2-成员变量重名"><a href="#2-5-1-2-成员变量重名" class="headerlink" title="2.5.1.2 成员变量重名"></a>2.5.1.2 成员变量重名</h4><p>如果子类父类中出现<strong>重名</strong>的成员变量，这时的访问是<strong>有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi1</span> <span class="keyword">extends</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span> + num);</span><br><span class="line"><span class="comment">// 访问子类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num=&quot;</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量如何解决呢？我们可以使用super关键字。</p><h4 id="2-5-1-3-super访问父类成员变量"><a href="#2-5-1-3-super访问父类成员变量" class="headerlink" title="2.5.1.3 super访问父类成员变量"></a>2.5.1.3 super访问父类成员变量</h4><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于 <code>this</code> 。</p><p>需要注意的是：<strong>super代表的是父类对象的引用，this代表的是当前对象的引用。</strong></p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.父类成员变量名</span><br></pre></td></tr></table></figure><p>子类方法需要修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 访问方法中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method num=&quot;</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Zi num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Fu num=&quot;</span> + <span class="built_in">super</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">method num=<span class="number">1</span></span><br><span class="line">Zi num=<span class="number">6</span></span><br><span class="line">Fu num=<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。</p></blockquote><h3 id="2-5-2-成员方法"><a href="#2-5-2-成员方法" class="headerlink" title="2.5.2 成员方法"></a>2.5.2 成员方法</h3><h4 id="2-5-2-1-成员方法不重名"><a href="#2-5-2-1-成员方法不重名" class="headerlink" title="2.5.2.1 成员方法不重名"></a>2.5.2.1 成员方法不重名</h4><p>如果子类父类中出现<strong>不重名</strong>的成员方法，这时的调用是<strong>没有影响的</strong>。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu类中的show方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi类中的show2方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show(); </span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-2-成员方法重名"><a href="#2-5-2-2-成员方法重名" class="headerlink" title="2.5.2.2 成员方法重名"></a>2.5.2.2 成员方法重名</h4><p>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">//子类重写了父类的show方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo05</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">z.show();  <span class="comment">// Zi show</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-构造器"><a href="#2-5-3-构造器" class="headerlink" title="2.5.3 构造器"></a>2.5.3 构造器</h3><h4 id="2-5-3-1-引入"><a href="#2-5-3-1-引入" class="headerlink" title="2.5.3.1 引入"></a>2.5.3.1 引入</h4><p>当类之间产生了关系，其中各类中的构造器，又产生了哪些影响呢？<br>首先我们要回忆两个事情，构造器的定义格式和作用。</p><ol><li>构造器的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li><li>构造器的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</li></ol><p><strong>继承后子类构造器特点:子类所有构造器的第一行都会先调用父类的无参构造器，再执行自己</strong></p><h4 id="2-5-3-2-案例演示"><a href="#2-5-3-2-案例演示" class="headerlink" title="2.5.3.2 案例演示"></a>2.5.3.2 案例演示</h4><p>按如下需求定义类:</p><ol><li>人类<br>成员变量: 姓名,年龄<br>成员方法: 吃饭</li><li>学生类<br>成员变量: 姓名,年龄,成绩<br>成员方法: 吃饭</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">父类无参</span><br><span class="line">子类无参</span><br><span class="line">----------</span><br><span class="line">父类无参</span><br><span class="line">子类有参</span><br></pre></td></tr></table></figure><h4 id="2-5-3-3-小结"><a href="#2-5-3-3-小结" class="headerlink" title="2.5.3.3 小结"></a>2.5.3.3 小结</h4><ul><li>子类构造器执行的时候，都会在第一行默认先调用父类无参数构造器一次。</li><li>子类构造器的第一行都隐含了一个**super()<strong>去调用父类无参数构造器，</strong>super()**可以省略不写。</li></ul><h2 id="2-6-方法重写"><a href="#2-6-方法重写" class="headerlink" title="2.6 方法重写"></a>2.6 方法重写</h2><h3 id="2-6-1-概念"><a href="#2-6-1-概念" class="headerlink" title="2.6.1 概念"></a>2.6.1 概念</h3><p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p><h3 id="2-6-2-使用场景和案例"><a href="#2-6-2-使用场景和案例" class="headerlink" title="2.6.2 使用场景和案例"></a>2.6.2 使用场景和案例</h3><p>发生在子父类之间的关系。<br>子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。</p><p>例如：我们定义了一个动物类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物跑的很快！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物都可以叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">ddm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        ddm.run();</span><br><span class="line">      <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">      ddm.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-Override重写注解"><a href="#2-6-3-Override重写注解" class="headerlink" title="2.6.3 @Override重写注解"></a>2.6.3 @Override重写注解</h3><ul><li><p>@Override:注解，重写注解校验！</p></li><li><p>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</p></li><li><p>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</p><p>加上后的子类代码形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 声明不变，重新实现</span></span><br><span class="line">    <span class="comment">// 方法名称与父类全部一样，只是方法体中的功能重写写了！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6-4-注意事项"><a href="#2-6-4-注意事项" class="headerlink" title="2.6.4 注意事项"></a>2.6.4 注意事项</h3><ol><li>方法重写是发生在子父类之间的关系。</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><h2 id="2-7-super-…-和this-…"><a href="#2-7-super-…-和this-…" class="headerlink" title="2.7 super(…)和this(…)"></a>2.7 super(…)和this(…)</h2><h3 id="2-7-1-引入"><a href="#2-7-1-引入" class="headerlink" title="2.7.1 引入"></a>2.7.1 引入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造器,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参构造器,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造器</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99.9</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，子类有参数构造器只是初始化了自己对象中的成员变量score，而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢，我们可以借助与super(…)去调用父类构造器，以便初始化继承自父类对象的name和age.</p><h3 id="2-7-2-super和this的用法格式"><a href="#2-7-2-super和this的用法格式" class="headerlink" title="2.7.2 super和this的用法格式"></a>2.7.2 super和this的用法格式</h3><p>super和this完整的用法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员变量    --    本类的</span><br><span class="line"><span class="built_in">super</span>.成员变量    --    父类的</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.成员方法名()  --    本类的    </span><br><span class="line"><span class="built_in">super</span>.成员方法名()   --    父类的</span><br></pre></td></tr></table></figure><p>接下来我们使用调用构造器格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(...) -- 调用父类的构造器，根据参数匹配确认</span><br><span class="line"><span class="built_in">this</span>(...) -- 调用本类的其他构造器，根据参数匹配确认</span><br></pre></td></tr></table></figure><h3 id="2-7-3-super-…-用法演示"><a href="#2-7-3-super-…-用法演示" class="headerlink" title="2.7.3 super(….)用法演示"></a>2.7.3 super(….)用法演示</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;凤姐&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造器,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name ， <span class="type">int</span> age，<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name ,age);<span class="comment">// 调用父类有参构造器Person(String name , int age)初始化name和age</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造器</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>，<span class="number">20</span>，<span class="number">99</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 张三</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p><p>super(..)是根据参数去确定调用父类哪个构造器的。</p><h3 id="2-7-4-super-…-案例图解"><a href="#2-7-4-super-…-案例图解" class="headerlink" title="2.7.4 super(…)案例图解"></a>2.7.4 super(…)案例图解</h3><p><strong>父类空间优先于子类对象产生</strong></p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造器调用时，一定先调用父类的构造器。</p><h3 id="2-7-5-this-…-用法演示"><a href="#2-7-5-this-…-用法演示" class="headerlink" title="2.7.5 this(…)用法演示"></a>2.7.5 this(…)用法演示</h3><ul><li>默认是去找本类中的其他构造器，根据参数来确定具体调用哪一个构造器。</li><li>为了借用其他构造器的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._08this和<span class="built_in">super</span>调用构造器;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this(...):</span></span><br><span class="line"><span class="comment"> *    默认是去找本类中的其他构造器，根据参数来确定具体调用哪一个构造器。</span></span><br><span class="line"><span class="comment"> *    为了借用其他构造器的功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xuGan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(xuGan.getName()); <span class="comment">// 输出:徐干</span></span><br><span class="line">        System.out.println(xuGan.getAge());<span class="comment">// 输出:21</span></span><br><span class="line">        System.out.println(xuGan.getSex());<span class="comment">// 输出： 男</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 很弱，我的兄弟很牛逼啊，我可以调用其他构造器：Student(String name, int age, char sex)</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;徐干&quot;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age   ;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex   ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-6-小结"><a href="#2-7-6-小结" class="headerlink" title="2.7.6 小结"></a>2.7.6 小结</h3><ul><li><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p></li><li><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p></li><li><p><strong>super(..)和this(…)是根据参数去确定调用父类哪个构造器的。</strong></p></li><li><p><strong>super(..)可以调用父类构造器初始化继承自父类的成员变量的数据。</strong></p></li><li><p><strong>this(..)可以调用本类中的其他构造器。</strong></p></li></ul><h2 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h2><ol><li>Java只支持单继承，不支持多继承。</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// class C2 extends A, B &#123;&#125; // error</span></span><br></pre></td></tr></table></figure><ol start="2"><li>一个类可以有多个子类。</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A可以有多个子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> <span class="keyword">extends</span>  <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>可以多层继承。</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote><h1 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h1><h2 id="3-1-多态的形式"><a href="#3-1-多态的形式" class="headerlink" title="3.1 多态的形式"></a>3.1 多态的形式</h2><p><strong>多态是出现在继承或者实现关系中的</strong>。</p><p><strong>多态体现的格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p><strong>多态的前提</strong>：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><h2 id="3-2-多态的案例演示"><a href="#3-2-多态的案例演示" class="headerlink" title="3.2 多态的案例演示"></a>3.2 多态的案例演示</h2><p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。如果子类没有重写该方法，就会调用父类的该方法</strong>。</p><p>总结起来就是：<strong>编译看左边，运行看右边。</strong></p><p>代码如下：</p><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        a1.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 调用的是 Dog 的 eat</span></span><br><span class="line">        a2.eat();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-多态的定义和前提"><a href="#3-3-多态的定义和前提" class="headerlink" title="3.3 多态的定义和前提"></a>3.3 多态的定义和前提</h2><p><strong>多态</strong>： 是指同一行为，具有多个不同表现形式。</p><p>从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。</p><p> <strong>前提【重点】</strong></p><ol><li><p>继承或者实现【二选一】</p></li><li><p>方法的重写【意义体现：不重写，无意义】</p></li><li><p>父类引用指向子类对象【格式体现】</p><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote></li></ol><h2 id="3-4-多态的好处"><a href="#3-4-多态的好处" class="headerlink" title="3.4 多态的好处"></a>3.4 多态的好处</h2><p>实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。代码如下：</p><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用showCatEat </span></span><br><span class="line">        showCatEat(c);</span><br><span class="line">        <span class="comment">// 调用showDogEat </span></span><br><span class="line">        showDogEat(d); </span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        以上两个方法, 均可以被showAnimalEat(Animal a)方法所替代</span></span><br><span class="line"><span class="comment">        而执行效果一致</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        showAnimalEat(c);</span><br><span class="line">        showAnimalEat(d); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCatEat</span> <span class="params">(Cat c)</span>&#123;</span><br><span class="line">        c.eat(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showDogEat</span> <span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAnimalEat</span> <span class="params">(Animal a)</span>&#123;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于多态特性的支持，showAnimalEat方法的Animal类型，是Cat和Dog的父类类型，父类类型接收子类对象，当然可以把Cat对象和Dog对象，传递给方法。</p><p>当eat方法执行时，多态规定，执行的是子类重写的方法，那么效果自然与showCatEat、showDogEat方法一致，所以showAnimalEat完全可以替代以上两方法。</p><p>不仅仅是替代，在扩展性方面，无论之后再多的子类出现，我们都不需要编写showXxxEat方法了，直接使用showAnimalEat都可以完成。<strong>从而实现了实现类的自动切换。</strong></p><p>所以，多态的好处，体现在，可以使程序编写的更简单，并有良好的扩展。</p><h2 id="3-5-多态的弊端"><a href="#3-5-多态的弊端" class="headerlink" title="3.5 多态的弊端"></a>3.5 多态的弊端</h2><p>我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时<strong>多态的写法就无法访问子类独有功能了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-引用类型转换"><a href="#3-5-引用类型转换" class="headerlink" title="3.5 引用类型转换"></a>3.5 引用类型转换</h2><h3 id="3-5-1-为什么要转型"><a href="#3-5-1-为什么要转型" class="headerlink" title="3.5.1 为什么要转型"></a>3.5.1 为什么要转型</h3><p><strong>多态的写法就无法访问子类独有功能了。</strong></p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>回顾基本数据类型转换</p><ul><li>自动转换: 范围小的赋值给范围大的.自动完成:double d &#x3D; 5; </li><li>强制转换: 范围大的赋值给范围小的,强制转换:int i &#x3D; (int)3.14</li></ul><p>​     多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。</p><h3 id="3-5-2-向上转型（自动转换）"><a href="#3-5-2-向上转型（自动转换）" class="headerlink" title="3.5.2 向上转型（自动转换）"></a>3.5.2 向上转型（自动转换）</h3><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。<br>当父类引用指向一个子类对象时，便是向上转型。<br>使用格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p><strong>原因是：父类类型相对于子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong>所以子类范围小可以直接自动转型给父类类型的变量。</p><h3 id="3-5-3-向下转型（强制转换）"><a href="#3-5-3-向下转型（强制转换）" class="headerlink" title="3.5.3 向下转型（强制转换）"></a>3.5.3 向下转型（强制转换）</h3><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。<br>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure><h3 id="3-5-4-案例演示"><a href="#3-5-4-案例演示" class="headerlink" title="3.5.4 案例演示"></a>3.5.4 案例演示</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-5-转型的异常"><a href="#3-5-5-转型的异常" class="headerlink" title="3.5.5 转型的异常"></a>3.5.5 转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</p><h3 id="3-5-6-instanceof关键字"><a href="#3-5-6-instanceof关键字" class="headerlink" title="3.5.6 instanceof关键字"></a>3.5.6 instanceof关键字</h3><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/posts/39026.html"/>
      <url>/posts/39026.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库基础"><a href="#MySQL数据库基础" class="headerlink" title="MySQL数据库基础"></a>MySQL数据库基础</h1><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><ol><li><p>数据库的英文：DataBase  简称：DB.</p></li><li><p>什么是数据库？</p><p>​io 数据持久化      内存？  txt </p><blockquote><p>用来存储和管理数据的有结构和组织的仓库。其本质就是一个文件夹</p></blockquote></li><li><p>数据库的特点：</p><p>​1）可以进行数据的持久化操，其实数据库就是一个大的文件系统。</p><p>​    2）方便统一管理和存储数据</p><p>​    3）使用统一的方式进行数据库的操作和管理</p></li><li><p>常见的数据库</p><p>​1） MySQL  数据库，期初是Sun公司开发的产品，后期Oracle</p><p>公司收够，是Oracle公司的产品，这款软件是开源。</p><p>​         MariaDB 完全免费</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MySQL分社区版和商业版。社区版是免费的，商业版要收费。</span><br><span class="line">1、MySQL Community Server 社区版本，开源免费，但不提供官方技术支持。</span><br><span class="line">2、MySQL Enterprise Edition 企业版本，需付费，可以试用30天。</span><br><span class="line">3、MySQL Cluster 集群版，开源免费。可将几个MySQL Server封装成一个Server。</span><br><span class="line">4、MySQL Cluster CGE 高级集群版，需付费。</span><br></pre></td></tr></table></figure><p>​ 2) Oracle 数据库，是闭源产品，市场占有率仅次于MySQL</p><p>​     3) SQLServer数据库，是微软旗下的产品，同样是闭源产品主要应用在微软的整体解决方案中</p><p>​     4）DB2数据库，IBM公司的产品，闭源，应用在IBM的整体解决方案中</p><h2 id="安装MariaDB数据库"><a href="#安装MariaDB数据库" class="headerlink" title="安装MariaDB数据库"></a>安装MariaDB数据库</h2><p>mysql的安装和卸载是比较繁琐的，对于初学者来讲，会带来很多不必要的麻烦！</p><p>安装MariaDB的原因：</p><ul><li>1.安装非常简单，傻瓜式操作；</li><li>2.自带可视化工具，不需要借助第三方软件进行数据的操作。</li></ul><p>安装过程中需要注意的点：</p><blockquote><ol><li><p>如果安装失败，需要通过控制面板进行卸载造成，完了继续双击安装包进行安装</p></li><li><p>安装过程中，需要设置自己的用户密码。第一个是密码填写，第二次是密码确定。因为用户名是默认的<code>root</code>，建议设置为：<code>root</code></p></li><li><p>还需要勾选字符集：<code>UTF8</code></p></li><li><p>注意下：mysql数据库的默认端口号是：<code>3306</code></p></li><li><p>安装成功的标志：</p><p>（1）看桌面上有没有<code>HeidiSQL软件图标</code></p><p>（2）打开开始，找到安装的Mariadb文件夹，找到MySQL Client5.5，打开之后在黑窗口面板上填写自己设置的密码：root，回车之后出现以下的内容表示安装成功！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Enter password: ****</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.5</span><span class="number">.67</span>-MariaDB mariadb.org binary distribution</span><br><span class="line"><span class="title function_">Copyright</span> <span class="params">(c)</span> <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line">   </span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol><li><p>登录mysql 的方式</p><p>（1）点击开始，找到安装的Mariadb文件夹，找到MySQL Client5.5，打开之后在黑窗口面板上填写自己设置的密码：root</p><p>（2）win+R ，调出的窗口中输入cmd。先将路径切换到MariaDB数据库的bin目录下</p><blockquote><p>cd D:</p><p>cd 01-software&#x2F;MariaDB 5.5&#x2F;bin</p><p>》 mysql  -uroot -proot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\01-software&gt; cd MariaDB 5.5/bin</span><br><span class="line">D:\01-software\MariaDB 5.5\bin&gt; mysql -uroot -proot</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 5.5.67-MariaDB mariadb.org binary distribution</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>如果有会话链接失败的，或者在黑窗口不能够登录成功的，是应为mysql的服务端没有开启。下面开启服务端的步骤：</p><p>（1）第一种方式：</p><p>​点开开始，输入“服务”，跳出服务界面，打开之后寻找“MySQL”</p><p>​或者win+R  输入：services.msc，依旧会跳出服务界面。打开之后寻找“MySQL”</p><p>（2）第二种，使用命令进行启动和关闭</p><ul><li><p>启动：net start  mysql</p></li><li><p>终止：net stop mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;net stop mysql</span><br><span class="line">MySQL 服务正在停止..</span><br><span class="line">MySQL 服务已成功停止。</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>退出Mysql：</p><pre><code>输入：exit 或者 quit</code></pre></li></ol><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><ol><li><p>什么是SQL？</p><p>英文全称： <code>Structured Query Language</code>  </p><p>中文名称：结构化查询语言</p><p>其实就是定义了 操作所有关系型数据库的规则，每一个数据库了操作的方式可以能是不一样的，存在一定差异化，类比于地方的方言。</p></li><li><p>SQL通用用法</p><p>​1）SQL  是可以单行运行、也可以多行运行的，且结束符号是封号（英文状态）</p><p>​2）可以使用空格和缩进来增强SQL语句的可读性。</p><p>​3）MySQL数据库中，是不区分大小写的，<strong>关键字一般建议使用大写</strong>。<br>​4）数据库中设计3中注释</p><ul><li><p>单行注释： <code>--</code> 需要注释的内容     </p><pre><code>                    `#`   需要注释的内容（在mysql特有）</code></pre></li><li><p>多行注释：<code>/*  需要注释的内容  */</code></p></li></ul></li><li><p>SQL的分类</p><p>​（1）<code>DDL（Date Definition Language）</code>数据定义语言</p><p>​是用来定义数据库对象：数据库、数据表、列等</p><p>​关键字：create、drop、alter等</p><p>​（2）<code>DML（Date Manipulation Language）</code>数据操作语言</p><p>​是用来对数据库中的表中的数据进行：增删改。</p><p>​关键字：insert、delete、 update等</p></li></ol><p>​（3）<code>DQL（Date Query Language）</code>数据库查询语言</p><p>​是用来查询数据库中表的记录（即指数据）。</p><p>​关键字：select、 where等</p><p>​（4）DCL（Data Control  Language） 数据控制语言</p><p>​是用来定义数据库的访问权限和安全级别。</p><p>​    关键字：Grant、 Revoke等。</p><h2 id="SQL-语句的应用"><a href="#SQL-语句的应用" class="headerlink" title="SQL 语句的应用"></a>SQL 语句的应用</h2><h3 id="DDL-数据库定义语言-–-数据库、数据表"><a href="#DDL-数据库定义语言-–-数据库、数据表" class="headerlink" title="DDL : 数据库定义语言 – 数据库、数据表"></a>DDL : 数据库定义语言 – 数据库、数据表</h3><ol><li><p>操作数据库: CRUD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">1. C：Create 创建</span><br><span class="line">-- 创建数据库</span><br><span class="line">create database 数据库名称;</span><br><span class="line">-- 创建数据库并判断是否存在</span><br><span class="line">create database if not exists 数据库名称;</span><br><span class="line">-- 创建数据库的同时可以设置字符集</span><br><span class="line">create database  数据库名称 character set 字符集; 【uft8、gbk】</span><br><span class="line"># 练习：创建一个名为db1的数据库</span><br><span class="line">#      创建一个名为db2的数据库，并判断</span><br><span class="line">#      创建一个名为db3的数据库，并判断的同时设置字符集为utf8</span><br><span class="line">create database db1;</span><br><span class="line">create database if not exists db2;</span><br><span class="line">create database if not exists db3 character set utf8;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database db1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database if not exists db2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; create database if not exists db3 character set utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.R：Retrieve 查询</span><br><span class="line">-- 查询数据库</span><br><span class="line">show databases;</span><br><span class="line">-- 查询某个数据库的字符集：查询某个数据库的创建语句就可以查询到字符集</span><br><span class="line">show create database 数据库名称;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| db1                |</span><br><span class="line">| db2                |</span><br><span class="line">| db3                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show create database db1;</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                              |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">3.U： Update 修改</span><br><span class="line">-- 修改数据库的字符集</span><br><span class="line">alter database 数据库名称 character set 字符集名称;</span><br><span class="line"></span><br><span class="line"># 修改db3数据库的默认字符集为gbk</span><br><span class="line">alter database db3 character set gbk;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; alter database db3 character set gbk;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show create database db3;</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                             |</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">| db3      | CREATE DATABASE `db3` /*!40100 DEFAULT CHARACTER SET gbk */ |</span><br><span class="line">+----------+-------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">4. D： Delete 删除</span><br><span class="line">-- 删除数据库</span><br><span class="line">drop database 数据库名称;</span><br><span class="line">-- 判断数据库是否存在，存在则删除</span><br><span class="line">drop database if exists 数据库名称;</span><br><span class="line"># 删除db3数据库</span><br><span class="line"></span><br><span class="line">drop database if exists db3;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; drop database if exists db3;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| db1                |</span><br><span class="line">| db2                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>操作数据表 （CRUD）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">C：Create 创建</span><br><span class="line">-- 创建数据库表</span><br><span class="line"># 创建表的标准语法：</span><br><span class="line">create table 表名称( </span><br><span class="line">        类名称1 数据类型1, </span><br><span class="line">        列名称2 数据类型2, </span><br><span class="line">        ...</span><br><span class="line">        变量名称n 数据类型n</span><br><span class="line">    );</span><br><span class="line"># 注意使用： 最后一列的数据，是不需要添加逗号的</span><br><span class="line">数据类型：</span><br><span class="line">1.int 整数类型   id int(18)</span><br><span class="line">2.double 小数类型  sal double(10, 2) 数据的最大长度是10，小数点精确到后2位</span><br><span class="line">3.varchar 字符串类型 name varchar(10)    &quot;zhangsan&quot; / &quot;张三&quot;</span><br><span class="line">4.date 日期类型 只包含了年月日, yyyy-MM-dd</span><br><span class="line">  datetime 包含了年月日时分秒，yyyy-MM-dd HH:mm:ss</span><br><span class="line">  timestamp 叫时间戳，包含了年月日时分秒，yyyy-MM-dd HH:mm:ss</span><br><span class="line">   -- 特点在于，不给其赋值时，默认会填写当前系统所在的时间，完成自动赋值。</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">id int(5),</span><br><span class="line">    name varchar(32),</span><br><span class="line">    score double(3, 2),</span><br><span class="line">    birthday datetime,</span><br><span class="line">    create_table_time timestamp</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use db2;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [db2]&gt; create table student(</span><br><span class="line">    -&gt; id int(5),</span><br><span class="line">    -&gt;     name varchar(32),</span><br><span class="line">    -&gt;     score double(3, 2),</span><br><span class="line">    -&gt;     birthday datetime,</span><br><span class="line">    -&gt;     create_table_time timestamp</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"># 练习： 创建一张名为user的数据表，包含字段：年龄、性别、名字、生日、工资、表创建的时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R：Retrieve 查询</span><br><span class="line">-- 查询表</span><br><span class="line">show tables;</span><br><span class="line">-- 查询表的结构</span><br><span class="line">desc 数据表名称;</span><br><span class="line">MariaDB [db2]&gt; show tables;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_db2 |</span><br><span class="line">+---------------+</span><br><span class="line">| student       |</span><br><span class="line">| user          |</span><br><span class="line">+---------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [db2]&gt; desc user;</span><br><span class="line">+-------------------+-------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| Field             | Type        | Null | Key | Default           | Extra                       |</span><br><span class="line">+-------------------+-------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| id                | int(5)      | YES  |     | NULL              |                             |</span><br><span class="line">| name              | varchar(32) | YES  |     | NULL              |                             |</span><br><span class="line">| score             | double(3,2) | YES  |     | NULL              |                             |</span><br><span class="line">| birthday          | datetime    | YES  |     | NULL              |                             |</span><br><span class="line">| create_table_time | timestamp   | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">+-------------------+-------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">U： Update 修改</span><br><span class="line">-- 修改表名称</span><br><span class="line">alter table 旧的表名称 rename to 新的表名称; </span><br><span class="line">-- 修改表的字符集</span><br><span class="line">alter table 表名称 character set 字符集;</span><br><span class="line">-- 增加一列</span><br><span class="line">alter table 表名称 add 列名称 数据类型;</span><br><span class="line">-- 修改列的名称</span><br><span class="line">alter table 表名称 change 列名称 新列名称 数据类型;</span><br><span class="line">alter table 表名称 modify 列名称 新的数据类型;</span><br><span class="line">-- 删除列</span><br><span class="line">alter table 表名称 drop 列名称;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D： Delete 删除</span><br><span class="line">-- 删除整张表</span><br><span class="line">drop table 表名称;</span><br><span class="line">drop table if exists 表名称;</span><br><span class="line"></span><br><span class="line">MariaDB [db2]&gt; drop table if exists user1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [db2]&gt; show tables;</span><br><span class="line">+---------------+</span><br><span class="line">| Tables_in_db2 |</span><br><span class="line">+---------------+</span><br><span class="line">| student       |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol><h3 id="DML：数据操作语言"><a href="#DML：数据操作语言" class="headerlink" title="DML：数据操作语言"></a>DML：数据操作语言</h3><ol><li>向表中添加数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法结构：</span><br><span class="line">insert into 表名称(列名称1, 列名称2，列名称3，... 列名称n)values(值1，值，值3...值n);</span><br><span class="line">注意事项：</span><br><span class="line">1. 列名称和值要做到一一对应！</span><br><span class="line">2. 如果表名称后面不定义列名,则默认是给所有的列进行赋值</span><br><span class="line">insert into 表名称 values(值1，值，值3...值n);</span><br><span class="line">3. 除了数字类型，其他的类型需要使用引号(单双引号都是可以的)</span><br><span class="line"># 举例</span><br><span class="line">-- 创建表</span><br><span class="line">create table person(id int(3),name varchar(32))charset=utf8;</span><br><span class="line">-- 插入数据</span><br><span class="line">方式一：</span><br><span class="line">INSERT INTO person(id,name)VALUES(100,&#x27;张三&#x27;);</span><br><span class="line">方式二：</span><br><span class="line">INSERT INTO person VALUES(200,&#x27;李四&#x27;);</span><br><span class="line">方式三：</span><br><span class="line">INSERT INTO person VALUES(300,&#x27;王五&#x27;),(400,&#x27;马六&#x27;),(500,&#x27;田七&#x27;);</span><br></pre></td></tr></table></figure><ol start="2"><li>将表中数据删除</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法规则：</span><br><span class="line">delete from 表名称 [where 条件];</span><br><span class="line">注意事项：</span><br><span class="line">1. 如果删除语句不添加任何的条件，则删除的是整张表的数据。</span><br><span class="line">2. 如果我们要删除表中的所有数据：</span><br><span class="line">（1）delete from 表名称; 【占空间的，好比于删除了文件，该文件还是放在了回收站中（回滚）】</span><br><span class="line">（2）truncate table 表名称; 【删除的数据是永久 shift+del 】 </span><br><span class="line">注意以上的两个sql删除的都是表中的数据，并非删除的是表结构。</span><br><span class="line">如果要删除标本身：drop table 表名称;</span><br><span class="line"># 举例</span><br><span class="line">DELETE FROM person WHERE id=100;</span><br><span class="line">DELETE FROM person WHERE name=&#x27;李四&#x27;;</span><br><span class="line">DELETE FROM person WHERE id=300 and name=&#x27;李四&#x27;;</span><br><span class="line">TRUNCATE TABLE person;-- 删除的是表中的数据</span><br><span class="line">DELETE FROM person;-- 删除的是表中的数据</span><br><span class="line">DROP TABLE person; -- 删除的是整个表的结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>把表中的数据修改</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法结构：</span><br><span class="line">update 表名称 set 列名称1 = 值1，列名称2=值2，...，列名称n=值n [ where 条件]；</span><br><span class="line">注意事项：</span><br><span class="line">（1）如果更新操作不添加任何的条件，那么修改的是整张表中的数据。</span><br><span class="line"># 举例</span><br><span class="line">UPDATE person SET id=101,NAME=&#x27;zahngsan&#x27; WHERE id=500</span><br><span class="line">UPDATE person SET id=102,NAME=&#x27;lisi&#x27; WHERE id=300 AND NAME=&#x27;李四&#x27;;</span><br><span class="line">UPDATE person SET id=103,NAME=&#x27;wangwu&#x27; ;-- 整张表的数据被更新</span><br></pre></td></tr></table></figure><h3 id="练习作业"><a href="#练习作业" class="headerlink" title="练习作业"></a>练习作业</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. 创建mydb1和mydb2数据库,字符集第一个utf8和第二个gbk</span><br><span class="line">create database mydb1 ....</span><br><span class="line">2. 查询所有数据库检查是否创建成功</span><br><span class="line"></span><br><span class="line">3. 分别查询两个数据库的字符集是否正确</span><br><span class="line">4. 先使用mydb1再使用mydb2</span><br><span class="line">5. 删除两个数据库</span><br><span class="line">6. 创建数据库：mydb3 字符集utf8并使用</span><br><span class="line">7. 创建员工表emp字段：名字 字符集utf8</span><br><span class="line">8. 添加表字段: 最后添加job,最前面添加id, job前面添加工资salary</span><br><span class="line">9. 删除：job字段 </span><br><span class="line">10. 修改表名为：e </span><br><span class="line">11. 删除表：emp </span><br><span class="line">12. 删除数据库：mybd3</span><br><span class="line">13. 创建数据库mydb4 字符集utf8并使用</span><br><span class="line">14. 创建汽车car表,字段有: id ,name, type(类型的意思字符串),生产日期（包含年月日）</span><br><span class="line">15. 插入以下数据:</span><br><span class="line">(1)五菱宏光 面包车,(2)保时捷911 跑车, (3)蔚来ES8 SUV,(4)小鹏p7 纯电轿车 </span><br><span class="line">16. 修改五菱宏光为：火车</span><br><span class="line">17. 给表添加字段：价格money</span><br><span class="line">18. 修改id小于3的价格为10000</span><br><span class="line">19. 修改：蔚来es8 为纯电SUV</span><br><span class="line">20. 修改保时捷911价格为20000</span><br><span class="line">21. 删除：id等于4的数据</span><br><span class="line">22. 修改：所有车的价格为888</span><br><span class="line">23. 修改表名为：cars</span><br><span class="line">24. 删除：money字段</span><br><span class="line">25. 删除所有数据 </span><br><span class="line">26. 删除表</span><br><span class="line">27. 删除数据库</span><br></pre></td></tr></table></figure><h3 id="DQL：数据查询语言"><a href="#DQL：数据查询语言" class="headerlink" title="DQL：数据查询语言"></a>DQL：数据查询语言</h3><h4 id="应用数据"><a href="#应用数据" class="headerlink" title="应用数据"></a>应用数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 只需要将以下的数据复制到可视化窗口，选中运行即可。或者粘贴到黑窗口回车运行！</span><br><span class="line"></span><br><span class="line"># 创建表</span><br><span class="line">CREATE TABLE student(</span><br><span class="line">     id int, -- 编号</span><br><span class="line">     name varchar(20), -- 姓名</span><br><span class="line">     age int, -- 年龄</span><br><span class="line">     sex varchar(5), -- 性别</span><br><span class="line">     address varchar(100), -- 地址</span><br><span class="line">     chinese int, -- 语文</span><br><span class="line">     math int, -- 数学</span><br><span class="line">     english int -- 英语</span><br><span class="line">);</span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO student(</span><br><span class="line">    id, name, age, sex, address, chinese, math, english</span><br><span class="line">)VALUES</span><br><span class="line"></span><br><span class="line">(1,&#x27;唐僧&#x27;,55,&#x27;女&#x27;,&#x27;大唐&#x27;,88,66,78),</span><br><span class="line">(2,&#x27;孙悟空&#x27;,45,&#x27;男&#x27;,&#x27;水帘洞&#x27;,90,98,87),</span><br><span class="line">(3,&#x27;猪八戒&#x27;,39,&#x27;男&#x27;,&#x27;高老庄&#x27;,66,56,77),</span><br><span class="line">(4,&#x27;沙和尚&#x27;,40,&#x27;男&#x27;,&#x27;流沙河&#x27;,64,76,65),</span><br><span class="line">(5,&#x27;牛魔王&#x27;,45,&#x27;男&#x27;,&#x27;翠云山&#x27;,60,86,58),</span><br><span class="line">(6,&#x27;铁扇公主&#x27;,38,&#x27;女&#x27;,&#x27;火焰山&#x27;,61,81,71),</span><br><span class="line">(7,&#x27;红孩儿&#x27;,12,&#x27;男&#x27;,&#x27;火云洞&#x27;,55,99,65),</span><br><span class="line">(8,&#x27;如来佛&#x27;,99,&#x27;男&#x27;,&#x27;西天&#x27;,99,99,99),</span><br><span class="line">(9,&#x27;观世音&#x27;,98,&#x27;女&#x27;,&#x27;西天&#x27;,98,98,98),</span><br><span class="line">(10,&#x27;白骨精&#x27;,28,&#x27;女&#x27;,&#x27;妖界&#x27;,59,56,NULL);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">一、基础查询</span><br><span class="line">1.语法结构：</span><br><span class="line">select 列名1,列名2,列名3,..,列名n from 表名称</span><br><span class="line"># 举例：</span><br><span class="line">select id,name,age,sex from student;</span><br><span class="line">2.注意事项：</span><br><span class="line">（1）select命令可以读取一行或者多行数据</span><br><span class="line">（2）如果要查询表中所有的列，则可以使用 * 代替</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">（3）还可以添加条件进行查询，添加条件之后，返回的是所有符合条件的内容</span><br><span class="line">    SELECT * FROM student WHERE id&lt;=5;</span><br><span class="line"></span><br><span class="line">3.（*）对于查询到的数据结果，如果有重复数据体现，在某些情况下需要对其去重操作。则：</span><br><span class="line">使用关键字： distinct</span><br><span class="line">select distinct sex from student; -- 查表结果中的性别数据</span><br><span class="line"></span><br><span class="line">4.（*）当null参与运算时，得到的结果还是null。对null就行处理时，</span><br><span class="line">使用关键字：ifnull</span><br><span class="line">SELECT id,NAME,ifnull(chinese,0)+ifnull(math,0)+ifnull(english,0) FROM student;</span><br><span class="line">注意： ifnull(表达式1，表达式2)。</span><br><span class="line">  第一个表达式判断如果是null，则可以使用表达式2的值代替表达式1的值。</span><br><span class="line">  </span><br><span class="line">5.（*）可以给列起别名，使用到的关键字 AS，这个AS是可以省略掉的，但一定要打至少一个的空格 </span><br><span class="line">SELECT ifnull(chinese,0)+ifnull(math,0)+ifnull(english,0) AS &#x27;总分&#x27; FROM student;</span><br><span class="line">SELECT id &#x27;序号&#x27;, NAME &#x27;名字&#x27; FROM student;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">二、条件查询</span><br><span class="line">1.where 字句后面是查询条件</span><br><span class="line">2.运算符：</span><br><span class="line">（1）比较运算符</span><br><span class="line">&gt;、 &lt;、 &gt;=、 &lt;=、 !=和&lt;&gt;（表示不等于）、 =</span><br><span class="line">between...and...</span><br><span class="line">in(集合)</span><br><span class="line">like: 模糊查询</span><br><span class="line"># mysql的占位符：</span><br><span class="line">  _: 单个任意的字符</span><br><span class="line">                      %: 多个任意的字符</span><br><span class="line">            is null</span><br><span class="line">（2）逻辑运算符</span><br><span class="line">and: 表示与的关系   或者可以使用： &amp;&amp;</span><br><span class="line">or:  表示或的关系   或者可以使用： ||</span><br><span class="line">not: 表示非的关系   或者可以使用： ！</span><br><span class="line">语法结构：</span><br><span class="line">select </span><br><span class="line">字段列表</span><br><span class="line">from</span><br><span class="line">表名称</span><br><span class="line">where</span><br><span class="line">条件列表</span><br><span class="line">group by</span><br><span class="line">    分组字段</span><br><span class="line">    having</span><br><span class="line">    分组之后的条件</span><br><span class="line">    order by</span><br><span class="line">    排序</span><br><span class="line">    limit</span><br><span class="line">    分页限定</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="DQL条件查询练习（1）："><a href="#DQL条件查询练习（1）：" class="headerlink" title="DQL条件查询练习（1）："></a>DQL条件查询练习（1）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询年龄小于等于28的</span><br><span class="line"></span><br><span class="line">-- 2.查询年龄大于90的</span><br><span class="line"></span><br><span class="line">-- 3.查询年龄不等于45</span><br><span class="line"></span><br><span class="line">-- 4.查询年龄大于20岁，小于等于50的</span><br><span class="line"></span><br><span class="line">-- 5.查询年龄是 12岁，45岁，98岁的</span><br><span class="line"></span><br><span class="line">-- 6.查询英语成绩是 null</span><br><span class="line"></span><br><span class="line">-- 7.查询英语成绩不是null </span><br><span class="line"></span><br><span class="line">-- 8.查询姓名中是4字的人</span><br><span class="line"></span><br><span class="line">-- 9.查询姓名中包含&#x27;八&#x27;字的人</span><br><span class="line"></span><br><span class="line">-- 10.查询姓名中第二个字是&#x27;八&#x27;的人</span><br><span class="line"></span><br><span class="line">-- 11.查询姓名是以&#x27;红&#x27;开头的人</span><br><span class="line"></span><br><span class="line">-- 12.查询姓名中以 &quot;佛&quot; 结尾的人</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参考答案："><a href="#参考答案：" class="headerlink" title="参考答案："></a>参考答案：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询年龄小于等于28的</span><br><span class="line">SELECT * FROM student WHERE age &lt;=28;</span><br><span class="line"></span><br><span class="line">-- 2.查询年龄大于90的</span><br><span class="line">SELECT * FROM student WHERE age &gt;90;</span><br><span class="line"></span><br><span class="line">-- 3.查询年龄不等于45</span><br><span class="line">SELECT * FROM student WHERE age != 45;</span><br><span class="line">SELECT * FROM student WHERE age &lt;&gt;45;</span><br><span class="line"></span><br><span class="line">-- 4.查询年龄大于20岁，小于等于50的</span><br><span class="line">SELECT * FROM student WHERE age &gt;20 &amp;&amp; age &lt;=50;</span><br><span class="line">SELECT * FROM student WHERE age &gt;20 AND age &lt;=50;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 50;</span><br><span class="line"></span><br><span class="line">-- 5.查询年龄是 12岁，45岁，98岁的</span><br><span class="line">SELECT * FROM student WHERE age =12 || age=45 || age=98;</span><br><span class="line">SELECT * FROM student WHERE age =12 or age=45 or age=98;</span><br><span class="line">SELECT * FROM student WHERE age =12 || age=45 or age=98;</span><br><span class="line">SELECT * FROM student WHERE age in(12,45,98);</span><br><span class="line"></span><br><span class="line">-- 6.查询英语成绩是 null</span><br><span class="line"># SELECT * FROM student WHERE english=NULL; -- 判断值是否是null，是不可以使用==或者！=</span><br><span class="line">正确的是：</span><br><span class="line">SELECT * FROM student WHERE english IS NULL ;</span><br><span class="line"></span><br><span class="line">-- 7.查询英语成绩不是null </span><br><span class="line">SELECT * FROM student WHERE english IS NOT NULL ;</span><br><span class="line"></span><br><span class="line">-- 8.查询姓名中是4字的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#x27;____&#x27; ;</span><br><span class="line">-- 9.查询姓名中包含&#x27;八&#x27;字的人</span><br><span class="line"># SELECT * FROM student WHERE NAME LIKE &quot;%八_&quot; ; -- 表示查询姓名倒数第二个字符是八的人</span><br><span class="line">正确的是：</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;%八%&quot; ;</span><br><span class="line"></span><br><span class="line">-- 10.查询姓名中第二个字是&#x27;八&#x27;的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;_八%&quot; ;</span><br><span class="line"></span><br><span class="line">-- 11.查询姓名是以&#x27;红&#x27;开头的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;红%&quot; ;</span><br><span class="line"></span><br><span class="line">-- 12.查询姓名中以 &quot;佛&quot; 结尾的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;%佛&quot; ;    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">三、排序查询</span><br><span class="line">1. 语法：</span><br><span class="line">        select  </span><br><span class="line">            字段列表 </span><br><span class="line">        from </span><br><span class="line">            表名称 </span><br><span class="line">        order by </span><br><span class="line">            排序字段1 排序方式1，排序字段2 排序方式2.. ;</span><br><span class="line"># 例子</span><br><span class="line"></span><br><span class="line">SELECT * FROM student ORDER BY math ASC ;-- asc 表示升序排序</span><br><span class="line">SELECT * FROM student ORDER BY math DESC ;-- desc 表示降序排序</span><br><span class="line">注意：</span><br><span class="line">如果有多个排序的条件同时存在，则当前边的条件值相同时，才会依据第二个条件进行判断，如果当第二个条件还是相同时，就会以第三个条件作为判断升降序，依次类推下去。</span><br><span class="line"></span><br><span class="line">SELECT  * FROM student ORDER BY math DESC, english ASC ; </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">四、聚合函数</span><br><span class="line">含义：</span><br><span class="line">将一列数据作为一个整体进行纵向的计算。</span><br><span class="line">1.count(): 计算个数</span><br><span class="line">注意：计算整体个数的时候，（1）一般是会选择非空的列（主键）；（2）count(*)</span><br><span class="line"></span><br><span class="line">2.max(): 求最大值</span><br><span class="line">3.min(): 求最小值</span><br><span class="line">4.sum(): 求和</span><br><span class="line">5.avg(): 求平均数</span><br><span class="line"></span><br><span class="line">注意： 聚合函数的计算中，是排出null值的，如果在某场景null有使用到，使用ifnull函数处理。</span><br><span class="line"># 举例</span><br><span class="line">SELECT avg(english)FROM student; -- 77.55</span><br><span class="line">SELECT avg(ifnull(english,0))FROM student;-- 69.8</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">五、分组查询</span><br><span class="line">1. 语法：</span><br><span class="line">        select  </span><br><span class="line">            分组的字段、 聚合函数</span><br><span class="line">        from </span><br><span class="line">            表名称 </span><br><span class="line">        group by </span><br><span class="line">            分组字段;</span><br><span class="line">-- 按性别分组，求各组的数学平均分，语文的最高分，英语的最低分 </span><br><span class="line">    select sex,avg(math),max(chinese),min(english) from student group by sex;</span><br><span class="line">    </span><br><span class="line">    -- 按性别分组，求各组的数学平均分，数学分数低于65分的不参与分组</span><br><span class="line">    SELECT sex,AVG(math),COUNT(id)FROM student WHERE math&gt;65 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 按性别分组，求各组的数学平均分，数学分数低于65分的不参与分组, 分组之后，人数要求大于4个</span><br><span class="line">SELECT sex,AVG(math),COUNT(id)FROM student WHERE math&gt;65 GROUP BY sex HAVING COUNT(id)&gt;4;</span><br><span class="line">    </span><br><span class="line">WHERE 和 HAVING之间的区别：</span><br><span class="line">1. 位置不同： where是在分组之前，如果条件不满足，则不参与分组</span><br><span class="line">having是在分组之后，如果不满足条件，则不会被查询出来</span><br><span class="line">2. where后面条件不可以使用聚合函数，而having后面的条件是可以使用聚合函数的。    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">六、分页查询</span><br><span class="line">1.语法结构：</span><br><span class="line"> select  </span><br><span class="line">            字段列表</span><br><span class="line">         from </span><br><span class="line">            表名称</span><br><span class="line"> limit </span><br><span class="line"> 开始的索引，每页显示的条数</span><br><span class="line">    </span><br><span class="line">-- 查询第一页数据，每页显示3条</span><br><span class="line">    SELECT * FROM student LIMIT 0,3;</span><br><span class="line"></span><br><span class="line">    -- 查询第二页数据，每页显示3条</span><br><span class="line">    SELECT * FROM student LIMIT 3,3;</span><br><span class="line"></span><br><span class="line">    -- 查询第三页数据，每页显示3条</span><br><span class="line">    SELECT * FROM student LIMIT 6,3;</span><br><span class="line"></span><br><span class="line">    -- 查询第四页数据，每页显示3条</span><br><span class="line">    SELECT * FROM student LIMIT 9,3;</span><br><span class="line"></span><br><span class="line">通用公式：</span><br><span class="line">开始的索引 = （当前页码 - 1）* 每页显示的条数</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="DQL语句查询练习（2）："><a href="#DQL语句查询练习（2）：" class="headerlink" title="DQL语句查询练习（2）："></a>DQL语句查询练习（2）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询所有数据,使用年龄降序排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 2.查询所有数据,在数学成绩降序排序的基础上，如果数学相同再以年龄升序排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 3.按性别进行分组，查询下男生和女生各有多少人和英语成绩的平均分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 4.查询年龄大于等于40岁的人,按性别分组,统计每组的人数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 5.查询年龄大于30岁的人，按性别分组，统计每组的人数，并只显示性别人数大于4的数据</span><br></pre></td></tr></table></figure><h4 id="参考答案：-1"><a href="#参考答案：-1" class="headerlink" title="参考答案："></a>参考答案：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有数据,使用年龄降序排序</span><br><span class="line">select * from student order by age desc;0</span><br><span class="line"></span><br><span class="line">-- 查询所有数据,在数学成绩降序排序的基础上，如果数学相同再以年龄升序排序</span><br><span class="line">select * from student math desc, age asc;</span><br><span class="line"></span><br><span class="line">-- 按性别进行分组，查询下男生和女生各有多少人和英语成绩的平均分</span><br><span class="line">select sex, count(*), avg(ifnull(english,0)) from student3 group by sex;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于等于40岁的人,按性别分组,统计每组的人数</span><br><span class="line">select sex, count(*) from student where age &gt;=40 group by sex;</span><br><span class="line">select sex, count(*) from student where age &gt;40 || age=40 group by sex; </span><br><span class="line">select sex, count(*) from student where age &gt;40 OR age=40 group by sex;</span><br><span class="line">select sex, count(*) from student where age &gt;30 OR age in(30) group by sex;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于30岁的人，按性别分组，统计每组的人数，并只显示性别人数大于4的数据</span><br><span class="line">select sex, count(*) from student where age &gt;30 group by sex having count(*)&gt;4</span><br></pre></td></tr></table></figure><h2 id="数据库表的约束"><a href="#数据库表的约束" class="headerlink" title="数据库表的约束"></a>数据库表的约束</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">约束：</span><br><span class="line">对表中数据进行限定，保证数据的正确性、有效性和完整性！</span><br><span class="line">添加约束的方式可以在定义表时同步添加，也可以在定义表之后再进行添加。</span><br><span class="line"></span><br><span class="line">1.约束类型：</span><br><span class="line">（1）主键约束： primary key</span><br><span class="line">（2）唯一约束： unique</span><br><span class="line">（3）非空约束： not null</span><br><span class="line">（4）外键约束： foregin key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.唯一约束: </span><br><span class="line">含义：存在的值不能重复！  </span><br><span class="line"> 结构：phone varchar(20) unique</span><br><span class="line"></span><br><span class="line">-- 创建表时添加唯一约束 【推荐】</span><br><span class="line">        CREATE TABLE USER(</span><br><span class="line">            id INT(3),</span><br><span class="line">            username VARCHAR(32),</span><br><span class="line">            phone VARCHAR(20) unique </span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    INSERT INTO user VALUES(1,&#x27;张三&#x27;,&#x27;11122223333&#x27;);</span><br><span class="line"></span><br><span class="line">-- 删除唯一约束 (索引约束)</span><br><span class="line">    # ALTER TABLE user MODIFY phone VARCHAR(20); -- 删除不成功</span><br><span class="line">    ALTER TABLE user DROP INDEX phone; -- 删除索引成功</span><br><span class="line"></span><br><span class="line">-- 再给user表添加唯一约束  </span><br><span class="line">注意：在创建表之后添加唯一约束，需要保证表中指定列数据没有重复的</span><br><span class="line">ALTER TABLE user MODIFY phone VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">注意在MySQL中，唯一约束限定是运行列的有多个 null 存在！</span><br><span class="line"></span><br><span class="line">3.非空约束not null</span><br><span class="line">含义：列的值不能为null</span><br><span class="line">        结构：phone VARCHAR(20) not null</span><br><span class="line">        -- 创建表的同时，添加约束</span><br><span class="line">        CREATE TABLE USER(</span><br><span class="line">            id INT(3),</span><br><span class="line">            username VARCHAR(32),</span><br><span class="line">            phone VARCHAR(20) not null</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        INSERT INTO user VALUES(2,&#x27;李四&#x27;,null); -- 跳窗报错，phone字段的值不能为null</span><br><span class="line"></span><br><span class="line">        -- 删除非空约束</span><br><span class="line">        ALTER TABLE user MODIFY phone VARCHAR(20);</span><br><span class="line"></span><br><span class="line">        -- 在创建user表之后，给指定列设置非空约束</span><br><span class="line">        ALTER TABLE user MODIFY phone VARCHAR(20) NOT NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.主键约束</span><br><span class="line">含义： 非空且唯一（列的值不能是null，或者不能重复）</span><br><span class="line">特点：在一张表中，只能有一个主键</span><br><span class="line">结构： phone varchar(20) primary key</span><br><span class="line"></span><br><span class="line">-- 创建表是添加主键约束</span><br><span class="line">        db1CREATE TABLE USER(</span><br><span class="line">            id INT(3) primary key,</span><br><span class="line">            username VARCHAR(32),</span><br><span class="line">            phone VARCHAR(20) </span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        -- 插入数据</span><br><span class="line">        INSERT INTO user VALUES(4,&#x27;zhansan&#x27;,&#x27;13011112222&#x27;)</span><br><span class="line">        </span><br><span class="line">        -- 删除主键</span><br><span class="line">        # 删除失败 ALTER TABLE user MODIFY id INT(3);</span><br><span class="line">        ALTER TABLE user DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">        -- 添加主键</span><br><span class="line">        ALTER TABLE user add PRIMARY KEY(id);-- 【推荐使用第一种】</span><br><span class="line">        ALTER TABLE user MODIFY id INT(3)PRIMARY KEY;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">4.1 主键自增：</span><br><span class="line"></span><br><span class="line">        -- 创建表是添加主键自增：auto_increment 注意主键自增是添加在int类型的字段上的！</span><br><span class="line">        CREATE TABLE USER(</span><br><span class="line">            id INT(3)PRIMARY KEY AUTO_INCREMENT ,  -- 1  2  3   1001  1002 1003</span><br><span class="line">            username VARCHAR(32),</span><br><span class="line">            phone VARCHAR(20) </span><br><span class="line">        );</span><br><span class="line">        -- 创建表的同时也是可以设置主键的起始值的，默认是从1开始</span><br><span class="line">         CREATE TABLE USER(</span><br><span class="line">            id INT(3)PRIMARY KEY AUTO_INCREMENT ,  -- 1  2  3   1001  1002 1003</span><br><span class="line">            username VARCHAR(32),</span><br><span class="line">            phone VARCHAR(20) </span><br><span class="line">        ) AUTO_INCREMENT=1000; -- 表示主键从1000开始自增</span><br><span class="line"></span><br><span class="line">        INSERT INTO user VALUES(100, &#x27;张三&#x27;,&#x27;1100&#x27;);</span><br><span class="line">        INSERT INTO user VALUES(200, &#x27;李三&#x27;,&#x27;1101&#x27;);</span><br><span class="line">        INSERT INTO user VALUES(300, &#x27;王三&#x27;,&#x27;1102&#x27;);</span><br><span class="line">        -- 插入数据方式：</span><br><span class="line">        INSERT INTO user VALUES(null, &#x27;王三&#x27;,&#x27;1102&#x27;); -- 因为前面的最大id是300，所以插入此数据之后，该条数据的id应该为：301，也就是在前面最大id值基础之上+1.</span><br><span class="line"></span><br><span class="line">        INSERT INTO user (username,phone) VALUES(&#x27;小强&#x27;,&#x27;258&#x27;);</span><br><span class="line">        INSERT INTO user (username,phone) VALUES(&#x27;大强&#x27;,&#x27;369&#x27;);</span><br><span class="line">        -- 删除主键自增</span><br><span class="line">        -- 特点：需要先删除自增：auto_increment 然后删除主键：primary key</span><br><span class="line">        ALTER TABLE user MODIFY id INT(3);</span><br><span class="line">        ALTER TABLE user DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">        -- 在建表之后添加主键自增 【以下设置主键自增失败】 </span><br><span class="line">        ALTER TABLE user ADD PRIMARY KEY(id);  # 一般一张表中的主键是给id的。</span><br><span class="line">        ALTER TABLE user AUTO_INCREMEN=400; # 建表之后，已经插入了数据，那么设置自增需要指定初始值，auto_increment 的默认值是 1，</span><br><span class="line"></span><br><span class="line">        # 添加主键自增</span><br><span class="line">        ALTER TABLE user MODIFY id INT(3)PRIMARY KEY auto_increment;</span><br><span class="line">        # 自定义主键起始值</span><br><span class="line">ALTER TABLE user AUTO_INCREMENT=200; -- 实现了自增主键的起始值自定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># delete 和 truncate 删除表数据对自增主键的影响</span><br><span class="line"># 删除表数据</span><br><span class="line">DELETE FROM user;</span><br><span class="line">TRUNCATE TABLE user;</span><br><span class="line">区别：</span><br><span class="line">delete 删除表数据之后，自增主键值没有受任何影响。</span><br><span class="line">truncate 删除表数据之后，自增主键又从默认的1开始。</span><br><span class="line"></span><br><span class="line">    5.外键约束</span><br><span class="line">    含义：foreign key</span><br><span class="line">    让表与表之间建立强连接关系，从而保证数据的一致性、安全性和完整性</span><br><span class="line">    结构：</span><br><span class="line">    -- （1）在创建表时，添加外键</span><br><span class="line">    create table dept(</span><br><span class="line">            .....,</span><br><span class="line">            constraint 外键名称 foreign key(外键列名称) references 主表名称(主表列名称) </span><br><span class="line">        );</span><br><span class="line">    -- 删除外键</span><br><span class="line">    格式： ALTER TABLE 表名称 DROP FOREIGN KEY 外键名称;</span><br><span class="line"># 举例</span><br><span class="line">ALTER TABLE emp DROP FOREIGN KEY emp_dept_fk;</span><br><span class="line">    </span><br><span class="line">    -- 创建表之后，添加外键</span><br><span class="line">    alter table emp add constraint 外键名称 foreign key(外键列名称) references 主表名称(主表列名称) </span><br><span class="line">    # 举例</span><br><span class="line">    ALTER TABLE emp add CONSTRAINT emp_dept_fk FOREIGN KEY(dept_id) REFERENCES dept(id);</span><br><span class="line">    注意：在添加外键之前要确保从表中的数据是合理，比如从表中有部分编号1、2，但是在主表中中的</span><br><span class="line">    部门id只有2，那么在这种情况下添加外键是不成功的，需要将从表部门编号统一为2后再插入。</span><br><span class="line">    </span><br><span class="line">    -- 级联操作</span><br><span class="line">    （1） ON UPDATE CASCADE</span><br><span class="line">    （2） ON DELETE CASCADE</span><br><span class="line">    需要注意的是在设置外键的同时进行设置级联操作，更新和删除级联操作可以同时设置，也可以分开设</span><br><span class="line">    置，具体按实际的应用场景决定。</span><br><span class="line">    # 结构：</span><br><span class="line">    alter table emp add constraint 外键名称 foreign key(外键列名称) references 主表名称(主表列名称) </span><br><span class="line">    # 举例</span><br><span class="line">ALTER TABLE emp add CONSTRAINT emp_dept_fk FOREIGN KEY(dept_id) REFERENCES dept(id) ON UPDATE CASCADE ON DELETE CASCADE; </span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>外键约束：数据表</p><p>一张表数据冗余度高，内存占用率高</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(30),</span><br><span class="line">    age INT,</span><br><span class="line">    dept_name VARCHAR(30), -- 部门名称</span><br><span class="line">    dept_loc VARCHAR(30) -- 部门地址</span><br><span class="line">);</span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;张三&#x27;, 22, &#x27;研发部&#x27;, &#x27;福州&#x27;);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;李四&#x27;, 20, &#x27;研发部&#x27;, &#x27;福州&#x27;);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;王五&#x27;, 25, &#x27;研发部&#x27;, &#x27;福州&#x27;);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;赵六&#x27;, 18, &#x27;销售部&#x27;, &#x27;厦门&#x27;);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;田七&#x27;, 22, &#x27;销售部&#x27;, &#x27;厦门&#x27;);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_name, dept_loc) VALUES (&#x27;黄八&#x27;, 20, &#x27;销售部&#x27;, &#x27;厦门&#x27;);</span><br></pre></td></tr></table></figure><ul><li><p>外键约束：解决方案</p><p>多表外联，表结构简单，表关系清晰。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 创建部门表(id,dept_name,dept_loc)</span><br><span class="line">create table dept(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    dept_name varchar(20),</span><br><span class="line">    dept_loc varchar(20)</span><br><span class="line">);</span><br><span class="line">-- 创建员工表(id,name,age,dept_id)</span><br><span class="line">create table emp(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int,</span><br><span class="line">    dept_id int </span><br><span class="line">)</span><br><span class="line">-- 添加 2 个部门</span><br><span class="line">insert into dept values(null, &#x27;研发部&#x27;,&#x27;福州&#x27;),(null, &#x27;销售部&#x27;, &#x27;厦门&#x27;);</span><br><span class="line"></span><br><span class="line">-- 添加员工, dept_id 表示员工所在的部门</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;张三&#x27;, 22, 1);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;李四&#x27;, 20, 1);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;王五&#x27;, 25, 1);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;赵六&#x27;, 18, 2);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;田七&#x27;, 22, 2);</span><br><span class="line">INSERT INTO emp (NAME, age, dept_id) VALUES (&#x27;黄八&#x27;, 20, 2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><p>好的数据库表设计，不仅减小数据的冗余度，还能够使得数据查询效率提高！</p><ul><li><p>一对一【1-1】</p><blockquote><p>锁和钥匙、人和身份证</p><p>解释：一个人只能有有一个身份证，一个身份证对应一个人</p><p>实现：<code>一对一的关系中，可以在任意一张表添加外键（唯一）指向另一张表的主键</code></p></blockquote></li><li><p>一对多（多对一）【1-n 或(n-1)】</p><blockquote><p>父亲和子女、部门和员工</p><p>解释：一个父亲可以有多个子女，每个子女都有一个父亲</p><p>实现：<code>在多的一张表创建外键，指另一张表的主键</code></p></blockquote></li><li><p>多对多【n-n】</p><blockquote><p>学生和课程</p><p>解释：一个学生可以选择多门课程，每门可以被多个学生选择</p><p>实现：<code>多对多的关系表中，需要借助第三张表来实现，第三张表也称为中间表，中间表至少包含两个字段，这两个字段分别指向另外两种表的主键</code></p></blockquote></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/posts/51227.html"/>
      <url>/posts/51227.html</url>
      
        <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p><strong>定义</strong></p><pre><code>斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368........这个数列从第3项开始，每一项都等于前两项之和.</code></pre><p><strong>公式</strong><br>$$<br>a_n&#x3D;a_{(n-1)}+a_{(n-2)}<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> <span class="built_in">array</span>[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> arraysize = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]) ;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">1</span>]=<span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>;i&lt;arraysize;i++)&#123;</span><br><span class="line">        <span class="built_in">array</span>[i]=<span class="built_in">array</span>[i<span class="number">-1</span>]+<span class="built_in">array</span>[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; arraysize; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/posts/21238.html"/>
      <url>/posts/21238.html</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p><h2 id="算法实现过程"><a href="#算法实现过程" class="headerlink" title="算法实现过程"></a>算法实现过程</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<blockquote><p>人类语言：😜从第一个开始依次比较相邻的两个元素 如果后面的数字小于前面的 交换两数的位置，在使用交换后的数据比较，直到最后一个。每次把最大的数字放到后面。</p></blockquote></li></ol><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif" alt="动态图片" title="动态显示"></p><p>每次确定一位最大的数字。每次循环次数比上一次少一位</p><blockquote><p>如果一个数组长度是5 <strong>长度记为 len</strong><br>则比较轮数就是 <strong>数组长度减一</strong> 记作 <strong>i &lt; len -1</strong><br>每次的轮数记为 <strong>j &lt; len-i-1</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">5</span>]; <span class="comment">//声明数组</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//计算数组的长度</span></span><br><span class="line">    <span class="type">int</span> cnt;<span class="comment">//定义交换变量</span></span><br><span class="line">    <span class="type">int</span> i,j;<span class="comment">//定义循环变量</span></span><br><span class="line">    <span class="keyword">for</span>( i =<span class="number">0</span> ; i&lt;len;i++)&#123; <span class="comment">//数组初始化</span></span><br><span class="line">        <span class="type">int</span> a = rand() % <span class="number">100</span> ;<span class="comment">//随机数 0~100</span></span><br><span class="line">        <span class="built_in">array</span>[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]); <span class="comment">// 输出原始数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (  i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)&#123;  <span class="comment">//外侧i 控制比较轮数 数组长度-1</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++)&#123; <span class="comment">//每次的比较次数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j+<span class="number">1</span>])&#123; <span class="comment">//相邻的两个数比较大小</span></span><br><span class="line">                cnt =  <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j+<span class="number">1</span>]; <span class="comment">// 交换两个为主的数据</span></span><br><span class="line">                <span class="built_in">array</span>[j+<span class="number">1</span>] = cnt;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/posts/51203.html"/>
      <url>/posts/51203.html</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h2 id="算法实现过程"><a href="#算法实现过程" class="headerlink" title="算法实现过程"></a>算法实现过程</h2><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。<blockquote><p>人类语言：😜从第一个开始依次比较后面所有位置的数据。每次确定一个位置的数据</p></blockquote></li></ol><h3 id="图片演示"><a href="#图片演示" class="headerlink" title="图片演示"></a>图片演示</h3><blockquote><p>图片来自菜鸟教程。<br><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif" alt="动态图片" title="动态显示"><br>每次确定一位的数字。每次循环次数比上一次少一位<br>如果一个数组长度是5 <strong>长度记为 len</strong><br>则比较轮数就是 <strong>数组长度减一</strong> 记作 <strong>i &#x3D; 0; i &lt; len-1; i++</strong><br>后面位数据的位置记为 <strong>j &#x3D; i+1 ; j &lt; len;j++</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">5</span>]; <span class="comment">//声明数组</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//计算数组的长度</span></span><br><span class="line">    <span class="type">int</span> cnt;<span class="comment">//定义交换变量</span></span><br><span class="line">    <span class="type">int</span> i,j;<span class="comment">//定义循环变量</span></span><br><span class="line">    <span class="keyword">for</span>( i =<span class="number">0</span> ; i&lt;len;i++)&#123; <span class="comment">//数组初始化</span></span><br><span class="line">        <span class="type">int</span> a = rand() % <span class="number">100</span> ;<span class="comment">//随机数 0~100</span></span><br><span class="line">        <span class="built_in">array</span>[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]); <span class="comment">// 输出原始数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (  i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)&#123; <span class="comment">//外侧的一个数据</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; len; j++)&#123;<span class="comment">//后面的每一个位置的数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[j])&#123;</span><br><span class="line">                cnt =  <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[i];<span class="comment">//交换数据</span></span><br><span class="line">                <span class="built_in">array</span>[i] = cnt;</span><br><span class="line">                <span class="comment">/* code */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux vim的使用</title>
      <link href="/posts/39710.html"/>
      <url>/posts/39710.html</url>
      
        <content type="html"><![CDATA[<h1 id="vi-x2F-vim编译器的使用"><a href="#vi-x2F-vim编译器的使用" class="headerlink" title="vi&#x2F;vim编译器的使用"></a>vi&#x2F;vim编译器的使用</h1><p>这是我的的一个博客</p><h2 id="为什么要学习vi-x2F-vim编辑器"><a href="#为什么要学习vi-x2F-vim编辑器" class="headerlink" title="为什么要学习vi&#x2F;vim编辑器"></a>为什么要学习vi&#x2F;vim编辑器</h2><blockquote><p>在工作中, 要对 服务器上的 文件进行 简单 的修改, 可以使用 ssh 登录到远程服务器上, 并且使用 vi编辑器 进行简单的编辑即可需要修改的文件包括源代码配置文件</p></blockquote><h2 id="vi-和-vim"><a href="#vi-和-vim" class="headerlink" title="vi 和 vim"></a>vi 和 vim</h2><blockquote><p>vi是 visual interface的简称, 是linux中最经典的文本编辑器vi 的核心设计思想让程序员的手指始终保持在键盘的 核心区域, 就能完成所有的编辑操作</p></blockquote><h2 id="标题vi-三种工作模式切换"><a href="#标题vi-三种工作模式切换" class="headerlink" title="标题vi 三种工作模式切换"></a>标题vi 三种工作模式切换</h2><blockquote><p>终端命令行下，使用 “ vi 文件名 “，进入vi 编辑器。</p></blockquote><blockquote><p>vi 编辑器分为三种工作模式：一般指令模式、编辑模式、命令行模式。</p></blockquote><blockquote><p>（要点：无论处于那种工作模式，按 Esc键 都可进入一般指令模式。编辑模式和命令行模式的切换，必须要经过一般指令模式）</p></blockquote><ol><li>一般&#x3D;&#x3D;指令模式&#x3D;&#x3D;：刚进入vi 时的默认模式。这个模式下能够进行：&#x3D;&#x3D;移动光标、整行的复制粘贴、整行删除 等基本操作&#x3D;&#x3D;。</li><li>&#x3D;&#x3D;编辑模式&#x3D;&#x3D;：在一般指令模式下，&#x3D;&#x3D;按 “a” “i” “o” 均可进入编辑模式。此模式下能够进行：文本的输入、删除.&#x3D;&#x3D;</li><li>&#x3D;&#x3D;命令行模式（末行模式）&#x3D;&#x3D;：在一般指令模式下，按 “:” “&#x2F;“ “?”均可进入命令行模式。由于此模式的输入会显示在窗口的最后一行，也叫末行模式。&#x3D;&#x3D;此模式下能够进行：搜索、保存、离开 等操作&#x3D;&#x3D;。<br><img src="https://img-blog.csdnimg.cn/20201211161814180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfbWQ=,size_16,color_FFFFFF,t_70#pic_center"></li></ol><h2 id="vi-常用命令操作"><a href="#vi-常用命令操作" class="headerlink" title="vi 常用命令操作"></a>vi 常用命令操作</h2><p>从一般指令模式，进入编辑模式：</p><blockquote><p>i  光标前插入。<br>    a  光标后插入<br>    o  光标下一行插入。</p></blockquote><p>从任何模式退出：先按 Esc键，之后输入：</p><blockquote><p>:q   退出 vi。<br>   :q!  强制退出，不保存文件。<br>   :wq  保存文件并退出。</p></blockquote><p>移动光标（一般指令模式）</p><blockquote><p>gg  光标移动到文档头部<br>G  光标移动到文档尾部<br>ngg  光标移动到第 n 行头部<br>n+  光标向下移动 n 行<br>n-  光标向上移动 n 行<br>0  光标移动到当前行行首<br>$  光标移动到当前行行尾<br>w  光标移动到下一个字的开头<br>b  光标移动到上一个字的开头<br>fx  光标移动到 当前行下一个字母x的位置<br>h  光标向左移动一个字符。等于方向键 “←”。<br>j  光标向下移动一个字符。等于方向键 “↓”。<br>k  光标向上移动一个字符。等于方向键 “↑”。<br>l  光标向右移动一个字符。等于方向键 “→”。</p></blockquote><p>复制粘贴（一般指令模式）</p><blockquote><p>yy  复制当前行<br>nyy  复制当前行及下面的 n-1 行<br>p  粘贴</p></blockquote><p>删除（一般指令模式）</p><blockquote><p>x  删除光标后一个字符<br>X  删除光标前一个字符<br>nx  删除光标后 n 个字符<br>nX  删除光标前 n 个字符<br>d0  从光标处删到行首<br>d$  从光标处删到行尾<br>dd  删除光标所在行<br>ndd  删除光标所在行及其后 n-1 </p></blockquote><p>撤销（一般指令模式）</p><blockquote><p>u  撤销上一步操作</p></blockquote><h2 id="vim-x2F-vi编辑器的使用"><a href="#vim-x2F-vi编辑器的使用" class="headerlink" title="vim&#x2F;vi编辑器的使用"></a>vim&#x2F;vi编辑器的使用</h2><p>vim 文本的命令格式</p><blockquote><p>vi 文件名<br>vim 文件名 </p></blockquote><p>新建一个名为dome1.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi dome1.c</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210315181813841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNTM0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按下 &#x3D;&#x3D;i&#x3D;&#x3D; 进入编辑模式</p><p><img src="https://img-blog.csdnimg.cn/20210315182442763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNTM0Nw==,size_16,color_FFFFFF,t_70"><br>进入编辑模式编写代码</p><p><img src="https://img-blog.csdnimg.cn/20210315182817245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNTM0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello vim\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完代码之后按ESC 退出到命令模式 </p><p><img src="https://img-blog.csdnimg.cn/20210315183218719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNTM0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>&#x3D;&#x3D;shift+:&#x3D;&#x3D; 输入wq!保存并推出vi编辑器</p></blockquote><h2 id="Linux下的c语言编译运行"><a href="#Linux下的c语言编译运行" class="headerlink" title="Linux下的c语言编译运行"></a>Linux下的c语言编译运行</h2><p>GCC命令格式</p><blockquote><p>gcc 文件名 [参数] 可执行文件名</p></blockquote><p>运行</p><blockquote><p><strong>.&#x2F;可执行文件</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210315183833481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNTM0Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android页面跳转</title>
      <link href="/posts/57856.html"/>
      <url>/posts/57856.html</url>
      
        <content type="html"><![CDATA[<h1 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(上下文,需要跳转的页面);</span><br><span class="line"><span class="number">1</span>、<span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getApplicationContext(),DataActivity.class);</span><br><span class="line"><span class="number">2</span>、<span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>,DataActivity.class);</span><br><span class="line"></span><br><span class="line">startActivity(intent);<span class="comment">//跳转语句</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="清除当前窗体"><a href="#清除当前窗体" class="headerlink" title="清除当前窗体"></a>清除当前窗体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">finish();</span><br><span class="line">释放内存</span><br></pre></td></tr></table></figure><h2 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h2><h3 id="存放要传递的信息"><a href="#存放要传递的信息" class="headerlink" title="存放要传递的信息"></a>存放要传递的信息</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>(); <span class="comment">//新建Bundle对象 ，用于存放数据</span></span><br><span class="line">bundle.putSerializable(<span class="string">&quot;名字&quot;</span>,数据);<span class="comment">// 向Bundle对象添加序列数据 Json</span></span><br><span class="line"></span><br><span class="line">bundle.putSerializable(<span class="string">&quot;BaseResponseEntity&quot;</span>,response);</span><br><span class="line">bundle.putString(<span class="string">&quot;baseUrl&quot;</span>,baseUrl);<span class="comment">//向Bundle对象添加字符串数据</span></span><br><span class="line">intent.putExtra(bundle); <span class="comment">//将Bundle 对象放入Intent对象</span></span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intent.putExtra(<span class="string">&quot;名字&quot;</span>,内容);</span><br><span class="line">intent.putString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Alex&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="取出信息"><a href="#取出信息" class="headerlink" title="取出信息"></a>取出信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getIntent().getSerializableExtra(<span class="string">&quot;名字&quot;</span>);</span><br><span class="line"></span><br><span class="line">userbaseResponseEntity = (BaseResponseEntity) getIntent().getSerializableExtra(<span class="string">&quot;BaseResponseEntity&quot;</span>);<span class="comment">//在Intent对象中取出名字为&quot;BaseResponseEntity&quot;的序列对象 转换类型为BaseResponseEntity</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intent </tag>
            
            <tag> Bundle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android新大陆云平台API使用</title>
      <link href="/posts/48581.html"/>
      <url>/posts/48581.html</url>
      
        <content type="html"><![CDATA[<h1 id="API-介绍"><a href="#API-介绍" class="headerlink" title="API-介绍"></a>API-介绍</h1><p>在进行云平台操作之前需要开启网络权限 </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录云平台"><a href="#登录云平台" class="headerlink" title="登录云平台"></a>登录云平台</h2><p><strong>基本API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;http://api.nlecloud.com&quot;</span>; <span class="comment">//新大陆的URL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NetWorkBusiness netWorkBusiness; <span class="comment">// 对象声明</span></span><br><span class="line">    netWorkBusiness = <span class="keyword">new</span> <span class="title class_">NetWorkBusiness</span>(暂时填写空字符串,新大陆网址);<span class="comment">//实例化对象</span></span><br><span class="line">        netWorkBusiness.signIn(<span class="keyword">new</span> <span class="title class_">SignIn</span>(用户名, 用户密码), <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;User&gt;&gt;(获取自己的Context) &#123;   <span class="comment">//绑定用户 和密码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;User&gt; userBaseResponseEntity)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;http://api.nlecloud.com&quot;</span>;</span><br><span class="line">netWorkBusiness = <span class="keyword">new</span> <span class="title class_">NetWorkBusiness</span>(<span class="string">&quot;&quot;</span>,baseUrl);</span><br><span class="line">        netWorkBusiness.signIn(<span class="keyword">new</span> <span class="title class_">SignIn</span>(user, pwd), <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;User&gt;&gt;(getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;User&gt; response)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getResultObj().getAccessToken() 返回一个字符串</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;http://api.nlecloud.com&quot;</span>;</span><br><span class="line">netWorkBusiness = <span class="keyword">new</span> <span class="title class_">NetWorkBusiness</span>(<span class="string">&quot;&quot;</span>,baseUrl);</span><br><span class="line">        netWorkBusiness.signIn(<span class="keyword">new</span> <span class="title class_">SignIn</span>(user, pwd), <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;User&gt;&gt;(getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;User&gt; response)</span> &#123;</span><br><span class="line">                    toKen = response.getResultObj().getAccessToken();<span class="comment">//获取token</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>数据返回实例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ResultObj&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;UserID&quot;</span><span class="punctuation">:</span><span class="number">120315</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Telphone&quot;</span><span class="punctuation">:</span><span class="string">&quot;15304785660&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Gender&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;CollegeID&quot;</span><span class="punctuation">:</span><span class="number">381</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;CollegeName&quot;</span><span class="punctuation">:</span><span class="string">&quot;内蒙古电子信息职业技术学院&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RoleName&quot;</span><span class="punctuation">:</span><span class="string">&quot;学生&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RoleID&quot;</span><span class="punctuation">:</span><span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AccessToken&quot;</span><span class="punctuation">:</span><span class="string">&quot;23327429937D57CD81D8CEBA80CE7770030EC259A26B0FA765E8B191736F9BA8E04A4A7E8EB80C470F7C91281A4440658570B640F709326F3600238571E9781CE2939B873AC3141EB73ADC982FB660AF0D95C82A07DB2C15E637F1B02AA19738E62F18DCF3EC335C98E0073A973FA82F68977E316E379FB3ED94F3F80B638A5A50D740FBE8893E47680A817E4AD792E9698275B692C9D410144592C0D7BC5BB38FC713DC76A6B6EFDF3F7435F6221DE49337A796B4EA67A6E6A3D033E63E35C4D08C05CE2B4F035260D1C751BD31D165EE21164E33F1378648F3FFFE163CB23B&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AccessTokenErrCode&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ReturnUrl&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DataToken&quot;</span><span class="punctuation">:</span><span class="string">&quot;8e05d0696611cb7d&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;StatusCode&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Msg&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ErrorObj&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>response.getStatus(); 获取状态 1 失败 0 成功<br>response.getmsg(); 获取错误信息 具体的错误 网络问题还是 账户问题</p></blockquote><h2 id="将数据转为Json-输出到TextVime"><a href="#将数据转为Json-输出到TextVime" class="headerlink" title="将数据转为Json 输出到TextVime"></a>将数据转为Json 输出到TextVime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();<span class="comment">//改对象的作用将 其他类型的数据转为Json</span></span><br><span class="line">Tools.printJson(Text控件名字, gson.toJson(userbaseResponseEntity类型的数据),<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">Tools.printJson(Text控件名字, gson.toJson(userbaseResponseEntity类型的数据));</span><br><span class="line">加<span class="literal">false</span> 的话 文本框的数据不会清空 累加</span><br></pre></td></tr></table></figure><h2 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h2><p>在具体登录完成后 会返回用户的<strong>AccessToken</strong>这个很重要 后面都会用到<br>在做任何操作 查询传感器 查询设备 查询传感器等操作的时候 需要提前做绑定<strong>AccessToken</strong> 与<strong>Url</strong>的操作 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NetWorkBusiness</span> <span class="variable">netWorkBusiness</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetWorkBusiness</span>(token,baseUrl);</span><br><span class="line">token == 用户的AccessToken </span><br><span class="line">baseUrl == 新大陆的云平台api地址</span><br></pre></td></tr></table></figure><p><strong>API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">netWorkBusiness.getProject(项目ID,写 <span class="keyword">new</span> 会自动生成 监听器);</span><br><span class="line">项目ID图片见下面的图片</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netWorkBusiness.getProject(<span class="string">&quot;439927&quot;</span>, <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;ProjectInfo&gt;&gt;(<span class="built_in">this</span>.getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;ProjectInfo&gt; projectInfoBaseResponseEntity)</span> &#123;</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(projectInfoBaseResponseEntity),<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>项目ID</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205132125676.png"></p><p><strong>请求结果</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205132125599.png"></p><h3 id="查询单个传感器"><a href="#查询单个传感器" class="headerlink" title="查询单个传感器"></a>查询单个传感器</h3><p><code>netWorkBusiness.getSensor(设备ID,传感器表示符)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netWorkBusiness.getSensor(<span class="string">&quot;475945&quot;</span>, <span class="string">&quot;z_temperature&quot;</span>, <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt;(getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;SensorInfo&gt; sensorInfoBaseResponseEntity)</span> &#123;</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(sensorInfoBaseResponseEntity));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205132136657.png"><br><em><strong>获取名字API</strong></em><br><code>sensorInfoBaseResponseEntity.getResultObj().getApiTag())</code><br><strong>获取单位API</strong><br><code>sensorInfoBaseResponseEntity.getResultObj().getUnit()</code><br><strong>获取传感器数值</strong><br><code>sensorInfoBaseResponseEntity.getResultObj().getValue()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">netWorkBusiness.getSensor(<span class="string">&quot;475945&quot;</span>, <span class="string">&quot;z_temperature&quot;</span>, <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt;(getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;SensorInfo&gt; sensorInfoBaseResponseEntity)</span> &#123;</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(sensorInfoBaseResponseEntity.getResultObj().getApiTag()),<span class="literal">false</span>);</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(sensorInfoBaseResponseEntity.getResultObj().getUnit()),<span class="literal">false</span>);</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(sensorInfoBaseResponseEntity.getResultObj().getValue()),<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>运行效果</strong><br><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205132147148.png"></p><h3 id="查询多个传感器"><a href="#查询多个传感器" class="headerlink" title="查询多个传感器"></a>查询多个传感器</h3><p><code>getDevicesDatas(设备ID,new 自动生成)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netWorkBusiness.getDevicesDatas(<span class="string">&quot;475945&quot;</span>, <span class="keyword">new</span> <span class="title class_">NCallBack</span>&lt;BaseResponseEntity&lt;List&lt;DeviceDatas&gt;&gt;&gt;(getApplicationContext()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(BaseResponseEntity&lt;List&lt;DeviceDatas&gt;&gt; listBaseResponseEntity)</span> &#123;</span><br><span class="line">                Tools.printJson(dataView,gson.toJson(listBaseResponseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
          <category> 新大陆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新大陆 </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 添加库</title>
      <link href="/posts/54293.html"/>
      <url>/posts/54293.html</url>
      
        <content type="html"><![CDATA[<h1 id="新建与添加新大陆jar"><a href="#新建与添加新大陆jar" class="headerlink" title="新建与添加新大陆jar"></a>新建与添加新大陆jar</h1><h2 id="1、新建Android工程"><a href="#1、新建Android工程" class="headerlink" title="1、新建Android工程"></a>1、新建Android工程</h2><h2 id="2、切换到项目视图下"><a href="#2、切换到项目视图下" class="headerlink" title="2、切换到项目视图下"></a>2、切换到项目视图下</h2><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121117868.png"></p><h3 id="2-1在app文件夹下找到libs的文件夹"><a href="#2-1在app文件夹下找到libs的文件夹" class="headerlink" title="2.1在app文件夹下找到libs的文件夹"></a>2.1在app文件夹下找到libs的文件夹</h3><p><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121118433.png"></p><h3 id="2-3将第三方的jar放入"><a href="#2-3将第三方的jar放入" class="headerlink" title="2.3将第三方的jar放入"></a>2.3将第三方的jar放入</h3><p> <img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121120317.png"></p><blockquote><p>本地的三个库。例如串口的4150 zigBee 大白块等。走串口服务器的 网络通信 都是这三个。</p></blockquote><p> <img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121120826.png"></p><blockquote><p>云平台的</p></blockquote><p> 将需要的jar放入libs后 在jar文件上右键 如果有多个 jar文件 全选jar 在右键<br> <img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121123101.png"></p><blockquote><p>找到add As Library 将第三方jar添加到项目中</p></blockquote><p> <img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121125190.png"></p><blockquote><p>注：这里一般选择确定就可</p></blockquote><h3 id="2-4-添加完成后"><a href="#2-4-添加完成后" class="headerlink" title="2.4 添加完成后"></a>2.4 添加完成后</h3><p> jar会有下级菜单<br> <img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121127418.png"><br> <strong>并且在build.gradle</strong>会有显示<br><img src="https://cdn.jsdelivr.net/gh/Aubuty/Markdown-pico/blogs/pictures202205121128948.png"></p><blockquote><p>住：有的电脑会不显示 如果不影响使用 则不需要管 如果不能使用则需要添加标注的那句话</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新大陆 </tag>
            
            <tag> 云平台 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
